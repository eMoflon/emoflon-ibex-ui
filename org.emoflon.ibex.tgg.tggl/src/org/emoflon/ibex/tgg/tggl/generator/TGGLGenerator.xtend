/*
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.tgg.tggl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.IContainer
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider
import org.emoflon.ibex.common.slimgt.util.SlimGTWorkspaceUtil
import org.emoflon.ibex.tgg.tggl.util.TGGLModelFlattener
import org.moflon.core.utilities.ExtensionsUtil

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TGGLGenerator extends AbstractGenerator {
	var oldFsa = null
	
	@Inject
  	ResourceDescriptionsProvider resourceDescriptionsProvider;
 
    @Inject
 	IContainer.Manager containerManager;
	
	override void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val newFile = new TGGLModelFlattener().flatten(resourceDescriptionsProvider, containerManager, input);
		
		// trick to avoid xtext triggering endless loops
		if(oldFsa !== null && oldFsa.hashCode == fsa.hashCode) 
			return;
		
		this.oldFsa = fsa
		
		val iProject = SlimGTWorkspaceUtil.getCurrentProject(input)

		ExtensionsUtil
			.collectExtensions(TGGBuilderExtension.BUILDER_EXTENSON_ID, "class", typeof(TGGBuilderExtension))
			.forEach[builder | builder.run(iProject, newFile)];
	}
}
