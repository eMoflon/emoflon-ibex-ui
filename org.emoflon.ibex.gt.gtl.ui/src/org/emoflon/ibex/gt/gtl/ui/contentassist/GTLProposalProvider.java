/*
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.gtl.ui.contentassist;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.text.contentassist.CompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.emoflon.ibex.common.slimgt.util.SlimGTWorkspaceUtil;
import org.emoflon.ibex.gt.gtl.gTL.EditorFile;
import org.emoflon.ibex.gt.gtl.ui.builder.GTLNature;

/**
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class GTLProposalProvider extends AbstractGTLProposalProvider {

	@Override
	public void completePackageDeclaration_Name(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		super.completePackageDeclaration_Name(model, assignment, context, acceptor);

		IProject currentProject = SlimGTWorkspaceUtil.getCurrentProject(model.eResource());

		String[] lines = context.getCurrentNode().getText().split("\n");
		lines = lines[0].split("\r");

		String currentSelection = lines[0];
		String rest = context.getCurrentNode().getText().replace(lines[0], "");

		File currentFile = null;
		String location = null;
		StringBuilder pkgBuilder = null;
		try {
			String fileUri = model.eResource().getURI().toString().replace("platform:/resource/", "")
					.replace(currentProject.getName(), "");
			fileUri = currentProject.getLocation().toPortableString() + fileUri;
			currentFile = new File(fileUri).getCanonicalFile();
			location = currentFile.getCanonicalPath().replace("\\", "/");

			String relativeLocation = location.replace(currentProject.getLocation().toPortableString(), "");
			String[] segments = relativeLocation.split("/");
			pkgBuilder = new StringBuilder();
			int idx = -1;
			for (String segment : segments) {
				idx++;
				if (segment == null || segment.isBlank() || segment.isEmpty())
					continue;

				if (segment.equals("src") || segment.equals("bin"))
					continue;

				if (idx <= segments.length - 2) {
					pkgBuilder.append(segment);
					pkgBuilder.append(".");
				} else {
					pkgBuilder.append(segment.replace(".gtl", ""));
				}

			}
		} catch (Exception e) {
			return;
		}

		String pkgName = pkgBuilder.toString();

		if (!currentSelection.isBlank() && !pkgName.contains(currentSelection))
			return;

		int start = (currentSelection.isBlank()) ? 0 : currentSelection.length() + 1;
		pkgName = pkgName.substring(start);
		int cursor = pkgName.length();
		pkgName = pkgName + rest;

		int replacementLength = (currentSelection.isBlank() && context.getCurrentNode().getText().length() > 1)
				? context.getCurrentNode().getText().length() - currentSelection.length() - 1
				: context.getCurrentNode().getText().length() - currentSelection.length();

		acceptor.accept(new CompletionProposal(pkgName.toLowerCase(), context.getOffset(), replacementLength, cursor));
	}

	@Override
	public void completePatternImport_File(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completePatternImport_File(model, assignment, context, acceptor);
		IProject currentProject = SlimGTWorkspaceUtil.getCurrentProject(model.eResource());
		String currentFile = model.eResource().getURI().toString().replace("platform:/resource/", "")
				.replace(currentProject.getName(), "");
		currentFile = currentProject.getLocation().toPortableString() + currentFile;
		currentFile = currentFile.replace("/", "\\");

		String[] lines = context.getCurrentNode().getText().split("\n");
		lines = lines[0].split("\r");

		String currentSelection = lines[0].replace("\"", "").replace("/", "\\").trim().replace("%20", " ");
		String rest = context.getCurrentNode().getText().replace(lines[0], "");

		Map<String, EObject> path2model = new HashMap<>();
		IWorkspace ws = ResourcesPlugin.getWorkspace();
		for (IProject project : ws.getRoot().getProjects()) {

			try {
				if (!project.hasNature(GTLNature.NATURE_ID))
					continue;
			} catch (CoreException e) {
				continue;
			}

			File projectFile = new File(project.getLocation().toPortableString());
			List<File> gtlFiles = new LinkedList<>();
			SlimGTWorkspaceUtil.gatherFilesWithEnding(gtlFiles, projectFile, ".gtl", true);

			for (File gtFile : gtlFiles) {

				XtextResourceSet rs = new XtextResourceSet();
				URI gtModelUri;
				try {
					gtModelUri = URI.createFileURI(gtFile.getCanonicalPath());
				} catch (IOException e) {
					continue;
				}

				String fileString = gtModelUri.toFileString();
				if (fileString.equals(currentFile))
					continue;

				if (!currentSelection.isBlank() && !fileString.contains(currentSelection))
					continue;

				Resource resource = rs.getResource(gtModelUri, true);
				EcoreUtil2.resolveLazyCrossReferences(resource, () -> false);
				EObject gtModel = resource.getContents().get(0);

				if (gtModel == null)
					continue;

				// Put absolute path
				path2model.put(gtModelUri.toFileString(), gtModel);

				// Put project relative path
				String relativePath = Paths.get(currentProject.getLocation().toPortableString())
						.relativize(Paths.get(gtModelUri.toFileString())).toString();
				path2model.put(relativePath, gtModel);

				// Put package as an alternative to path
				if (gtModel instanceof EditorFile gipsEditorFile) {
					path2model.put(gipsEditorFile.getPackage().getName().replace("\"", ""), gtModel);
				}

			}
		}

		for (String path : path2model.keySet()) {

			String replacement = "\"" + path + "\"";
			int start = (currentSelection.isBlank()) ? 0 : currentSelection.length() + 1;
			replacement = replacement.substring(start);
			int cursor = replacement.length();
			replacement = replacement + rest;

			int replacementLength = (currentSelection.isBlank())
					? context.getCurrentNode().getText().length() - currentSelection.length() - 1
					: context.getCurrentNode().getText().length() - currentSelection.length();

			acceptor.accept(new CompletionProposal(replacement, context.getOffset(), replacementLength, cursor));
		}

	}

}
