/*
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.common.slimgt.validation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.validation.Check;
import org.emoflon.ibex.common.slimgt.slimGT.ArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.BracketExpression;
import org.emoflon.ibex.common.slimgt.slimGT.ExpArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.Import;
import org.emoflon.ibex.common.slimgt.slimGT.MinMaxArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.ProductArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.RelationalExpression;
import org.emoflon.ibex.common.slimgt.slimGT.SlimGTPackage;
import org.emoflon.ibex.common.slimgt.slimGT.StochasticArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.SumArithmeticExpression;
import org.emoflon.ibex.common.slimgt.slimGT.UnaryArithmeticExpression;
import org.emoflon.ibex.common.slimgt.util.SlimGTArithmeticUtil;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SlimGTValidator extends AbstractSlimGTValidator {

	protected Map<Resource, Map<URI, Resource>> resourceCache = new HashMap<>();

	protected Resource loadResource(final Resource requester, final URI gtModelUri) {
		Map<URI, Resource> cache = resourceCache.get(requester);
		if (cache == null) {
			cache = new HashMap<>();
			resourceCache.put(requester, cache);
		}

		Resource other = cache.get(gtModelUri);
		if (other == null) {
			XtextResourceSet rs = new XtextResourceSet();
			try {
				other = rs.getResource(gtModelUri, true);
			} catch (Exception e) {
				return other;
			}
			cache.put(gtModelUri, other);

			if (other == null)
				return other;

			EcoreUtil2.resolveLazyCrossReferences(other, () -> false);
		}

		return other;
	}

	/**
	 * This prevents all exceptions being "swallowed" by the default validator
	 * implementation. TODO: Remove this or make it a little nice for future stable
	 * release candidates.
	 */
	@Override
	protected void handleExceptionDuringValidation(final Throwable targetException) throws RuntimeException {
		targetException.printStackTrace();
	}

	@Check
	protected void checkMetamodelImports(Import imp) {
		if (imp == null) {
			error("Expected an import URI after the import statement.", SlimGTPackage.Literals.IMPORT__NAME);
			return;
		}

		ResourceSet rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("ecore", new EcoreResourceFactoryImpl());
		EcorePackage.eINSTANCE.eClass();
		URI uri = URI.createURI(imp.getName().replace("\"", ""));
		Resource r = null;
		EPackage metaModel = null;
		try {
			r = rs.getResource(uri, true);
			metaModel = (EPackage) r.getContents().get(0);
		} catch (Exception e) {
			error("Exception ocurred while loading imported metamodel: " + e.getMessage(),
					SlimGTPackage.Literals.IMPORT__NAME);
			return;
		}

		if (metaModel == null)
			error("Imported metamodel could not be loaded.", SlimGTPackage.Literals.IMPORT__NAME);

	}

	@Check
	protected void checkSumDataTypes(SumArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.STRING
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.SUM_ARITHMETIC_EXPRESSION__LEFT);
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.SUM_ARITHMETIC_EXPRESSION__RIGHT);
		}
	}

	@Check
	protected void checkProductDataTypes(ProductArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.PRODUCT_ARITHMETIC_EXPRESSION__LEFT);
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.PRODUCT_ARITHMETIC_EXPRESSION__RIGHT);
		}
	}

	@Check
	protected void checkExpDataTypes(ExpArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.EXP_ARITHMETIC_EXPRESSION__LEFT);
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.EXP_ARITHMETIC_EXPRESSION__RIGHT);
		}
	}

	@Check
	protected void checkStochasticDataTypes(StochasticArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.STOCHASTIC_ARITHMETIC_EXPRESSION__MEAN);
			if (expr.isHasSd())
				error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
						SlimGTPackage.Literals.STOCHASTIC_ARITHMETIC_EXPRESSION__SD);
		}
	}

	@Check
	protected void checkMinMaxDataTypes(MinMaxArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.STRING
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.STOCHASTIC_ARITHMETIC_EXPRESSION__MEAN);
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.STOCHASTIC_ARITHMETIC_EXPRESSION__SD);
		}
	}

	@Check
	protected void checkUnaryDataType(UnaryArithmeticExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.UNARY_ARITHMETIC_EXPRESSION__OPERAND);
		}
	}

	@Check
	protected void checkBracketDataType(BracketExpression expr) {
		DataTypeParseResult parseResult;
		try {
			parseResult = checkDataTypeConflicts(expr);
		} catch (Exception e) {
			return;
		}

		if (!(parseResult.type() == ValueExpressionDataType.DOUBLE
				|| parseResult.type() == ValueExpressionDataType.INTEGER)) {
			error(String.format("Error <%s> data type is not allowed in sum expressions.", parseResult.type()),
					SlimGTPackage.Literals.BRACKET_EXPRESSION__OPERAND);
		}
	}

	protected DataTypeParseResult checkDataTypeConflicts(ArithmeticExpression expr) throws Exception {
		DataTypeParseResult parseResult = getDataTypeConflicts(expr);
		if (parseResult.errorOccurred()) {
			parseResult.context2Location().forEach((context, locations) -> {
				List<ValueExpressionDataType> errors = parseResult.context2ErrorTypes().get(context);
				errors.forEach(e -> {
					locations.forEach(l -> {
						error(String.format("Error <%s> in arithmetic expression.", e), context, l);
					});
				});

			});
		}

		return parseResult;
	}

	protected DataTypeParseResult getDataTypeConflicts(ArithmeticExpression expr) throws Exception {
		return SlimGTArithmeticUtil.parseDominantDataType(expr);
	}

	@Check
	protected void checkRelationalExpressionTypeConflict(RelationalExpression expr) {
		if (expr.getLhs() == null)
			return;

		if (expr.getRhs() == null)
			return;

		DataTypeParseResult lhsType;
		try {
			lhsType = getDataTypeConflicts((ArithmeticExpression) expr.getLhs());
		} catch (Exception e) {
			return;
		}
		DataTypeParseResult rhsType;
		try {
			rhsType = getDataTypeConflicts((ArithmeticExpression) expr.getRhs());
		} catch (Exception e) {
			return;
		}

		if (lhsType.type() == rhsType.type())
			return;

		if (lhsType.type() == ValueExpressionDataType.DOUBLE && rhsType.type() == ValueExpressionDataType.INTEGER)
			return;

		if (lhsType.type() == ValueExpressionDataType.INTEGER && rhsType.type() == ValueExpressionDataType.DOUBLE)
			return;

		error(String.format("Incompatible types: lhs<%s>, rhs<%s>.", lhsType.type(), rhsType.type()),
				SlimGTPackage.Literals.RELATIONAL_EXPRESSION__LHS);
		error(String.format("Incompatible types: lhs<%s>, rhs<%s>.", lhsType.type(), rhsType.type()),
				SlimGTPackage.Literals.RELATIONAL_EXPRESSION__RHS);
	}
}
