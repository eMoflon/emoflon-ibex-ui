grammar org.emoflon.ibex.tgg.integrate.Integrate with org.eclipse.xtext.common.Terminals

import "http://www.moflon.org/ide/tgg/mosl/TGG" as tgg
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate integrate "http://www.emoflon.org/ibex/tgg/integrate/Integrate"

Integrate:
	package=Package
	imports+=Import*
	conflictResolutionStrategies+=ConflictResolutionStrategy*;

Package:
	'package' name=QualifiedName;

QualifiedName:
	ID ('.' ID)*;

Import:
	'#import' rule=[tgg::Rule];

ConflictResolutionStrategy:
	name=ID ':' 'solve' 'conflict' 'for' 'all' '{'
	variables+=Variable+
	'satisfies' '{'
	rule=SatisfactionRule
	'}'
	'}' 'with' resolution=Resolution;

Variable:
	'var' name=ID '=' pipeline=Pipeline;

VariableReference:
	ref=[Variable];

//////////////
// Pipeline //
//////////////
Pipeline:
	start=PipelineStageStart;

PipelineStageStart:
	PipelineStageSrc | PipelineStageTrg;

PipelineStageSrc:
	name='#src' '|' next=(PipelineStageFilter | PipelineStageEnd);

PipelineStageTrg:
	name='#trg' '|' next=(PipelineStageFilter | PipelineStageEnd);

PipelineStageFilter:
	PipelineStageModification | PipelineStageType;

PipelineStageModification:
	PipelineStageCreated | PipelineStageDeleted;

PipelineStageCreated:
	name='created' '|' next=(PipelineStageType | PipelineStageEnd);

PipelineStageDeleted:
	name='deleted' '|' next=(PipelineStageType | PipelineStageEnd);

PipelineStageType:
	name='type' type=[ecore::EClass] '|' next=PipelineStageEnd;

PipelineStageEnd:
	PipelineStageCount | PipelineStageExists;

PipelineStageCount:
	name='count';

PipelineStageExists:
	name='exists';

///////////////////////
// Satisfaction Rule //
///////////////////////
SatisfactionRule:
	expression=OrExpression;

OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} 'or' right+=AndExpression)*;

AndExpression returns Expression:
	BooleanExpression ({AndExpression.left=current} 'and' right+=BooleanExpression)*;

BooleanExpression:
	expression=(ComparisonExpression | VariableReference | WrappedOrExpression);

WrappedOrExpression:
	'(' expression=OrExpression ')';

ComparisonExpression:
	lhs=ComparisonParameter op=('>' | '>=' | '<' | '<=' | '==' | '!=') rhs=ComparisonParameter;

ComparisonParameter:
	VariableReference | LiteralValue;

LiteralValue:
	value=INT;

///////////////
// Resolution//
///////////////
Resolution:
	strategy=ResolutionStrategy ('fallback' fallback=FallbackResolutionStrategy)?;

ResolutionStrategy:
	MergeAndPreserveResolutionStrategy | RevokeAdditionResolutionStrategy | RevokeDeletionResolutionStrategy |
	FallbackResolutionStrategy;

FallbackResolutionStrategy:
	PreferSourceResolutionStrategy | PreferTargetResolutionStrategy | ContinueResolutionStrategy;

MergeAndPreserveResolutionStrategy:
	name='mergeAndPreserve';

RevokeAdditionResolutionStrategy:
	name='revokeAddition';

RevokeDeletionResolutionStrategy:
	name='revokeDeletion';

PreferSourceResolutionStrategy:
	name='preferSource';

PreferTargetResolutionStrategy:
	name='preferTarget';

ContinueResolutionStrategy:
	name='continue';
