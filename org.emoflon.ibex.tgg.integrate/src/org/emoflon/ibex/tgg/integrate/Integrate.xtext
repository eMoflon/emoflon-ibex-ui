grammar org.emoflon.ibex.tgg.integrate.Integrate with org.eclipse.xtext.common.Terminals

import "http://www.moflon.org/ide/tgg/mosl/TGG" as tgg
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate integrate "http://www.emoflon.org/ibex/tgg/integrate/Integrate"

Integrate:
	package=Package
	imports+=Import*
	conflictResolutionStrategies+=ConflictResolutionStrategy*;

Package:
	'package' name=QualifiedName;

QualifiedName:
	ID ('.' ID)*;

Import:
	'#import' rule=[tgg::Rule];

ConflictResolutionStrategy:
	'solve' 'conflict' 'for' 'all' '{'
	variables+=Variable+
	'satisfies' '{'
	rule=SatisfactionRule
	'}'
	'}' 'with' resolutionStrategy=ResolutionStrategy;

Variable:
	'var' name=ID '=' pipeline=Pipeline;

Pipeline:
	start=(PipelineStageSrc | PipelineStageTrg);

PipelineStageSrc:
	name='#src' '|' next=(PipelineFilterStage | PipelineCountStage);

PipelineStageTrg:
	name='#trg' '|' next=(PipelineFilterStage | PipelineCountStage);

PipelineFilterStage:
	PipelineCreatedFilterStage | PipelineDeletedFilterStage | PipelineTypeFilterStage;

PipelineCreatedFilterStage:
	name='created' '|' next=(PipelineTypeFilterStage | PipelineCountStage);

PipelineDeletedFilterStage:
	name='deleted' '|' next=(PipelineTypeFilterStage | PipelineCountStage);

PipelineTypeFilterStage:
	name='type' type=[ecore::EClassifier] '|' next=PipelineCountStage;

PipelineCountStage:
	name='count';

SatisfactionRule:
	firstRule=Comparison otherRules+=(And | Or)*;

And:
	'and' Comparison;

Or:
	'or' Comparison;

Comparison:
	(v1=[Variable] | n1=INT) c1=('>' | '>=' | '<' | '<=') (v2=[Variable] | n2=INT);

ResolutionStrategy:
	name=('actAndLetRepair' | 'mergeAndPreserve' | 'preferSource' | 'preferTarget' | 'revokeAddition' | 'revokeDeletion');
