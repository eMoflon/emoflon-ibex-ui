/*
 * generated by Xtext 2.20.0
 */
package org.emoflon.ibex.tgg.integrate.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionStrategy
import javax.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IntegrateGenerator extends AbstractGenerator {
		
		@Inject ConflictResolutionStrategyGenerator conflictResolutionStrategyGenerator;
		@Extension IQualifiedNameProvider iQualifiedNameProvider;
		
		override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			fsa.generateFile("Solve.java", '''
				public class Solve implements org.emoflon.ibex.tgg.operational.strategies.integrate.conflicts.resolution.util.ISolver {
					
					@Override
					public void sayHello() {
						System.out.println("Hello from this service!");
				}
			''')
			
			/*val filename = resource.normalizedURI.lastSegment.replace(".integ", ".java")
			
			val crs = resource.allContents
				.filter(ConflictResolutionStrategy)
				.map[crs | conflictResolutionStrategyGenerator.compile(crs)]*/
	}
}
