/*
 * generated by Xtext 2.20.0
 */
package org.emoflon.ibex.tgg.integrate.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.emoflon.ibex.tgg.integrate.integrate.Integrate

import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IntegrateGenerator extends AbstractGenerator {

	@Inject ConflictResolutionStrategyGenerator conflictResolutionStrategyGenerator;
	@Inject ConflictResolutionStrategyContainerGenerator conflictResolutionStrategyContainerGenerator;
	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val integrate = resource.contents.get(0) as Integrate
		
		val packageName =integrate.package.fullyQualifiedName.append(resource.normalizedURI.lastSegment.replace(".integ", ""))
		val crsClassNames = integrate.conflictResolutionStrategies.map [ crs |
			conflictResolutionStrategyGenerator.doGenerate(crs, packageName, fsa)
		]

		conflictResolutionStrategyContainerGenerator.doGenerate(resource, packageName, fsa, crsClassNames)
	}
}
