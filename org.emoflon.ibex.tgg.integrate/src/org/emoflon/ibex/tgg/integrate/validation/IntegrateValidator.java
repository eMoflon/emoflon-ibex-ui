/*
 * generated by Xtext 2.20.0
 */
package org.emoflon.ibex.tgg.integrate.validation;

import java.util.HashSet;

import org.eclipse.xtext.validation.Check;
import org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Integrate;
import org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage;
import org.emoflon.ibex.tgg.integrate.integrate.Resolution;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.internal.ConflictResolutionStrategyRegistry;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class IntegrateValidator extends AbstractIntegrateValidator {

	@Check
	public void checkFallbackStrategyIsProvided(Resolution resolution) {
		ResolutionStrategy strategy = resolution.getStrategy();
		FallbackResolutionStrategy fallback = resolution.getFallback();
		if (strategy != null && strategyNeedsFallback(strategy.getName()) && fallback == null) {
			error("Chosen resolution strategy needs a fallback strategy", strategy,
					IntegratePackage.Literals.RESOLUTION_STRATEGY__NAME);
		}
	}

	private boolean strategyNeedsFallback(String strategyName) {
		return ConflictResolutionStrategyRegistry.RESOLUTION_STRATEGY_NAMES.contains(strategyName);
	}

	@Check
	public void checkFallbackStrategyWillNeverBeExecuted(Resolution resolution) {
		ResolutionStrategy strategy = resolution.getStrategy();
		FallbackResolutionStrategy fallback = resolution.getFallback();
		if (strategy != null && strategyIsFallback(strategy.getName()) && fallback != null) {
			warning("Fallback strategy will never be executed", fallback,
					IntegratePackage.Literals.RESOLUTION_STRATEGY__NAME);
		}
	}

	private boolean strategyIsFallback(String strategyName) {
		return ConflictResolutionStrategyRegistry.FALLBACK_STRATEGY_NAMES.contains(strategyName);
	}

	@Check
	public void checkConflictResolutionStrategiesHaveUniqueName(Integrate integrate) {
		HashSet<String> crsNames = new HashSet<String>();	
		for(ConflictResolutionStrategy crs : integrate.getConflictResolutionStrategies()) {
			if (crsNames.contains(crs.getName())) {
				error("Name of conflict resolution strategies must be unique", crs,IntegratePackage.Literals.CONFLICT_RESOLUTION_STRATEGY__NAME);
			} else {
				crsNames.add(crs.getName());
			}
		}
	}

}
