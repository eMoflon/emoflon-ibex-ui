/*
 * generated by Xtext 2.28.0
 */
package org.emoflon.ibex.tgg.integrate.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IntegrateGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class IntegrateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Integrate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cConflictResolutionSpecificationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConflictResolutionSpecificationsConflictResolutionSpecificationParserRuleCall_2_0 = (RuleCall)cConflictResolutionSpecificationsAssignment_2.eContents().get(0);
		
		//Integrate:
		//    package=Package?
		//    imports+=Import
		//    conflictResolutionSpecifications+=ConflictResolutionSpecification*;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package?
		//imports+=Import
		//conflictResolutionSpecifications+=ConflictResolutionSpecification*
		public Group getGroup() { return cGroup; }
		
		//package=Package?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//conflictResolutionSpecifications+=ConflictResolutionSpecification*
		public Assignment getConflictResolutionSpecificationsAssignment_2() { return cConflictResolutionSpecificationsAssignment_2; }
		
		//ConflictResolutionSpecification
		public RuleCall getConflictResolutionSpecificationsConflictResolutionSpecificationParserRuleCall_2_0() { return cConflictResolutionSpecificationsConflictResolutionSpecificationParserRuleCall_2_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Package:
		//    'package' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSchemaSchemaCrossReference_1_0 = (CrossReference)cSchemaAssignment_1.eContents().get(0);
		private final RuleCall cSchemaSchemaIDTerminalRuleCall_1_0_1 = (RuleCall)cSchemaSchemaCrossReference_1_0.eContents().get(1);
		
		//Import:
		//    'import' schema=[tgg::Schema];
		@Override public ParserRule getRule() { return rule; }
		
		//'import' schema=[tgg::Schema]
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//schema=[tgg::Schema]
		public Assignment getSchemaAssignment_1() { return cSchemaAssignment_1; }
		
		//[tgg::Schema]
		public CrossReference getSchemaSchemaCrossReference_1_0() { return cSchemaSchemaCrossReference_1_0; }
		
		//ID
		public RuleCall getSchemaSchemaIDTerminalRuleCall_1_0_1() { return cSchemaSchemaIDTerminalRuleCall_1_0_1; }
	}
	public class ConflictResolutionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ConflictResolutionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSolveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Keyword cSatisfiesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRuleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRuleSatisfactionRuleParserRuleCall_7_0 = (RuleCall)cRuleAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cResolutionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cResolutionResolutionParserRuleCall_11_0 = (RuleCall)cResolutionAssignment_11.eContents().get(0);
		
		//ConflictResolutionSpecification:
		//    name=ID ':' 'solve' '{'
		//        variables+=Variable+
		//        'satisfies' '{'
		//            rule=SatisfactionRule
		//        '}'
		//    '}' 'with' resolution=Resolution;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' 'solve' '{'
		//    variables+=Variable+
		//    'satisfies' '{'
		//        rule=SatisfactionRule
		//    '}'
		//'}' 'with' resolution=Resolution
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'solve'
		public Keyword getSolveKeyword_2() { return cSolveKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//variables+=Variable+
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_4_0() { return cVariablesVariableParserRuleCall_4_0; }
		
		//'satisfies'
		public Keyword getSatisfiesKeyword_5() { return cSatisfiesKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//rule=SatisfactionRule
		public Assignment getRuleAssignment_7() { return cRuleAssignment_7; }
		
		//SatisfactionRule
		public RuleCall getRuleSatisfactionRuleParserRuleCall_7_0() { return cRuleSatisfactionRuleParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'with'
		public Keyword getWithKeyword_10() { return cWithKeyword_10; }
		
		//resolution=Resolution
		public Assignment getResolutionAssignment_11() { return cResolutionAssignment_11; }
		
		//Resolution
		public RuleCall getResolutionResolutionParserRuleCall_11_0() { return cResolutionResolutionParserRuleCall_11_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPipelineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPipelinePipelineParserRuleCall_3_0 = (RuleCall)cPipelineAssignment_3.eContents().get(0);
		
		//Variable:
		//    'var' name=ID '=' pipeline=Pipeline;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' pipeline=Pipeline
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//pipeline=Pipeline
		public Assignment getPipelineAssignment_3() { return cPipelineAssignment_3; }
		
		//Pipeline
		public RuleCall getPipelinePipelineParserRuleCall_3_0() { return cPipelinePipelineParserRuleCall_3_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.VariableReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_0_1 = (RuleCall)cRefVariableCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//    ref=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Variable]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Variable]
		public CrossReference getRefVariableCrossReference_0() { return cRefVariableCrossReference_0; }
		
		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_0_1() { return cRefVariableIDTerminalRuleCall_0_1; }
	}
	public class PipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Pipeline");
		private final Assignment cStartAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStartPipelineStageStartParserRuleCall_0 = (RuleCall)cStartAssignment.eContents().get(0);
		
		//    //////////////
		//// Pipeline //
		////////////////
		//Pipeline:
		//    start=PipelineStageStart;
		@Override public ParserRule getRule() { return rule; }
		
		//start=PipelineStageStart
		public Assignment getStartAssignment() { return cStartAssignment; }
		
		//PipelineStageStart
		public RuleCall getStartPipelineStageStartParserRuleCall_0() { return cStartPipelineStageStartParserRuleCall_0; }
	}
	public class PipelineStageStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageStart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPipelineStageSrcParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPipelineStageTrgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PipelineStageStart:
		//    PipelineStageSrc | PipelineStageTrg;
		@Override public ParserRule getRule() { return rule; }
		
		//PipelineStageSrc | PipelineStageTrg
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PipelineStageSrc
		public RuleCall getPipelineStageSrcParserRuleCall_0() { return cPipelineStageSrcParserRuleCall_0; }
		
		//PipelineStageTrg
		public RuleCall getPipelineStageTrgParserRuleCall_1() { return cPipelineStageTrgParserRuleCall_1; }
	}
	public class PipelineStageSrcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageSrc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSrcKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNextAlternatives_2_0 = (Alternatives)cNextAssignment_2.eContents().get(0);
		private final RuleCall cNextPipelineStageFilterParserRuleCall_2_0_0 = (RuleCall)cNextAlternatives_2_0.eContents().get(0);
		private final RuleCall cNextPipelineStageEndParserRuleCall_2_0_1 = (RuleCall)cNextAlternatives_2_0.eContents().get(1);
		
		//PipelineStageSrc:
		//    name='src' '|' next=(PipelineStageFilter | PipelineStageEnd);
		@Override public ParserRule getRule() { return rule; }
		
		//name='src' '|' next=(PipelineStageFilter | PipelineStageEnd)
		public Group getGroup() { return cGroup; }
		
		//name='src'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'src'
		public Keyword getNameSrcKeyword_0_0() { return cNameSrcKeyword_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//next=(PipelineStageFilter | PipelineStageEnd)
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }
		
		//(PipelineStageFilter | PipelineStageEnd)
		public Alternatives getNextAlternatives_2_0() { return cNextAlternatives_2_0; }
		
		//PipelineStageFilter
		public RuleCall getNextPipelineStageFilterParserRuleCall_2_0_0() { return cNextPipelineStageFilterParserRuleCall_2_0_0; }
		
		//PipelineStageEnd
		public RuleCall getNextPipelineStageEndParserRuleCall_2_0_1() { return cNextPipelineStageEndParserRuleCall_2_0_1; }
	}
	public class PipelineStageTrgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageTrg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTrgKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNextAlternatives_2_0 = (Alternatives)cNextAssignment_2.eContents().get(0);
		private final RuleCall cNextPipelineStageFilterParserRuleCall_2_0_0 = (RuleCall)cNextAlternatives_2_0.eContents().get(0);
		private final RuleCall cNextPipelineStageEndParserRuleCall_2_0_1 = (RuleCall)cNextAlternatives_2_0.eContents().get(1);
		
		//PipelineStageTrg:
		//    name='trg' '|' next=(PipelineStageFilter | PipelineStageEnd);
		@Override public ParserRule getRule() { return rule; }
		
		//name='trg' '|' next=(PipelineStageFilter | PipelineStageEnd)
		public Group getGroup() { return cGroup; }
		
		//name='trg'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'trg'
		public Keyword getNameTrgKeyword_0_0() { return cNameTrgKeyword_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//next=(PipelineStageFilter | PipelineStageEnd)
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }
		
		//(PipelineStageFilter | PipelineStageEnd)
		public Alternatives getNextAlternatives_2_0() { return cNextAlternatives_2_0; }
		
		//PipelineStageFilter
		public RuleCall getNextPipelineStageFilterParserRuleCall_2_0_0() { return cNextPipelineStageFilterParserRuleCall_2_0_0; }
		
		//PipelineStageEnd
		public RuleCall getNextPipelineStageEndParserRuleCall_2_0_1() { return cNextPipelineStageEndParserRuleCall_2_0_1; }
	}
	public class PipelineStageFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPipelineStageModificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPipelineStageTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PipelineStageFilter:
		//    PipelineStageModification | PipelineStageType;
		@Override public ParserRule getRule() { return rule; }
		
		//PipelineStageModification | PipelineStageType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PipelineStageModification
		public RuleCall getPipelineStageModificationParserRuleCall_0() { return cPipelineStageModificationParserRuleCall_0; }
		
		//PipelineStageType
		public RuleCall getPipelineStageTypeParserRuleCall_1() { return cPipelineStageTypeParserRuleCall_1; }
	}
	public class PipelineStageModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageModification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPipelineStageCreatedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPipelineStageDeletedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PipelineStageModification:
		//    PipelineStageCreated | PipelineStageDeleted;
		@Override public ParserRule getRule() { return rule; }
		
		//PipelineStageCreated | PipelineStageDeleted
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PipelineStageCreated
		public RuleCall getPipelineStageCreatedParserRuleCall_0() { return cPipelineStageCreatedParserRuleCall_0; }
		
		//PipelineStageDeleted
		public RuleCall getPipelineStageDeletedParserRuleCall_1() { return cPipelineStageDeletedParserRuleCall_1; }
	}
	public class PipelineStageCreatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageCreated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCreatedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNextAlternatives_2_0 = (Alternatives)cNextAssignment_2.eContents().get(0);
		private final RuleCall cNextPipelineStageTypeParserRuleCall_2_0_0 = (RuleCall)cNextAlternatives_2_0.eContents().get(0);
		private final RuleCall cNextPipelineStageEndParserRuleCall_2_0_1 = (RuleCall)cNextAlternatives_2_0.eContents().get(1);
		
		//PipelineStageCreated:
		//    name='created' '|' next=(PipelineStageType | PipelineStageEnd);
		@Override public ParserRule getRule() { return rule; }
		
		//name='created' '|' next=(PipelineStageType | PipelineStageEnd)
		public Group getGroup() { return cGroup; }
		
		//name='created'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'created'
		public Keyword getNameCreatedKeyword_0_0() { return cNameCreatedKeyword_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//next=(PipelineStageType | PipelineStageEnd)
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }
		
		//(PipelineStageType | PipelineStageEnd)
		public Alternatives getNextAlternatives_2_0() { return cNextAlternatives_2_0; }
		
		//PipelineStageType
		public RuleCall getNextPipelineStageTypeParserRuleCall_2_0_0() { return cNextPipelineStageTypeParserRuleCall_2_0_0; }
		
		//PipelineStageEnd
		public RuleCall getNextPipelineStageEndParserRuleCall_2_0_1() { return cNextPipelineStageEndParserRuleCall_2_0_1; }
	}
	public class PipelineStageDeletedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageDeleted");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDeletedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNextAlternatives_2_0 = (Alternatives)cNextAssignment_2.eContents().get(0);
		private final RuleCall cNextPipelineStageTypeParserRuleCall_2_0_0 = (RuleCall)cNextAlternatives_2_0.eContents().get(0);
		private final RuleCall cNextPipelineStageEndParserRuleCall_2_0_1 = (RuleCall)cNextAlternatives_2_0.eContents().get(1);
		
		//PipelineStageDeleted:
		//    name='deleted' '|' next=(PipelineStageType | PipelineStageEnd);
		@Override public ParserRule getRule() { return rule; }
		
		//name='deleted' '|' next=(PipelineStageType | PipelineStageEnd)
		public Group getGroup() { return cGroup; }
		
		//name='deleted'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'deleted'
		public Keyword getNameDeletedKeyword_0_0() { return cNameDeletedKeyword_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//next=(PipelineStageType | PipelineStageEnd)
		public Assignment getNextAssignment_2() { return cNextAssignment_2; }
		
		//(PipelineStageType | PipelineStageEnd)
		public Alternatives getNextAlternatives_2_0() { return cNextAlternatives_2_0; }
		
		//PipelineStageType
		public RuleCall getNextPipelineStageTypeParserRuleCall_2_0_0() { return cNextPipelineStageTypeParserRuleCall_2_0_0; }
		
		//PipelineStageEnd
		public RuleCall getNextPipelineStageEndParserRuleCall_2_0_1() { return cNextPipelineStageEndParserRuleCall_2_0_1; }
	}
	public class PipelineStageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypesEClassCrossReference_1_0 = (CrossReference)cTypesAssignment_1.eContents().get(0);
		private final RuleCall cTypesEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypesEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypesEClassCrossReference_2_1_0 = (CrossReference)cTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cTypesEClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTypesEClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNextPipelineStageEndParserRuleCall_4_0 = (RuleCall)cNextAssignment_4.eContents().get(0);
		
		//PipelineStageType:
		//    name='type' types+=([ecore::EClass]) (',' types+=[ecore::EClass])* '|' next=PipelineStageEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//name='type' types+=([ecore::EClass]) (',' types+=[ecore::EClass])* '|' next=PipelineStageEnd
		public Group getGroup() { return cGroup; }
		
		//name='type'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'type'
		public Keyword getNameTypeKeyword_0_0() { return cNameTypeKeyword_0_0; }
		
		//types+=([ecore::EClass])
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//([ecore::EClass])
		public CrossReference getTypesEClassCrossReference_1_0() { return cTypesEClassCrossReference_1_0; }
		
		//ID
		public RuleCall getTypesEClassIDTerminalRuleCall_1_0_1() { return cTypesEClassIDTerminalRuleCall_1_0_1; }
		
		//(',' types+=[ecore::EClass])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=[ecore::EClass]
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//[ecore::EClass]
		public CrossReference getTypesEClassCrossReference_2_1_0() { return cTypesEClassCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTypesEClassIDTerminalRuleCall_2_1_0_1() { return cTypesEClassIDTerminalRuleCall_2_1_0_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//next=PipelineStageEnd
		public Assignment getNextAssignment_4() { return cNextAssignment_4; }
		
		//PipelineStageEnd
		public RuleCall getNextPipelineStageEndParserRuleCall_4_0() { return cNextPipelineStageEndParserRuleCall_4_0; }
	}
	public class PipelineStageEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPipelineStageCountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPipelineStageExistsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PipelineStageEnd:
		//    PipelineStageCount | PipelineStageExists;
		@Override public ParserRule getRule() { return rule; }
		
		//PipelineStageCount | PipelineStageExists
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PipelineStageCount
		public RuleCall getPipelineStageCountParserRuleCall_0() { return cPipelineStageCountParserRuleCall_0; }
		
		//PipelineStageExists
		public RuleCall getPipelineStageExistsParserRuleCall_1() { return cPipelineStageExistsParserRuleCall_1; }
	}
	public class PipelineStageCountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageCount");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameCountKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//PipelineStageCount:
		//    name='count';
		@Override public ParserRule getRule() { return rule; }
		
		//name='count'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'count'
		public Keyword getNameCountKeyword_0() { return cNameCountKeyword_0; }
	}
	public class PipelineStageExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PipelineStageExists");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameExistsKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//PipelineStageExists:
		//    name='exists';
		@Override public ParserRule getRule() { return rule; }
		
		//name='exists'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'exists'
		public Keyword getNameExistsKeyword_0() { return cNameExistsKeyword_0; }
	}
	public class SatisfactionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.SatisfactionRule");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionOrExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//    ///////////////////////
		//// Satisfaction Rule //
		/////////////////////////
		//SatisfactionRule:
		//    expression=OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=OrExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_0() { return cExpressionOrExpressionParserRuleCall_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//    AndExpression ({OrExpression.left=current} 'or' right+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'or' right+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right+=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//    BooleanExpression ({AndExpression.left=current} 'and' right+=BooleanExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpression ({AndExpression.left=current} 'and' right+=BooleanExpression)*
		public Group getGroup() { return cGroup; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} 'and' right+=BooleanExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right+=BooleanExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BooleanExpression
		public RuleCall getRightBooleanExpressionParserRuleCall_1_2_0() { return cRightBooleanExpressionParserRuleCall_1_2_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInvertAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInvertNotKeyword_0_0 = (Keyword)cInvertAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cExpressionAlternatives_1_0 = (Alternatives)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cExpressionComparisonExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(0);
		private final RuleCall cExpressionVariableReferenceParserRuleCall_1_0_1 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(1);
		private final RuleCall cExpressionWrappedOrExpressionParserRuleCall_1_0_2 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(2);
		
		//BooleanExpression:
		//    (invert?='not')? expression=(ComparisonExpression | VariableReference | WrappedOrExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//(invert?='not')? expression=(ComparisonExpression | VariableReference | WrappedOrExpression)
		public Group getGroup() { return cGroup; }
		
		//(invert?='not')?
		public Assignment getInvertAssignment_0() { return cInvertAssignment_0; }
		
		//'not'
		public Keyword getInvertNotKeyword_0_0() { return cInvertNotKeyword_0_0; }
		
		//expression=(ComparisonExpression | VariableReference | WrappedOrExpression)
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//(ComparisonExpression | VariableReference | WrappedOrExpression)
		public Alternatives getExpressionAlternatives_1_0() { return cExpressionAlternatives_1_0; }
		
		//ComparisonExpression
		public RuleCall getExpressionComparisonExpressionParserRuleCall_1_0_0() { return cExpressionComparisonExpressionParserRuleCall_1_0_0; }
		
		//VariableReference
		public RuleCall getExpressionVariableReferenceParserRuleCall_1_0_1() { return cExpressionVariableReferenceParserRuleCall_1_0_1; }
		
		//WrappedOrExpression
		public RuleCall getExpressionWrappedOrExpressionParserRuleCall_1_0_2() { return cExpressionWrappedOrExpressionParserRuleCall_1_0_2; }
	}
	public class WrappedOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.WrappedOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionOrExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WrappedOrExpression:
		//    '(' expression=OrExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' expression=OrExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expression=OrExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_1_0() { return cExpressionOrExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsComparisonParameterParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsComparisonParameterParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//ComparisonExpression:
		//    lhs=ComparisonParameter op=('>' | '>=' | '<' | '<=' | '==' | '!=') rhs=ComparisonParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=ComparisonParameter op=('>' | '>=' | '<' | '<=' | '==' | '!=') rhs=ComparisonParameter
		public Group getGroup() { return cGroup; }
		
		//lhs=ComparisonParameter
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//ComparisonParameter
		public RuleCall getLhsComparisonParameterParserRuleCall_0_0() { return cLhsComparisonParameterParserRuleCall_0_0; }
		
		//op=('>' | '>=' | '<' | '<=' | '==' | '!=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('>' | '>=' | '<' | '<=' | '==' | '!=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_0() { return cOpGreaterThanSignKeyword_1_0_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_2() { return cOpLessThanSignKeyword_1_0_2; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_3; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_4() { return cOpEqualsSignEqualsSignKeyword_1_0_4; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_0_5; }
		
		//rhs=ComparisonParameter
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//ComparisonParameter
		public RuleCall getRhsComparisonParameterParserRuleCall_2_0() { return cRhsComparisonParameterParserRuleCall_2_0; }
	}
	public class ComparisonParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ComparisonParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComparisonParameter:
		//    VariableReference | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableReference | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.LiteralValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.Resolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrategiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_0_0 = (RuleCall)cStrategiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStrategiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_1_1_0 = (RuleCall)cStrategiesAssignment_1_1.eContents().get(0);
		private final Assignment cFallbackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFallbackFallbackResolutionStrategyParserRuleCall_2_0 = (RuleCall)cFallbackAssignment_2.eContents().get(0);
		
		//    ////////////////
		//// Resolution //
		//////////////////
		//Resolution:
		//    strategies+=ResolutionStrategyWithOperationalDelta ('or' strategies+=ResolutionStrategyWithOperationalDelta)*
		//    fallback=FallbackResolutionStrategy?;
		@Override public ParserRule getRule() { return rule; }
		
		//strategies+=ResolutionStrategyWithOperationalDelta ('or' strategies+=ResolutionStrategyWithOperationalDelta)*
		//fallback=FallbackResolutionStrategy?
		public Group getGroup() { return cGroup; }
		
		//strategies+=ResolutionStrategyWithOperationalDelta
		public Assignment getStrategiesAssignment_0() { return cStrategiesAssignment_0; }
		
		//ResolutionStrategyWithOperationalDelta
		public RuleCall getStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_0_0() { return cStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_0_0; }
		
		//('or' strategies+=ResolutionStrategyWithOperationalDelta)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//strategies+=ResolutionStrategyWithOperationalDelta
		public Assignment getStrategiesAssignment_1_1() { return cStrategiesAssignment_1_1; }
		
		//ResolutionStrategyWithOperationalDelta
		public RuleCall getStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_1_1_0() { return cStrategiesResolutionStrategyWithOperationalDeltaParserRuleCall_1_1_0; }
		
		//fallback=FallbackResolutionStrategy?
		public Assignment getFallbackAssignment_2() { return cFallbackAssignment_2; }
		
		//FallbackResolutionStrategy
		public RuleCall getFallbackFallbackResolutionStrategyParserRuleCall_2_0() { return cFallbackFallbackResolutionStrategyParserRuleCall_2_0; }
	}
	public class ResolutionStrategyWithOperationalDeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ResolutionStrategyWithOperationalDelta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrategyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStrategyResolutionStrategyParserRuleCall_0_0 = (RuleCall)cStrategyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperationalDeltaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperationalDeltaOperationalDeltaParserRuleCall_1_2_0 = (RuleCall)cOperationalDeltaAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ResolutionStrategyWithOperationalDelta:
		//    strategy=ResolutionStrategy
		//    ('when' '{' operationalDelta=OperationalDelta '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//strategy=ResolutionStrategy
		//('when' '{' operationalDelta=OperationalDelta '}')?
		public Group getGroup() { return cGroup; }
		
		//strategy=ResolutionStrategy
		public Assignment getStrategyAssignment_0() { return cStrategyAssignment_0; }
		
		//ResolutionStrategy
		public RuleCall getStrategyResolutionStrategyParserRuleCall_0_0() { return cStrategyResolutionStrategyParserRuleCall_0_0; }
		
		//('when' '{' operationalDelta=OperationalDelta '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//operationalDelta=OperationalDelta
		public Assignment getOperationalDeltaAssignment_1_2() { return cOperationalDeltaAssignment_1_2; }
		
		//OperationalDelta
		public RuleCall getOperationalDeltaOperationalDeltaParserRuleCall_1_2_0() { return cOperationalDeltaOperationalDeltaParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class ResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ResolutionStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMergeAndPreserveResolutionStrategyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRevokeAdditionResolutionStrategyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRevokeDeletionResolutionStrategyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFallbackResolutionStrategyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ResolutionStrategy:
		//    MergeAndPreserveResolutionStrategy | RevokeAdditionResolutionStrategy | RevokeDeletionResolutionStrategy |
		//    FallbackResolutionStrategy;
		@Override public ParserRule getRule() { return rule; }
		
		//MergeAndPreserveResolutionStrategy | RevokeAdditionResolutionStrategy | RevokeDeletionResolutionStrategy |
		//FallbackResolutionStrategy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MergeAndPreserveResolutionStrategy
		public RuleCall getMergeAndPreserveResolutionStrategyParserRuleCall_0() { return cMergeAndPreserveResolutionStrategyParserRuleCall_0; }
		
		//RevokeAdditionResolutionStrategy
		public RuleCall getRevokeAdditionResolutionStrategyParserRuleCall_1() { return cRevokeAdditionResolutionStrategyParserRuleCall_1; }
		
		//RevokeDeletionResolutionStrategy
		public RuleCall getRevokeDeletionResolutionStrategyParserRuleCall_2() { return cRevokeDeletionResolutionStrategyParserRuleCall_2; }
		
		//FallbackResolutionStrategy
		public RuleCall getFallbackResolutionStrategyParserRuleCall_3() { return cFallbackResolutionStrategyParserRuleCall_3; }
	}
	public class FallbackResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.FallbackResolutionStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreferSourceResolutionStrategyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreferTargetResolutionStrategyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeleteCorrespondencesResolutionStrategyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContinueResolutionStrategyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FallbackResolutionStrategy:
		//    PreferSourceResolutionStrategy | PreferTargetResolutionStrategy | DeleteCorrespondencesResolutionStrategy |
		//    ContinueResolutionStrategy;
		@Override public ParserRule getRule() { return rule; }
		
		//PreferSourceResolutionStrategy | PreferTargetResolutionStrategy | DeleteCorrespondencesResolutionStrategy |
		//ContinueResolutionStrategy
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PreferSourceResolutionStrategy
		public RuleCall getPreferSourceResolutionStrategyParserRuleCall_0() { return cPreferSourceResolutionStrategyParserRuleCall_0; }
		
		//PreferTargetResolutionStrategy
		public RuleCall getPreferTargetResolutionStrategyParserRuleCall_1() { return cPreferTargetResolutionStrategyParserRuleCall_1; }
		
		//DeleteCorrespondencesResolutionStrategy
		public RuleCall getDeleteCorrespondencesResolutionStrategyParserRuleCall_2() { return cDeleteCorrespondencesResolutionStrategyParserRuleCall_2; }
		
		//ContinueResolutionStrategy
		public RuleCall getContinueResolutionStrategyParserRuleCall_3() { return cContinueResolutionStrategyParserRuleCall_3; }
	}
	public class MergeAndPreserveResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.MergeAndPreserveResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameMergeAndPreserveKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//MergeAndPreserveResolutionStrategy:
		//    name='mergeAndPreserve';
		@Override public ParserRule getRule() { return rule; }
		
		//name='mergeAndPreserve'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'mergeAndPreserve'
		public Keyword getNameMergeAndPreserveKeyword_0() { return cNameMergeAndPreserveKeyword_0; }
	}
	public class RevokeAdditionResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.RevokeAdditionResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRevokeAdditionKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//RevokeAdditionResolutionStrategy:
		//    name='revokeAddition';
		@Override public ParserRule getRule() { return rule; }
		
		//name='revokeAddition'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'revokeAddition'
		public Keyword getNameRevokeAdditionKeyword_0() { return cNameRevokeAdditionKeyword_0; }
	}
	public class RevokeDeletionResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.RevokeDeletionResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRevokeDeletionKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//RevokeDeletionResolutionStrategy:
		//    name='revokeDeletion';
		@Override public ParserRule getRule() { return rule; }
		
		//name='revokeDeletion'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'revokeDeletion'
		public Keyword getNameRevokeDeletionKeyword_0() { return cNameRevokeDeletionKeyword_0; }
	}
	public class PreferSourceResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PreferSourceResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNamePreferSourceKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//PreferSourceResolutionStrategy:
		//    name='preferSource';
		@Override public ParserRule getRule() { return rule; }
		
		//name='preferSource'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'preferSource'
		public Keyword getNamePreferSourceKeyword_0() { return cNamePreferSourceKeyword_0; }
	}
	public class PreferTargetResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.PreferTargetResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNamePreferTargetKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//PreferTargetResolutionStrategy:
		//    name='preferTarget';
		@Override public ParserRule getRule() { return rule; }
		
		//name='preferTarget'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'preferTarget'
		public Keyword getNamePreferTargetKeyword_0() { return cNamePreferTargetKeyword_0; }
	}
	public class DeleteCorrespondencesResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.DeleteCorrespondencesResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameDeleteCorrespondencesKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//DeleteCorrespondencesResolutionStrategy:
		//    name='deleteCorrespondences';
		@Override public ParserRule getRule() { return rule; }
		
		//name='deleteCorrespondences'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'deleteCorrespondences'
		public Keyword getNameDeleteCorrespondencesKeyword_0() { return cNameDeleteCorrespondencesKeyword_0; }
	}
	public class ContinueResolutionStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.ContinueResolutionStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameContinueKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//ContinueResolutionStrategy:
		//    name='continue';
		@Override public ParserRule getRule() { return rule; }
		
		//name='continue'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'continue'
		public Keyword getNameContinueKeyword_0() { return cNameContinueKeyword_0; }
	}
	public class OperationalDeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.integrate.Integrate.OperationalDelta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Keyword cSatisfiesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleSatisfactionRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//    ///////////////////////
		//// Operational Delta //
		/////////////////////////
		//OperationalDelta:
		//    variables+=Variable+
		//    'satisfies' '{'
		//    rule=SatisfactionRule
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=Variable+
		//'satisfies' '{'
		//rule=SatisfactionRule
		//'}'
		public Group getGroup() { return cGroup; }
		
		//variables+=Variable+
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0_0() { return cVariablesVariableParserRuleCall_0_0; }
		
		//'satisfies'
		public Keyword getSatisfiesKeyword_1() { return cSatisfiesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rule=SatisfactionRule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//SatisfactionRule
		public RuleCall getRuleSatisfactionRuleParserRuleCall_3_0() { return cRuleSatisfactionRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final IntegrateElements pIntegrate;
	private final PackageElements pPackage;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final ConflictResolutionSpecificationElements pConflictResolutionSpecification;
	private final VariableElements pVariable;
	private final VariableReferenceElements pVariableReference;
	private final PipelineElements pPipeline;
	private final PipelineStageStartElements pPipelineStageStart;
	private final PipelineStageSrcElements pPipelineStageSrc;
	private final PipelineStageTrgElements pPipelineStageTrg;
	private final PipelineStageFilterElements pPipelineStageFilter;
	private final PipelineStageModificationElements pPipelineStageModification;
	private final PipelineStageCreatedElements pPipelineStageCreated;
	private final PipelineStageDeletedElements pPipelineStageDeleted;
	private final PipelineStageTypeElements pPipelineStageType;
	private final PipelineStageEndElements pPipelineStageEnd;
	private final PipelineStageCountElements pPipelineStageCount;
	private final PipelineStageExistsElements pPipelineStageExists;
	private final SatisfactionRuleElements pSatisfactionRule;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final WrappedOrExpressionElements pWrappedOrExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonParameterElements pComparisonParameter;
	private final LiteralValueElements pLiteralValue;
	private final ResolutionElements pResolution;
	private final ResolutionStrategyWithOperationalDeltaElements pResolutionStrategyWithOperationalDelta;
	private final ResolutionStrategyElements pResolutionStrategy;
	private final FallbackResolutionStrategyElements pFallbackResolutionStrategy;
	private final MergeAndPreserveResolutionStrategyElements pMergeAndPreserveResolutionStrategy;
	private final RevokeAdditionResolutionStrategyElements pRevokeAdditionResolutionStrategy;
	private final RevokeDeletionResolutionStrategyElements pRevokeDeletionResolutionStrategy;
	private final PreferSourceResolutionStrategyElements pPreferSourceResolutionStrategy;
	private final PreferTargetResolutionStrategyElements pPreferTargetResolutionStrategy;
	private final DeleteCorrespondencesResolutionStrategyElements pDeleteCorrespondencesResolutionStrategy;
	private final ContinueResolutionStrategyElements pContinueResolutionStrategy;
	private final OperationalDeltaElements pOperationalDelta;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IntegrateGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIntegrate = new IntegrateElements();
		this.pPackage = new PackageElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pConflictResolutionSpecification = new ConflictResolutionSpecificationElements();
		this.pVariable = new VariableElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pPipeline = new PipelineElements();
		this.pPipelineStageStart = new PipelineStageStartElements();
		this.pPipelineStageSrc = new PipelineStageSrcElements();
		this.pPipelineStageTrg = new PipelineStageTrgElements();
		this.pPipelineStageFilter = new PipelineStageFilterElements();
		this.pPipelineStageModification = new PipelineStageModificationElements();
		this.pPipelineStageCreated = new PipelineStageCreatedElements();
		this.pPipelineStageDeleted = new PipelineStageDeletedElements();
		this.pPipelineStageType = new PipelineStageTypeElements();
		this.pPipelineStageEnd = new PipelineStageEndElements();
		this.pPipelineStageCount = new PipelineStageCountElements();
		this.pPipelineStageExists = new PipelineStageExistsElements();
		this.pSatisfactionRule = new SatisfactionRuleElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pWrappedOrExpression = new WrappedOrExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pComparisonParameter = new ComparisonParameterElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pResolution = new ResolutionElements();
		this.pResolutionStrategyWithOperationalDelta = new ResolutionStrategyWithOperationalDeltaElements();
		this.pResolutionStrategy = new ResolutionStrategyElements();
		this.pFallbackResolutionStrategy = new FallbackResolutionStrategyElements();
		this.pMergeAndPreserveResolutionStrategy = new MergeAndPreserveResolutionStrategyElements();
		this.pRevokeAdditionResolutionStrategy = new RevokeAdditionResolutionStrategyElements();
		this.pRevokeDeletionResolutionStrategy = new RevokeDeletionResolutionStrategyElements();
		this.pPreferSourceResolutionStrategy = new PreferSourceResolutionStrategyElements();
		this.pPreferTargetResolutionStrategy = new PreferTargetResolutionStrategyElements();
		this.pDeleteCorrespondencesResolutionStrategy = new DeleteCorrespondencesResolutionStrategyElements();
		this.pContinueResolutionStrategy = new ContinueResolutionStrategyElements();
		this.pOperationalDelta = new OperationalDeltaElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.emoflon.ibex.tgg.integrate.Integrate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Integrate:
	//    package=Package?
	//    imports+=Import
	//    conflictResolutionSpecifications+=ConflictResolutionSpecification*;
	public IntegrateElements getIntegrateAccess() {
		return pIntegrate;
	}
	
	public ParserRule getIntegrateRule() {
		return getIntegrateAccess().getRule();
	}
	
	//Package:
	//    'package' name=QualifiedName;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//    'import' schema=[tgg::Schema];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ConflictResolutionSpecification:
	//    name=ID ':' 'solve' '{'
	//        variables+=Variable+
	//        'satisfies' '{'
	//            rule=SatisfactionRule
	//        '}'
	//    '}' 'with' resolution=Resolution;
	public ConflictResolutionSpecificationElements getConflictResolutionSpecificationAccess() {
		return pConflictResolutionSpecification;
	}
	
	public ParserRule getConflictResolutionSpecificationRule() {
		return getConflictResolutionSpecificationAccess().getRule();
	}
	
	//Variable:
	//    'var' name=ID '=' pipeline=Pipeline;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableReference:
	//    ref=[Variable];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//    //////////////
	//// Pipeline //
	////////////////
	//Pipeline:
	//    start=PipelineStageStart;
	public PipelineElements getPipelineAccess() {
		return pPipeline;
	}
	
	public ParserRule getPipelineRule() {
		return getPipelineAccess().getRule();
	}
	
	//PipelineStageStart:
	//    PipelineStageSrc | PipelineStageTrg;
	public PipelineStageStartElements getPipelineStageStartAccess() {
		return pPipelineStageStart;
	}
	
	public ParserRule getPipelineStageStartRule() {
		return getPipelineStageStartAccess().getRule();
	}
	
	//PipelineStageSrc:
	//    name='src' '|' next=(PipelineStageFilter | PipelineStageEnd);
	public PipelineStageSrcElements getPipelineStageSrcAccess() {
		return pPipelineStageSrc;
	}
	
	public ParserRule getPipelineStageSrcRule() {
		return getPipelineStageSrcAccess().getRule();
	}
	
	//PipelineStageTrg:
	//    name='trg' '|' next=(PipelineStageFilter | PipelineStageEnd);
	public PipelineStageTrgElements getPipelineStageTrgAccess() {
		return pPipelineStageTrg;
	}
	
	public ParserRule getPipelineStageTrgRule() {
		return getPipelineStageTrgAccess().getRule();
	}
	
	//PipelineStageFilter:
	//    PipelineStageModification | PipelineStageType;
	public PipelineStageFilterElements getPipelineStageFilterAccess() {
		return pPipelineStageFilter;
	}
	
	public ParserRule getPipelineStageFilterRule() {
		return getPipelineStageFilterAccess().getRule();
	}
	
	//PipelineStageModification:
	//    PipelineStageCreated | PipelineStageDeleted;
	public PipelineStageModificationElements getPipelineStageModificationAccess() {
		return pPipelineStageModification;
	}
	
	public ParserRule getPipelineStageModificationRule() {
		return getPipelineStageModificationAccess().getRule();
	}
	
	//PipelineStageCreated:
	//    name='created' '|' next=(PipelineStageType | PipelineStageEnd);
	public PipelineStageCreatedElements getPipelineStageCreatedAccess() {
		return pPipelineStageCreated;
	}
	
	public ParserRule getPipelineStageCreatedRule() {
		return getPipelineStageCreatedAccess().getRule();
	}
	
	//PipelineStageDeleted:
	//    name='deleted' '|' next=(PipelineStageType | PipelineStageEnd);
	public PipelineStageDeletedElements getPipelineStageDeletedAccess() {
		return pPipelineStageDeleted;
	}
	
	public ParserRule getPipelineStageDeletedRule() {
		return getPipelineStageDeletedAccess().getRule();
	}
	
	//PipelineStageType:
	//    name='type' types+=([ecore::EClass]) (',' types+=[ecore::EClass])* '|' next=PipelineStageEnd;
	public PipelineStageTypeElements getPipelineStageTypeAccess() {
		return pPipelineStageType;
	}
	
	public ParserRule getPipelineStageTypeRule() {
		return getPipelineStageTypeAccess().getRule();
	}
	
	//PipelineStageEnd:
	//    PipelineStageCount | PipelineStageExists;
	public PipelineStageEndElements getPipelineStageEndAccess() {
		return pPipelineStageEnd;
	}
	
	public ParserRule getPipelineStageEndRule() {
		return getPipelineStageEndAccess().getRule();
	}
	
	//PipelineStageCount:
	//    name='count';
	public PipelineStageCountElements getPipelineStageCountAccess() {
		return pPipelineStageCount;
	}
	
	public ParserRule getPipelineStageCountRule() {
		return getPipelineStageCountAccess().getRule();
	}
	
	//PipelineStageExists:
	//    name='exists';
	public PipelineStageExistsElements getPipelineStageExistsAccess() {
		return pPipelineStageExists;
	}
	
	public ParserRule getPipelineStageExistsRule() {
		return getPipelineStageExistsAccess().getRule();
	}
	
	//    ///////////////////////
	//// Satisfaction Rule //
	/////////////////////////
	//SatisfactionRule:
	//    expression=OrExpression;
	public SatisfactionRuleElements getSatisfactionRuleAccess() {
		return pSatisfactionRule;
	}
	
	public ParserRule getSatisfactionRuleRule() {
		return getSatisfactionRuleAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    AndExpression ({OrExpression.left=current} 'or' right+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    BooleanExpression ({AndExpression.left=current} 'and' right+=BooleanExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//    (invert?='not')? expression=(ComparisonExpression | VariableReference | WrappedOrExpression);
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//WrappedOrExpression:
	//    '(' expression=OrExpression ')';
	public WrappedOrExpressionElements getWrappedOrExpressionAccess() {
		return pWrappedOrExpression;
	}
	
	public ParserRule getWrappedOrExpressionRule() {
		return getWrappedOrExpressionAccess().getRule();
	}
	
	//ComparisonExpression:
	//    lhs=ComparisonParameter op=('>' | '>=' | '<' | '<=' | '==' | '!=') rhs=ComparisonParameter;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ComparisonParameter:
	//    VariableReference | LiteralValue;
	public ComparisonParameterElements getComparisonParameterAccess() {
		return pComparisonParameter;
	}
	
	public ParserRule getComparisonParameterRule() {
		return getComparisonParameterAccess().getRule();
	}
	
	//LiteralValue:
	//    value=INT;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//    ////////////////
	//// Resolution //
	//////////////////
	//Resolution:
	//    strategies+=ResolutionStrategyWithOperationalDelta ('or' strategies+=ResolutionStrategyWithOperationalDelta)*
	//    fallback=FallbackResolutionStrategy?;
	public ResolutionElements getResolutionAccess() {
		return pResolution;
	}
	
	public ParserRule getResolutionRule() {
		return getResolutionAccess().getRule();
	}
	
	//ResolutionStrategyWithOperationalDelta:
	//    strategy=ResolutionStrategy
	//    ('when' '{' operationalDelta=OperationalDelta '}')?;
	public ResolutionStrategyWithOperationalDeltaElements getResolutionStrategyWithOperationalDeltaAccess() {
		return pResolutionStrategyWithOperationalDelta;
	}
	
	public ParserRule getResolutionStrategyWithOperationalDeltaRule() {
		return getResolutionStrategyWithOperationalDeltaAccess().getRule();
	}
	
	//ResolutionStrategy:
	//    MergeAndPreserveResolutionStrategy | RevokeAdditionResolutionStrategy | RevokeDeletionResolutionStrategy |
	//    FallbackResolutionStrategy;
	public ResolutionStrategyElements getResolutionStrategyAccess() {
		return pResolutionStrategy;
	}
	
	public ParserRule getResolutionStrategyRule() {
		return getResolutionStrategyAccess().getRule();
	}
	
	//FallbackResolutionStrategy:
	//    PreferSourceResolutionStrategy | PreferTargetResolutionStrategy | DeleteCorrespondencesResolutionStrategy |
	//    ContinueResolutionStrategy;
	public FallbackResolutionStrategyElements getFallbackResolutionStrategyAccess() {
		return pFallbackResolutionStrategy;
	}
	
	public ParserRule getFallbackResolutionStrategyRule() {
		return getFallbackResolutionStrategyAccess().getRule();
	}
	
	//MergeAndPreserveResolutionStrategy:
	//    name='mergeAndPreserve';
	public MergeAndPreserveResolutionStrategyElements getMergeAndPreserveResolutionStrategyAccess() {
		return pMergeAndPreserveResolutionStrategy;
	}
	
	public ParserRule getMergeAndPreserveResolutionStrategyRule() {
		return getMergeAndPreserveResolutionStrategyAccess().getRule();
	}
	
	//RevokeAdditionResolutionStrategy:
	//    name='revokeAddition';
	public RevokeAdditionResolutionStrategyElements getRevokeAdditionResolutionStrategyAccess() {
		return pRevokeAdditionResolutionStrategy;
	}
	
	public ParserRule getRevokeAdditionResolutionStrategyRule() {
		return getRevokeAdditionResolutionStrategyAccess().getRule();
	}
	
	//RevokeDeletionResolutionStrategy:
	//    name='revokeDeletion';
	public RevokeDeletionResolutionStrategyElements getRevokeDeletionResolutionStrategyAccess() {
		return pRevokeDeletionResolutionStrategy;
	}
	
	public ParserRule getRevokeDeletionResolutionStrategyRule() {
		return getRevokeDeletionResolutionStrategyAccess().getRule();
	}
	
	//PreferSourceResolutionStrategy:
	//    name='preferSource';
	public PreferSourceResolutionStrategyElements getPreferSourceResolutionStrategyAccess() {
		return pPreferSourceResolutionStrategy;
	}
	
	public ParserRule getPreferSourceResolutionStrategyRule() {
		return getPreferSourceResolutionStrategyAccess().getRule();
	}
	
	//PreferTargetResolutionStrategy:
	//    name='preferTarget';
	public PreferTargetResolutionStrategyElements getPreferTargetResolutionStrategyAccess() {
		return pPreferTargetResolutionStrategy;
	}
	
	public ParserRule getPreferTargetResolutionStrategyRule() {
		return getPreferTargetResolutionStrategyAccess().getRule();
	}
	
	//DeleteCorrespondencesResolutionStrategy:
	//    name='deleteCorrespondences';
	public DeleteCorrespondencesResolutionStrategyElements getDeleteCorrespondencesResolutionStrategyAccess() {
		return pDeleteCorrespondencesResolutionStrategy;
	}
	
	public ParserRule getDeleteCorrespondencesResolutionStrategyRule() {
		return getDeleteCorrespondencesResolutionStrategyAccess().getRule();
	}
	
	//ContinueResolutionStrategy:
	//    name='continue';
	public ContinueResolutionStrategyElements getContinueResolutionStrategyAccess() {
		return pContinueResolutionStrategy;
	}
	
	public ParserRule getContinueResolutionStrategyRule() {
		return getContinueResolutionStrategyAccess().getRule();
	}
	
	//    ///////////////////////
	//// Operational Delta //
	/////////////////////////
	//OperationalDelta:
	//    variables+=Variable+
	//    'satisfies' '{'
	//    rule=SatisfactionRule
	//    '}';
	public OperationalDeltaElements getOperationalDeltaAccess() {
		return pOperationalDelta;
	}
	
	public ParserRule getOperationalDeltaRule() {
		return getOperationalDeltaAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
