/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.tgg.integrate.integrate.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.emoflon.ibex.tgg.integrate.integrate.AndExpression;
import org.emoflon.ibex.tgg.integrate.integrate.BooleanExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonParameter;
import org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionSpecification;
import org.emoflon.ibex.tgg.integrate.integrate.ContinueResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.DeleteCorrespondencesResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Expression;
import org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Import;
import org.emoflon.ibex.tgg.integrate.integrate.Integrate;
import org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage;
import org.emoflon.ibex.tgg.integrate.integrate.LiteralValue;
import org.emoflon.ibex.tgg.integrate.integrate.MergeAndPreserveResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.OperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.OrExpression;
import org.emoflon.ibex.tgg.integrate.integrate.Pipeline;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCount;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCreated;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageDeleted;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageEnd;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageExists;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageFilter;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageModification;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageSrc;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageStart;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageTrg;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageType;
import org.emoflon.ibex.tgg.integrate.integrate.PreferSourceResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.PreferTargetResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Resolution;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeAdditionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeDeletionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.SatisfactionRule;
import org.emoflon.ibex.tgg.integrate.integrate.Variable;
import org.emoflon.ibex.tgg.integrate.integrate.VariableReference;
import org.emoflon.ibex.tgg.integrate.integrate.WrappedOrExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage
 * @generated
 */
public class IntegrateSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IntegratePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrateSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = IntegratePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case IntegratePackage.INTEGRATE:
      {
        Integrate integrate = (Integrate)theEObject;
        T result = caseIntegrate(integrate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PACKAGE:
      {
        org.emoflon.ibex.tgg.integrate.integrate.Package package_ = (org.emoflon.ibex.tgg.integrate.integrate.Package)theEObject;
        T result = casePackage(package_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.CONFLICT_RESOLUTION_SPECIFICATION:
      {
        ConflictResolutionSpecification conflictResolutionSpecification = (ConflictResolutionSpecification)theEObject;
        T result = caseConflictResolutionSpecification(conflictResolutionSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.VARIABLE_REFERENCE:
      {
        VariableReference variableReference = (VariableReference)theEObject;
        T result = caseVariableReference(variableReference);
        if (result == null) result = caseComparisonParameter(variableReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE:
      {
        Pipeline pipeline = (Pipeline)theEObject;
        T result = casePipeline(pipeline);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_START:
      {
        PipelineStageStart pipelineStageStart = (PipelineStageStart)theEObject;
        T result = casePipelineStageStart(pipelineStageStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_SRC:
      {
        PipelineStageSrc pipelineStageSrc = (PipelineStageSrc)theEObject;
        T result = casePipelineStageSrc(pipelineStageSrc);
        if (result == null) result = casePipelineStageStart(pipelineStageSrc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_TRG:
      {
        PipelineStageTrg pipelineStageTrg = (PipelineStageTrg)theEObject;
        T result = casePipelineStageTrg(pipelineStageTrg);
        if (result == null) result = casePipelineStageStart(pipelineStageTrg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_FILTER:
      {
        PipelineStageFilter pipelineStageFilter = (PipelineStageFilter)theEObject;
        T result = casePipelineStageFilter(pipelineStageFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_MODIFICATION:
      {
        PipelineStageModification pipelineStageModification = (PipelineStageModification)theEObject;
        T result = casePipelineStageModification(pipelineStageModification);
        if (result == null) result = casePipelineStageFilter(pipelineStageModification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_CREATED:
      {
        PipelineStageCreated pipelineStageCreated = (PipelineStageCreated)theEObject;
        T result = casePipelineStageCreated(pipelineStageCreated);
        if (result == null) result = casePipelineStageModification(pipelineStageCreated);
        if (result == null) result = casePipelineStageFilter(pipelineStageCreated);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_DELETED:
      {
        PipelineStageDeleted pipelineStageDeleted = (PipelineStageDeleted)theEObject;
        T result = casePipelineStageDeleted(pipelineStageDeleted);
        if (result == null) result = casePipelineStageModification(pipelineStageDeleted);
        if (result == null) result = casePipelineStageFilter(pipelineStageDeleted);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_TYPE:
      {
        PipelineStageType pipelineStageType = (PipelineStageType)theEObject;
        T result = casePipelineStageType(pipelineStageType);
        if (result == null) result = casePipelineStageFilter(pipelineStageType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_END:
      {
        PipelineStageEnd pipelineStageEnd = (PipelineStageEnd)theEObject;
        T result = casePipelineStageEnd(pipelineStageEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_COUNT:
      {
        PipelineStageCount pipelineStageCount = (PipelineStageCount)theEObject;
        T result = casePipelineStageCount(pipelineStageCount);
        if (result == null) result = casePipelineStageEnd(pipelineStageCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PIPELINE_STAGE_EXISTS:
      {
        PipelineStageExists pipelineStageExists = (PipelineStageExists)theEObject;
        T result = casePipelineStageExists(pipelineStageExists);
        if (result == null) result = casePipelineStageEnd(pipelineStageExists);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.SATISFACTION_RULE:
      {
        SatisfactionRule satisfactionRule = (SatisfactionRule)theEObject;
        T result = caseSatisfactionRule(satisfactionRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.BOOLEAN_EXPRESSION:
      {
        BooleanExpression booleanExpression = (BooleanExpression)theEObject;
        T result = caseBooleanExpression(booleanExpression);
        if (result == null) result = caseExpression(booleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.WRAPPED_OR_EXPRESSION:
      {
        WrappedOrExpression wrappedOrExpression = (WrappedOrExpression)theEObject;
        T result = caseWrappedOrExpression(wrappedOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.COMPARISON_EXPRESSION:
      {
        ComparisonExpression comparisonExpression = (ComparisonExpression)theEObject;
        T result = caseComparisonExpression(comparisonExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.COMPARISON_PARAMETER:
      {
        ComparisonParameter comparisonParameter = (ComparisonParameter)theEObject;
        T result = caseComparisonParameter(comparisonParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.LITERAL_VALUE:
      {
        LiteralValue literalValue = (LiteralValue)theEObject;
        T result = caseLiteralValue(literalValue);
        if (result == null) result = caseComparisonParameter(literalValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.RESOLUTION:
      {
        Resolution resolution = (Resolution)theEObject;
        T result = caseResolution(resolution);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.RESOLUTION_STRATEGY_WITH_OPERATIONAL_DELTA:
      {
        ResolutionStrategyWithOperationalDelta resolutionStrategyWithOperationalDelta = (ResolutionStrategyWithOperationalDelta)theEObject;
        T result = caseResolutionStrategyWithOperationalDelta(resolutionStrategyWithOperationalDelta);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.RESOLUTION_STRATEGY:
      {
        ResolutionStrategy resolutionStrategy = (ResolutionStrategy)theEObject;
        T result = caseResolutionStrategy(resolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.FALLBACK_RESOLUTION_STRATEGY:
      {
        FallbackResolutionStrategy fallbackResolutionStrategy = (FallbackResolutionStrategy)theEObject;
        T result = caseFallbackResolutionStrategy(fallbackResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(fallbackResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.MERGE_AND_PRESERVE_RESOLUTION_STRATEGY:
      {
        MergeAndPreserveResolutionStrategy mergeAndPreserveResolutionStrategy = (MergeAndPreserveResolutionStrategy)theEObject;
        T result = caseMergeAndPreserveResolutionStrategy(mergeAndPreserveResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(mergeAndPreserveResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.REVOKE_ADDITION_RESOLUTION_STRATEGY:
      {
        RevokeAdditionResolutionStrategy revokeAdditionResolutionStrategy = (RevokeAdditionResolutionStrategy)theEObject;
        T result = caseRevokeAdditionResolutionStrategy(revokeAdditionResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(revokeAdditionResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.REVOKE_DELETION_RESOLUTION_STRATEGY:
      {
        RevokeDeletionResolutionStrategy revokeDeletionResolutionStrategy = (RevokeDeletionResolutionStrategy)theEObject;
        T result = caseRevokeDeletionResolutionStrategy(revokeDeletionResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(revokeDeletionResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PREFER_SOURCE_RESOLUTION_STRATEGY:
      {
        PreferSourceResolutionStrategy preferSourceResolutionStrategy = (PreferSourceResolutionStrategy)theEObject;
        T result = casePreferSourceResolutionStrategy(preferSourceResolutionStrategy);
        if (result == null) result = caseFallbackResolutionStrategy(preferSourceResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(preferSourceResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.PREFER_TARGET_RESOLUTION_STRATEGY:
      {
        PreferTargetResolutionStrategy preferTargetResolutionStrategy = (PreferTargetResolutionStrategy)theEObject;
        T result = casePreferTargetResolutionStrategy(preferTargetResolutionStrategy);
        if (result == null) result = caseFallbackResolutionStrategy(preferTargetResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(preferTargetResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.DELETE_CORRESPONDENCES_RESOLUTION_STRATEGY:
      {
        DeleteCorrespondencesResolutionStrategy deleteCorrespondencesResolutionStrategy = (DeleteCorrespondencesResolutionStrategy)theEObject;
        T result = caseDeleteCorrespondencesResolutionStrategy(deleteCorrespondencesResolutionStrategy);
        if (result == null) result = caseFallbackResolutionStrategy(deleteCorrespondencesResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(deleteCorrespondencesResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.CONTINUE_RESOLUTION_STRATEGY:
      {
        ContinueResolutionStrategy continueResolutionStrategy = (ContinueResolutionStrategy)theEObject;
        T result = caseContinueResolutionStrategy(continueResolutionStrategy);
        if (result == null) result = caseFallbackResolutionStrategy(continueResolutionStrategy);
        if (result == null) result = caseResolutionStrategy(continueResolutionStrategy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.OPERATIONAL_DELTA:
      {
        OperationalDelta operationalDelta = (OperationalDelta)theEObject;
        T result = caseOperationalDelta(operationalDelta);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.OR_EXPRESSION:
      {
        OrExpression orExpression = (OrExpression)theEObject;
        T result = caseOrExpression(orExpression);
        if (result == null) result = caseExpression(orExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IntegratePackage.AND_EXPRESSION:
      {
        AndExpression andExpression = (AndExpression)theEObject;
        T result = caseAndExpression(andExpression);
        if (result == null) result = caseExpression(andExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integrate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integrate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegrate(Integrate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackage(org.emoflon.ibex.tgg.integrate.integrate.Package object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conflict Resolution Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conflict Resolution Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConflictResolutionSpecification(ConflictResolutionSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableReference(VariableReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipeline(Pipeline object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Start</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Start</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageStart(PipelineStageStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Src</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Src</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageSrc(PipelineStageSrc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Trg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Trg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageTrg(PipelineStageTrg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageFilter(PipelineStageFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageModification(PipelineStageModification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Created</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Created</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageCreated(PipelineStageCreated object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Deleted</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Deleted</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageDeleted(PipelineStageDeleted object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageType(PipelineStageType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageEnd(PipelineStageEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageCount(PipelineStageCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pipeline Stage Exists</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pipeline Stage Exists</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePipelineStageExists(PipelineStageExists object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Satisfaction Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Satisfaction Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSatisfactionRule(SatisfactionRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpression(BooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wrapped Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wrapped Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrappedOrExpression(WrappedOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonExpression(ComparisonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonParameter(ComparisonParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralValue(LiteralValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resolution</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resolution</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResolution(Resolution object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resolution Strategy With Operational Delta</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resolution Strategy With Operational Delta</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResolutionStrategyWithOperationalDelta(ResolutionStrategyWithOperationalDelta object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResolutionStrategy(ResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fallback Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fallback Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFallbackResolutionStrategy(FallbackResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge And Preserve Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge And Preserve Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeAndPreserveResolutionStrategy(MergeAndPreserveResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Revoke Addition Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Revoke Addition Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRevokeAdditionResolutionStrategy(RevokeAdditionResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Revoke Deletion Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Revoke Deletion Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRevokeDeletionResolutionStrategy(RevokeDeletionResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefer Source Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefer Source Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreferSourceResolutionStrategy(PreferSourceResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefer Target Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefer Target Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreferTargetResolutionStrategy(PreferTargetResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Correspondences Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Correspondences Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteCorrespondencesResolutionStrategy(DeleteCorrespondencesResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continue Resolution Strategy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continue Resolution Strategy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinueResolutionStrategy(ContinueResolutionStrategy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operational Delta</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operational Delta</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationalDelta(OperationalDelta object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrExpression(OrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndExpression(AndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //IntegrateSwitch
