/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.tgg.integrate.integrate.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.emoflon.ibex.tgg.integrate.integrate.AndExpression;
import org.emoflon.ibex.tgg.integrate.integrate.BooleanExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonParameter;
import org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionSpecification;
import org.emoflon.ibex.tgg.integrate.integrate.ContinueResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.DeleteCorrespondencesResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Expression;
import org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Import;
import org.emoflon.ibex.tgg.integrate.integrate.Integrate;
import org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage;
import org.emoflon.ibex.tgg.integrate.integrate.LiteralValue;
import org.emoflon.ibex.tgg.integrate.integrate.MergeAndPreserveResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.OperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.OrExpression;
import org.emoflon.ibex.tgg.integrate.integrate.Pipeline;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCount;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCreated;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageDeleted;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageEnd;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageExists;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageFilter;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageModification;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageSrc;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageStart;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageTrg;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageType;
import org.emoflon.ibex.tgg.integrate.integrate.PreferSourceResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.PreferTargetResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Resolution;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeAdditionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeDeletionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.SatisfactionRule;
import org.emoflon.ibex.tgg.integrate.integrate.Variable;
import org.emoflon.ibex.tgg.integrate.integrate.VariableReference;
import org.emoflon.ibex.tgg.integrate.integrate.WrappedOrExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage
 * @generated
 */
public class IntegrateAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IntegratePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrateAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = IntegratePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntegrateSwitch<Adapter> modelSwitch =
    new IntegrateSwitch<Adapter>()
    {
      @Override
      public Adapter caseIntegrate(Integrate object)
      {
        return createIntegrateAdapter();
      }
      @Override
      public Adapter casePackage(org.emoflon.ibex.tgg.integrate.integrate.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseConflictResolutionSpecification(ConflictResolutionSpecification object)
      {
        return createConflictResolutionSpecificationAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVariableReference(VariableReference object)
      {
        return createVariableReferenceAdapter();
      }
      @Override
      public Adapter casePipeline(Pipeline object)
      {
        return createPipelineAdapter();
      }
      @Override
      public Adapter casePipelineStageStart(PipelineStageStart object)
      {
        return createPipelineStageStartAdapter();
      }
      @Override
      public Adapter casePipelineStageSrc(PipelineStageSrc object)
      {
        return createPipelineStageSrcAdapter();
      }
      @Override
      public Adapter casePipelineStageTrg(PipelineStageTrg object)
      {
        return createPipelineStageTrgAdapter();
      }
      @Override
      public Adapter casePipelineStageFilter(PipelineStageFilter object)
      {
        return createPipelineStageFilterAdapter();
      }
      @Override
      public Adapter casePipelineStageModification(PipelineStageModification object)
      {
        return createPipelineStageModificationAdapter();
      }
      @Override
      public Adapter casePipelineStageCreated(PipelineStageCreated object)
      {
        return createPipelineStageCreatedAdapter();
      }
      @Override
      public Adapter casePipelineStageDeleted(PipelineStageDeleted object)
      {
        return createPipelineStageDeletedAdapter();
      }
      @Override
      public Adapter casePipelineStageType(PipelineStageType object)
      {
        return createPipelineStageTypeAdapter();
      }
      @Override
      public Adapter casePipelineStageEnd(PipelineStageEnd object)
      {
        return createPipelineStageEndAdapter();
      }
      @Override
      public Adapter casePipelineStageCount(PipelineStageCount object)
      {
        return createPipelineStageCountAdapter();
      }
      @Override
      public Adapter casePipelineStageExists(PipelineStageExists object)
      {
        return createPipelineStageExistsAdapter();
      }
      @Override
      public Adapter caseSatisfactionRule(SatisfactionRule object)
      {
        return createSatisfactionRuleAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseWrappedOrExpression(WrappedOrExpression object)
      {
        return createWrappedOrExpressionAdapter();
      }
      @Override
      public Adapter caseComparisonExpression(ComparisonExpression object)
      {
        return createComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseComparisonParameter(ComparisonParameter object)
      {
        return createComparisonParameterAdapter();
      }
      @Override
      public Adapter caseLiteralValue(LiteralValue object)
      {
        return createLiteralValueAdapter();
      }
      @Override
      public Adapter caseResolution(Resolution object)
      {
        return createResolutionAdapter();
      }
      @Override
      public Adapter caseResolutionStrategyWithOperationalDelta(ResolutionStrategyWithOperationalDelta object)
      {
        return createResolutionStrategyWithOperationalDeltaAdapter();
      }
      @Override
      public Adapter caseResolutionStrategy(ResolutionStrategy object)
      {
        return createResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseFallbackResolutionStrategy(FallbackResolutionStrategy object)
      {
        return createFallbackResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseMergeAndPreserveResolutionStrategy(MergeAndPreserveResolutionStrategy object)
      {
        return createMergeAndPreserveResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseRevokeAdditionResolutionStrategy(RevokeAdditionResolutionStrategy object)
      {
        return createRevokeAdditionResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseRevokeDeletionResolutionStrategy(RevokeDeletionResolutionStrategy object)
      {
        return createRevokeDeletionResolutionStrategyAdapter();
      }
      @Override
      public Adapter casePreferSourceResolutionStrategy(PreferSourceResolutionStrategy object)
      {
        return createPreferSourceResolutionStrategyAdapter();
      }
      @Override
      public Adapter casePreferTargetResolutionStrategy(PreferTargetResolutionStrategy object)
      {
        return createPreferTargetResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseDeleteCorrespondencesResolutionStrategy(DeleteCorrespondencesResolutionStrategy object)
      {
        return createDeleteCorrespondencesResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseContinueResolutionStrategy(ContinueResolutionStrategy object)
      {
        return createContinueResolutionStrategyAdapter();
      }
      @Override
      public Adapter caseOperationalDelta(OperationalDelta object)
      {
        return createOperationalDeltaAdapter();
      }
      @Override
      public Adapter caseOrExpression(OrExpression object)
      {
        return createOrExpressionAdapter();
      }
      @Override
      public Adapter caseAndExpression(AndExpression object)
      {
        return createAndExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Integrate <em>Integrate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Integrate
   * @generated
   */
  public Adapter createIntegrateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionSpecification <em>Conflict Resolution Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionSpecification
   * @generated
   */
  public Adapter createConflictResolutionSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.VariableReference <em>Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.VariableReference
   * @generated
   */
  public Adapter createVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Pipeline <em>Pipeline</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Pipeline
   * @generated
   */
  public Adapter createPipelineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageStart <em>Pipeline Stage Start</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageStart
   * @generated
   */
  public Adapter createPipelineStageStartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageSrc <em>Pipeline Stage Src</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageSrc
   * @generated
   */
  public Adapter createPipelineStageSrcAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageTrg <em>Pipeline Stage Trg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageTrg
   * @generated
   */
  public Adapter createPipelineStageTrgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageFilter <em>Pipeline Stage Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageFilter
   * @generated
   */
  public Adapter createPipelineStageFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageModification <em>Pipeline Stage Modification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageModification
   * @generated
   */
  public Adapter createPipelineStageModificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCreated <em>Pipeline Stage Created</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCreated
   * @generated
   */
  public Adapter createPipelineStageCreatedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageDeleted <em>Pipeline Stage Deleted</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageDeleted
   * @generated
   */
  public Adapter createPipelineStageDeletedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageType <em>Pipeline Stage Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageType
   * @generated
   */
  public Adapter createPipelineStageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageEnd <em>Pipeline Stage End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageEnd
   * @generated
   */
  public Adapter createPipelineStageEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCount <em>Pipeline Stage Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCount
   * @generated
   */
  public Adapter createPipelineStageCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PipelineStageExists <em>Pipeline Stage Exists</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PipelineStageExists
   * @generated
   */
  public Adapter createPipelineStageExistsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.SatisfactionRule <em>Satisfaction Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.SatisfactionRule
   * @generated
   */
  public Adapter createSatisfactionRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.WrappedOrExpression <em>Wrapped Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.WrappedOrExpression
   * @generated
   */
  public Adapter createWrappedOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ComparisonExpression <em>Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ComparisonExpression
   * @generated
   */
  public Adapter createComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ComparisonParameter <em>Comparison Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ComparisonParameter
   * @generated
   */
  public Adapter createComparisonParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.LiteralValue <em>Literal Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.LiteralValue
   * @generated
   */
  public Adapter createLiteralValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.Resolution <em>Resolution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.Resolution
   * @generated
   */
  public Adapter createResolutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta <em>Resolution Strategy With Operational Delta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta
   * @generated
   */
  public Adapter createResolutionStrategyWithOperationalDeltaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy <em>Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy
   * @generated
   */
  public Adapter createResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy <em>Fallback Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy
   * @generated
   */
  public Adapter createFallbackResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.MergeAndPreserveResolutionStrategy <em>Merge And Preserve Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.MergeAndPreserveResolutionStrategy
   * @generated
   */
  public Adapter createMergeAndPreserveResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.RevokeAdditionResolutionStrategy <em>Revoke Addition Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.RevokeAdditionResolutionStrategy
   * @generated
   */
  public Adapter createRevokeAdditionResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.RevokeDeletionResolutionStrategy <em>Revoke Deletion Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.RevokeDeletionResolutionStrategy
   * @generated
   */
  public Adapter createRevokeDeletionResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PreferSourceResolutionStrategy <em>Prefer Source Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PreferSourceResolutionStrategy
   * @generated
   */
  public Adapter createPreferSourceResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.PreferTargetResolutionStrategy <em>Prefer Target Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.PreferTargetResolutionStrategy
   * @generated
   */
  public Adapter createPreferTargetResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.DeleteCorrespondencesResolutionStrategy <em>Delete Correspondences Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.DeleteCorrespondencesResolutionStrategy
   * @generated
   */
  public Adapter createDeleteCorrespondencesResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.ContinueResolutionStrategy <em>Continue Resolution Strategy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.ContinueResolutionStrategy
   * @generated
   */
  public Adapter createContinueResolutionStrategyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.OperationalDelta <em>Operational Delta</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.OperationalDelta
   * @generated
   */
  public Adapter createOperationalDeltaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.OrExpression <em>Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.OrExpression
   * @generated
   */
  public Adapter createOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.tgg.integrate.integrate.AndExpression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.tgg.integrate.integrate.AndExpression
   * @generated
   */
  public Adapter createAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //IntegrateAdapterFactory
