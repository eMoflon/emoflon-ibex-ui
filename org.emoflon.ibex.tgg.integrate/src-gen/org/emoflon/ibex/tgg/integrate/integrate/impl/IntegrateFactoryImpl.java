/**
 * generated by Xtext 2.20.0
 */
package org.emoflon.ibex.tgg.integrate.integrate.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.emoflon.ibex.tgg.integrate.integrate.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IntegrateFactoryImpl extends EFactoryImpl implements IntegrateFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IntegrateFactory init()
  {
    try
    {
      IntegrateFactory theIntegrateFactory = (IntegrateFactory)EPackage.Registry.INSTANCE.getEFactory(IntegratePackage.eNS_URI);
      if (theIntegrateFactory != null)
      {
        return theIntegrateFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IntegrateFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrateFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IntegratePackage.INTEGRATE: return createIntegrate();
      case IntegratePackage.IMPORT: return createImport();
      case IntegratePackage.CONFLICT_RESOLUTION_STRATEGY: return createConflictResolutionStrategy();
      case IntegratePackage.VARIABLE: return createVariable();
      case IntegratePackage.PIPELINE: return createPipeline();
      case IntegratePackage.PIPELINE_STAGE_SRC: return createPipelineStageSrc();
      case IntegratePackage.PIPELINE_STAGE_TRG: return createPipelineStageTrg();
      case IntegratePackage.PIPELINE_STAGE: return createPipelineStage();
      case IntegratePackage.PIPELINE_FILTER_STAGE: return createPipelineFilterStage();
      case IntegratePackage.PIPELINE_CREATED_FILTER_STAGE: return createPipelineCreatedFilterStage();
      case IntegratePackage.PIPELINE_DELETED_FILTER_STAGE: return createPipelineDeletedFilterStage();
      case IntegratePackage.PIPELINE_TYPE_FILTER_STAGE: return createPipelineTypeFilterStage();
      case IntegratePackage.PIPELINE_COUNT_STAGE: return createPipelineCountStage();
      case IntegratePackage.SATISFACTION_RULE: return createSatisfactionRule();
      case IntegratePackage.AND: return createAnd();
      case IntegratePackage.OR: return createOr();
      case IntegratePackage.COMPARISON: return createComparison();
      case IntegratePackage.RESOLUTION_STRATEGY: return createResolutionStrategy();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Integrate createIntegrate()
  {
    IntegrateImpl integrate = new IntegrateImpl();
    return integrate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConflictResolutionStrategy createConflictResolutionStrategy()
  {
    ConflictResolutionStrategyImpl conflictResolutionStrategy = new ConflictResolutionStrategyImpl();
    return conflictResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pipeline createPipeline()
  {
    PipelineImpl pipeline = new PipelineImpl();
    return pipeline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageSrc createPipelineStageSrc()
  {
    PipelineStageSrcImpl pipelineStageSrc = new PipelineStageSrcImpl();
    return pipelineStageSrc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageTrg createPipelineStageTrg()
  {
    PipelineStageTrgImpl pipelineStageTrg = new PipelineStageTrgImpl();
    return pipelineStageTrg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStage createPipelineStage()
  {
    PipelineStageImpl pipelineStage = new PipelineStageImpl();
    return pipelineStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineFilterStage createPipelineFilterStage()
  {
    PipelineFilterStageImpl pipelineFilterStage = new PipelineFilterStageImpl();
    return pipelineFilterStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineCreatedFilterStage createPipelineCreatedFilterStage()
  {
    PipelineCreatedFilterStageImpl pipelineCreatedFilterStage = new PipelineCreatedFilterStageImpl();
    return pipelineCreatedFilterStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineDeletedFilterStage createPipelineDeletedFilterStage()
  {
    PipelineDeletedFilterStageImpl pipelineDeletedFilterStage = new PipelineDeletedFilterStageImpl();
    return pipelineDeletedFilterStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineTypeFilterStage createPipelineTypeFilterStage()
  {
    PipelineTypeFilterStageImpl pipelineTypeFilterStage = new PipelineTypeFilterStageImpl();
    return pipelineTypeFilterStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineCountStage createPipelineCountStage()
  {
    PipelineCountStageImpl pipelineCountStage = new PipelineCountStageImpl();
    return pipelineCountStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SatisfactionRule createSatisfactionRule()
  {
    SatisfactionRuleImpl satisfactionRule = new SatisfactionRuleImpl();
    return satisfactionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResolutionStrategy createResolutionStrategy()
  {
    ResolutionStrategyImpl resolutionStrategy = new ResolutionStrategyImpl();
    return resolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegratePackage getIntegratePackage()
  {
    return (IntegratePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IntegratePackage getPackage()
  {
    return IntegratePackage.eINSTANCE;
  }

} //IntegrateFactoryImpl
