/**
 * generated by Xtext 2.25.0
 */
package org.emoflon.ibex.tgg.integrate.integrate.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.emoflon.ibex.tgg.integrate.integrate.AndExpression;
import org.emoflon.ibex.tgg.integrate.integrate.BooleanExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonExpression;
import org.emoflon.ibex.tgg.integrate.integrate.ComparisonParameter;
import org.emoflon.ibex.tgg.integrate.integrate.ConflictResolutionSpecification;
import org.emoflon.ibex.tgg.integrate.integrate.ContinueResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.DeleteCorrespondencesResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Expression;
import org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Import;
import org.emoflon.ibex.tgg.integrate.integrate.Integrate;
import org.emoflon.ibex.tgg.integrate.integrate.IntegrateFactory;
import org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage;
import org.emoflon.ibex.tgg.integrate.integrate.LiteralValue;
import org.emoflon.ibex.tgg.integrate.integrate.MergeAndPreserveResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.OperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.OrExpression;
import org.emoflon.ibex.tgg.integrate.integrate.Pipeline;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCount;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageCreated;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageDeleted;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageEnd;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageExists;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageFilter;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageModification;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageSrc;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageStart;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageTrg;
import org.emoflon.ibex.tgg.integrate.integrate.PipelineStageType;
import org.emoflon.ibex.tgg.integrate.integrate.PreferSourceResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.PreferTargetResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.Resolution;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeAdditionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.RevokeDeletionResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.SatisfactionRule;
import org.emoflon.ibex.tgg.integrate.integrate.Variable;
import org.emoflon.ibex.tgg.integrate.integrate.VariableReference;
import org.emoflon.ibex.tgg.integrate.integrate.WrappedOrExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IntegrateFactoryImpl extends EFactoryImpl implements IntegrateFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IntegrateFactory init()
  {
    try
    {
      IntegrateFactory theIntegrateFactory = (IntegrateFactory)EPackage.Registry.INSTANCE.getEFactory(IntegratePackage.eNS_URI);
      if (theIntegrateFactory != null)
      {
        return theIntegrateFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IntegrateFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrateFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IntegratePackage.INTEGRATE: return createIntegrate();
      case IntegratePackage.PACKAGE: return createPackage();
      case IntegratePackage.IMPORT: return createImport();
      case IntegratePackage.CONFLICT_RESOLUTION_SPECIFICATION: return createConflictResolutionSpecification();
      case IntegratePackage.VARIABLE: return createVariable();
      case IntegratePackage.VARIABLE_REFERENCE: return createVariableReference();
      case IntegratePackage.PIPELINE: return createPipeline();
      case IntegratePackage.PIPELINE_STAGE_START: return createPipelineStageStart();
      case IntegratePackage.PIPELINE_STAGE_SRC: return createPipelineStageSrc();
      case IntegratePackage.PIPELINE_STAGE_TRG: return createPipelineStageTrg();
      case IntegratePackage.PIPELINE_STAGE_FILTER: return createPipelineStageFilter();
      case IntegratePackage.PIPELINE_STAGE_MODIFICATION: return createPipelineStageModification();
      case IntegratePackage.PIPELINE_STAGE_CREATED: return createPipelineStageCreated();
      case IntegratePackage.PIPELINE_STAGE_DELETED: return createPipelineStageDeleted();
      case IntegratePackage.PIPELINE_STAGE_TYPE: return createPipelineStageType();
      case IntegratePackage.PIPELINE_STAGE_END: return createPipelineStageEnd();
      case IntegratePackage.PIPELINE_STAGE_COUNT: return createPipelineStageCount();
      case IntegratePackage.PIPELINE_STAGE_EXISTS: return createPipelineStageExists();
      case IntegratePackage.SATISFACTION_RULE: return createSatisfactionRule();
      case IntegratePackage.EXPRESSION: return createExpression();
      case IntegratePackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case IntegratePackage.WRAPPED_OR_EXPRESSION: return createWrappedOrExpression();
      case IntegratePackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case IntegratePackage.COMPARISON_PARAMETER: return createComparisonParameter();
      case IntegratePackage.LITERAL_VALUE: return createLiteralValue();
      case IntegratePackage.RESOLUTION: return createResolution();
      case IntegratePackage.RESOLUTION_STRATEGY_WITH_OPERATIONAL_DELTA: return createResolutionStrategyWithOperationalDelta();
      case IntegratePackage.RESOLUTION_STRATEGY: return createResolutionStrategy();
      case IntegratePackage.FALLBACK_RESOLUTION_STRATEGY: return createFallbackResolutionStrategy();
      case IntegratePackage.MERGE_AND_PRESERVE_RESOLUTION_STRATEGY: return createMergeAndPreserveResolutionStrategy();
      case IntegratePackage.REVOKE_ADDITION_RESOLUTION_STRATEGY: return createRevokeAdditionResolutionStrategy();
      case IntegratePackage.REVOKE_DELETION_RESOLUTION_STRATEGY: return createRevokeDeletionResolutionStrategy();
      case IntegratePackage.PREFER_SOURCE_RESOLUTION_STRATEGY: return createPreferSourceResolutionStrategy();
      case IntegratePackage.PREFER_TARGET_RESOLUTION_STRATEGY: return createPreferTargetResolutionStrategy();
      case IntegratePackage.DELETE_CORRESPONDENCES_RESOLUTION_STRATEGY: return createDeleteCorrespondencesResolutionStrategy();
      case IntegratePackage.CONTINUE_RESOLUTION_STRATEGY: return createContinueResolutionStrategy();
      case IntegratePackage.OPERATIONAL_DELTA: return createOperationalDelta();
      case IntegratePackage.OR_EXPRESSION: return createOrExpression();
      case IntegratePackage.AND_EXPRESSION: return createAndExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Integrate createIntegrate()
  {
    IntegrateImpl integrate = new IntegrateImpl();
    return integrate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.emoflon.ibex.tgg.integrate.integrate.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConflictResolutionSpecification createConflictResolutionSpecification()
  {
    ConflictResolutionSpecificationImpl conflictResolutionSpecification = new ConflictResolutionSpecificationImpl();
    return conflictResolutionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pipeline createPipeline()
  {
    PipelineImpl pipeline = new PipelineImpl();
    return pipeline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageStart createPipelineStageStart()
  {
    PipelineStageStartImpl pipelineStageStart = new PipelineStageStartImpl();
    return pipelineStageStart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageSrc createPipelineStageSrc()
  {
    PipelineStageSrcImpl pipelineStageSrc = new PipelineStageSrcImpl();
    return pipelineStageSrc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageTrg createPipelineStageTrg()
  {
    PipelineStageTrgImpl pipelineStageTrg = new PipelineStageTrgImpl();
    return pipelineStageTrg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageFilter createPipelineStageFilter()
  {
    PipelineStageFilterImpl pipelineStageFilter = new PipelineStageFilterImpl();
    return pipelineStageFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageModification createPipelineStageModification()
  {
    PipelineStageModificationImpl pipelineStageModification = new PipelineStageModificationImpl();
    return pipelineStageModification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageCreated createPipelineStageCreated()
  {
    PipelineStageCreatedImpl pipelineStageCreated = new PipelineStageCreatedImpl();
    return pipelineStageCreated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageDeleted createPipelineStageDeleted()
  {
    PipelineStageDeletedImpl pipelineStageDeleted = new PipelineStageDeletedImpl();
    return pipelineStageDeleted;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageType createPipelineStageType()
  {
    PipelineStageTypeImpl pipelineStageType = new PipelineStageTypeImpl();
    return pipelineStageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageEnd createPipelineStageEnd()
  {
    PipelineStageEndImpl pipelineStageEnd = new PipelineStageEndImpl();
    return pipelineStageEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageCount createPipelineStageCount()
  {
    PipelineStageCountImpl pipelineStageCount = new PipelineStageCountImpl();
    return pipelineStageCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineStageExists createPipelineStageExists()
  {
    PipelineStageExistsImpl pipelineStageExists = new PipelineStageExistsImpl();
    return pipelineStageExists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SatisfactionRule createSatisfactionRule()
  {
    SatisfactionRuleImpl satisfactionRule = new SatisfactionRuleImpl();
    return satisfactionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WrappedOrExpression createWrappedOrExpression()
  {
    WrappedOrExpressionImpl wrappedOrExpression = new WrappedOrExpressionImpl();
    return wrappedOrExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonParameter createComparisonParameter()
  {
    ComparisonParameterImpl comparisonParameter = new ComparisonParameterImpl();
    return comparisonParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralValue createLiteralValue()
  {
    LiteralValueImpl literalValue = new LiteralValueImpl();
    return literalValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Resolution createResolution()
  {
    ResolutionImpl resolution = new ResolutionImpl();
    return resolution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResolutionStrategyWithOperationalDelta createResolutionStrategyWithOperationalDelta()
  {
    ResolutionStrategyWithOperationalDeltaImpl resolutionStrategyWithOperationalDelta = new ResolutionStrategyWithOperationalDeltaImpl();
    return resolutionStrategyWithOperationalDelta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResolutionStrategy createResolutionStrategy()
  {
    ResolutionStrategyImpl resolutionStrategy = new ResolutionStrategyImpl();
    return resolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FallbackResolutionStrategy createFallbackResolutionStrategy()
  {
    FallbackResolutionStrategyImpl fallbackResolutionStrategy = new FallbackResolutionStrategyImpl();
    return fallbackResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeAndPreserveResolutionStrategy createMergeAndPreserveResolutionStrategy()
  {
    MergeAndPreserveResolutionStrategyImpl mergeAndPreserveResolutionStrategy = new MergeAndPreserveResolutionStrategyImpl();
    return mergeAndPreserveResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RevokeAdditionResolutionStrategy createRevokeAdditionResolutionStrategy()
  {
    RevokeAdditionResolutionStrategyImpl revokeAdditionResolutionStrategy = new RevokeAdditionResolutionStrategyImpl();
    return revokeAdditionResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RevokeDeletionResolutionStrategy createRevokeDeletionResolutionStrategy()
  {
    RevokeDeletionResolutionStrategyImpl revokeDeletionResolutionStrategy = new RevokeDeletionResolutionStrategyImpl();
    return revokeDeletionResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreferSourceResolutionStrategy createPreferSourceResolutionStrategy()
  {
    PreferSourceResolutionStrategyImpl preferSourceResolutionStrategy = new PreferSourceResolutionStrategyImpl();
    return preferSourceResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreferTargetResolutionStrategy createPreferTargetResolutionStrategy()
  {
    PreferTargetResolutionStrategyImpl preferTargetResolutionStrategy = new PreferTargetResolutionStrategyImpl();
    return preferTargetResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteCorrespondencesResolutionStrategy createDeleteCorrespondencesResolutionStrategy()
  {
    DeleteCorrespondencesResolutionStrategyImpl deleteCorrespondencesResolutionStrategy = new DeleteCorrespondencesResolutionStrategyImpl();
    return deleteCorrespondencesResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContinueResolutionStrategy createContinueResolutionStrategy()
  {
    ContinueResolutionStrategyImpl continueResolutionStrategy = new ContinueResolutionStrategyImpl();
    return continueResolutionStrategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationalDelta createOperationalDelta()
  {
    OperationalDeltaImpl operationalDelta = new OperationalDeltaImpl();
    return operationalDelta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegratePackage getIntegratePackage()
  {
    return (IntegratePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IntegratePackage getPackage()
  {
    return IntegratePackage.eINSTANCE;
  }

} //IntegrateFactoryImpl
