/**
 * generated by Xtext 2.25.0
 */
package org.emoflon.ibex.tgg.integrate.integrate.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.emoflon.ibex.tgg.integrate.integrate.FallbackResolutionStrategy;
import org.emoflon.ibex.tgg.integrate.integrate.IntegratePackage;
import org.emoflon.ibex.tgg.integrate.integrate.Resolution;
import org.emoflon.ibex.tgg.integrate.integrate.ResolutionStrategyWithOperationalDelta;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Resolution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.tgg.integrate.integrate.impl.ResolutionImpl#getStrategies <em>Strategies</em>}</li>
 *   <li>{@link org.emoflon.ibex.tgg.integrate.integrate.impl.ResolutionImpl#getFallback <em>Fallback</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ResolutionImpl extends MinimalEObjectImpl.Container implements Resolution
{
  /**
   * The cached value of the '{@link #getStrategies() <em>Strategies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStrategies()
   * @generated
   * @ordered
   */
  protected EList<ResolutionStrategyWithOperationalDelta> strategies;

  /**
   * The cached value of the '{@link #getFallback() <em>Fallback</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFallback()
   * @generated
   * @ordered
   */
  protected FallbackResolutionStrategy fallback;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResolutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IntegratePackage.Literals.RESOLUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ResolutionStrategyWithOperationalDelta> getStrategies()
  {
    if (strategies == null)
    {
      strategies = new EObjectContainmentEList<ResolutionStrategyWithOperationalDelta>(ResolutionStrategyWithOperationalDelta.class, this, IntegratePackage.RESOLUTION__STRATEGIES);
    }
    return strategies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FallbackResolutionStrategy getFallback()
  {
    return fallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFallback(FallbackResolutionStrategy newFallback, NotificationChain msgs)
  {
    FallbackResolutionStrategy oldFallback = fallback;
    fallback = newFallback;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IntegratePackage.RESOLUTION__FALLBACK, oldFallback, newFallback);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFallback(FallbackResolutionStrategy newFallback)
  {
    if (newFallback != fallback)
    {
      NotificationChain msgs = null;
      if (fallback != null)
        msgs = ((InternalEObject)fallback).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IntegratePackage.RESOLUTION__FALLBACK, null, msgs);
      if (newFallback != null)
        msgs = ((InternalEObject)newFallback).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IntegratePackage.RESOLUTION__FALLBACK, null, msgs);
      msgs = basicSetFallback(newFallback, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IntegratePackage.RESOLUTION__FALLBACK, newFallback, newFallback));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IntegratePackage.RESOLUTION__STRATEGIES:
        return ((InternalEList<?>)getStrategies()).basicRemove(otherEnd, msgs);
      case IntegratePackage.RESOLUTION__FALLBACK:
        return basicSetFallback(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IntegratePackage.RESOLUTION__STRATEGIES:
        return getStrategies();
      case IntegratePackage.RESOLUTION__FALLBACK:
        return getFallback();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IntegratePackage.RESOLUTION__STRATEGIES:
        getStrategies().clear();
        getStrategies().addAll((Collection<? extends ResolutionStrategyWithOperationalDelta>)newValue);
        return;
      case IntegratePackage.RESOLUTION__FALLBACK:
        setFallback((FallbackResolutionStrategy)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IntegratePackage.RESOLUTION__STRATEGIES:
        getStrategies().clear();
        return;
      case IntegratePackage.RESOLUTION__FALLBACK:
        setFallback((FallbackResolutionStrategy)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IntegratePackage.RESOLUTION__STRATEGIES:
        return strategies != null && !strategies.isEmpty();
      case IntegratePackage.RESOLUTION__FALLBACK:
        return fallback != null;
    }
    return super.eIsSet(featureID);
  }

} //ResolutionImpl
