/*
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.tgg.integrate.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.emoflon.ibex.tgg.integrate.ide.contentassist.antlr.internal.InternalIntegrateParser;
import org.emoflon.ibex.tgg.integrate.services.IntegrateGrammarAccess;

public class IntegrateParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IntegrateGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IntegrateGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPipelineStageStartAccess().getAlternatives(), "rule__PipelineStageStart__Alternatives");
			builder.put(grammarAccess.getPipelineStageSrcAccess().getNextAlternatives_2_0(), "rule__PipelineStageSrc__NextAlternatives_2_0");
			builder.put(grammarAccess.getPipelineStageTrgAccess().getNextAlternatives_2_0(), "rule__PipelineStageTrg__NextAlternatives_2_0");
			builder.put(grammarAccess.getPipelineStageFilterAccess().getAlternatives(), "rule__PipelineStageFilter__Alternatives");
			builder.put(grammarAccess.getPipelineStageModificationAccess().getAlternatives(), "rule__PipelineStageModification__Alternatives");
			builder.put(grammarAccess.getPipelineStageCreatedAccess().getNextAlternatives_2_0(), "rule__PipelineStageCreated__NextAlternatives_2_0");
			builder.put(grammarAccess.getPipelineStageDeletedAccess().getNextAlternatives_2_0(), "rule__PipelineStageDeleted__NextAlternatives_2_0");
			builder.put(grammarAccess.getPipelineStageEndAccess().getAlternatives(), "rule__PipelineStageEnd__Alternatives");
			builder.put(grammarAccess.getBooleanExpressionAccess().getExpressionAlternatives_1_0(), "rule__BooleanExpression__ExpressionAlternatives_1_0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOpAlternatives_1_0(), "rule__ComparisonExpression__OpAlternatives_1_0");
			builder.put(grammarAccess.getComparisonParameterAccess().getAlternatives(), "rule__ComparisonParameter__Alternatives");
			builder.put(grammarAccess.getResolutionStrategyAccess().getAlternatives(), "rule__ResolutionStrategy__Alternatives");
			builder.put(grammarAccess.getFallbackResolutionStrategyAccess().getAlternatives(), "rule__FallbackResolutionStrategy__Alternatives");
			builder.put(grammarAccess.getIntegrateAccess().getGroup(), "rule__Integrate__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getConflictResolutionSpecificationAccess().getGroup(), "rule__ConflictResolutionSpecification__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getPipelineStageSrcAccess().getGroup(), "rule__PipelineStageSrc__Group__0");
			builder.put(grammarAccess.getPipelineStageTrgAccess().getGroup(), "rule__PipelineStageTrg__Group__0");
			builder.put(grammarAccess.getPipelineStageCreatedAccess().getGroup(), "rule__PipelineStageCreated__Group__0");
			builder.put(grammarAccess.getPipelineStageDeletedAccess().getGroup(), "rule__PipelineStageDeleted__Group__0");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getGroup(), "rule__PipelineStageType__Group__0");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getGroup_2(), "rule__PipelineStageType__Group_2__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
			builder.put(grammarAccess.getWrappedOrExpressionAccess().getGroup(), "rule__WrappedOrExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getResolutionAccess().getGroup(), "rule__Resolution__Group__0");
			builder.put(grammarAccess.getResolutionAccess().getGroup_1(), "rule__Resolution__Group_1__0");
			builder.put(grammarAccess.getResolutionStrategyWithOperationalDeltaAccess().getGroup(), "rule__ResolutionStrategyWithOperationalDelta__Group__0");
			builder.put(grammarAccess.getResolutionStrategyWithOperationalDeltaAccess().getGroup_1(), "rule__ResolutionStrategyWithOperationalDelta__Group_1__0");
			builder.put(grammarAccess.getOperationalDeltaAccess().getGroup(), "rule__OperationalDelta__Group__0");
			builder.put(grammarAccess.getIntegrateAccess().getPackageAssignment_0(), "rule__Integrate__PackageAssignment_0");
			builder.put(grammarAccess.getIntegrateAccess().getImportsAssignment_1(), "rule__Integrate__ImportsAssignment_1");
			builder.put(grammarAccess.getIntegrateAccess().getConflictResolutionSpecificationsAssignment_2(), "rule__Integrate__ConflictResolutionSpecificationsAssignment_2");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getSchemaAssignment_1(), "rule__Import__SchemaAssignment_1");
			builder.put(grammarAccess.getConflictResolutionSpecificationAccess().getNameAssignment_0(), "rule__ConflictResolutionSpecification__NameAssignment_0");
			builder.put(grammarAccess.getConflictResolutionSpecificationAccess().getVariablesAssignment_4(), "rule__ConflictResolutionSpecification__VariablesAssignment_4");
			builder.put(grammarAccess.getConflictResolutionSpecificationAccess().getRuleAssignment_7(), "rule__ConflictResolutionSpecification__RuleAssignment_7");
			builder.put(grammarAccess.getConflictResolutionSpecificationAccess().getResolutionAssignment_11(), "rule__ConflictResolutionSpecification__ResolutionAssignment_11");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getPipelineAssignment_3(), "rule__Variable__PipelineAssignment_3");
			builder.put(grammarAccess.getVariableReferenceAccess().getRefAssignment(), "rule__VariableReference__RefAssignment");
			builder.put(grammarAccess.getPipelineAccess().getStartAssignment(), "rule__Pipeline__StartAssignment");
			builder.put(grammarAccess.getPipelineStageSrcAccess().getNameAssignment_0(), "rule__PipelineStageSrc__NameAssignment_0");
			builder.put(grammarAccess.getPipelineStageSrcAccess().getNextAssignment_2(), "rule__PipelineStageSrc__NextAssignment_2");
			builder.put(grammarAccess.getPipelineStageTrgAccess().getNameAssignment_0(), "rule__PipelineStageTrg__NameAssignment_0");
			builder.put(grammarAccess.getPipelineStageTrgAccess().getNextAssignment_2(), "rule__PipelineStageTrg__NextAssignment_2");
			builder.put(grammarAccess.getPipelineStageCreatedAccess().getNameAssignment_0(), "rule__PipelineStageCreated__NameAssignment_0");
			builder.put(grammarAccess.getPipelineStageCreatedAccess().getNextAssignment_2(), "rule__PipelineStageCreated__NextAssignment_2");
			builder.put(grammarAccess.getPipelineStageDeletedAccess().getNameAssignment_0(), "rule__PipelineStageDeleted__NameAssignment_0");
			builder.put(grammarAccess.getPipelineStageDeletedAccess().getNextAssignment_2(), "rule__PipelineStageDeleted__NextAssignment_2");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getNameAssignment_0(), "rule__PipelineStageType__NameAssignment_0");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getTypesAssignment_1(), "rule__PipelineStageType__TypesAssignment_1");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getTypesAssignment_2_1(), "rule__PipelineStageType__TypesAssignment_2_1");
			builder.put(grammarAccess.getPipelineStageTypeAccess().getNextAssignment_4(), "rule__PipelineStageType__NextAssignment_4");
			builder.put(grammarAccess.getPipelineStageCountAccess().getNameAssignment(), "rule__PipelineStageCount__NameAssignment");
			builder.put(grammarAccess.getPipelineStageExistsAccess().getNameAssignment(), "rule__PipelineStageExists__NameAssignment");
			builder.put(grammarAccess.getSatisfactionRuleAccess().getExpressionAssignment(), "rule__SatisfactionRule__ExpressionAssignment");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBooleanExpressionAccess().getInvertAssignment_0(), "rule__BooleanExpression__InvertAssignment_0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getExpressionAssignment_1(), "rule__BooleanExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getWrappedOrExpressionAccess().getExpressionAssignment_1(), "rule__WrappedOrExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getLhsAssignment_0(), "rule__ComparisonExpression__LhsAssignment_0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1(), "rule__ComparisonExpression__OpAssignment_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRhsAssignment_2(), "rule__ComparisonExpression__RhsAssignment_2");
			builder.put(grammarAccess.getLiteralValueAccess().getValueAssignment(), "rule__LiteralValue__ValueAssignment");
			builder.put(grammarAccess.getResolutionAccess().getStrategiesAssignment_0(), "rule__Resolution__StrategiesAssignment_0");
			builder.put(grammarAccess.getResolutionAccess().getStrategiesAssignment_1_1(), "rule__Resolution__StrategiesAssignment_1_1");
			builder.put(grammarAccess.getResolutionAccess().getFallbackAssignment_2(), "rule__Resolution__FallbackAssignment_2");
			builder.put(grammarAccess.getResolutionStrategyWithOperationalDeltaAccess().getStrategyAssignment_0(), "rule__ResolutionStrategyWithOperationalDelta__StrategyAssignment_0");
			builder.put(grammarAccess.getResolutionStrategyWithOperationalDeltaAccess().getOperationalDeltaAssignment_1_2(), "rule__ResolutionStrategyWithOperationalDelta__OperationalDeltaAssignment_1_2");
			builder.put(grammarAccess.getMergeAndPreserveResolutionStrategyAccess().getNameAssignment(), "rule__MergeAndPreserveResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getRevokeAdditionResolutionStrategyAccess().getNameAssignment(), "rule__RevokeAdditionResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getRevokeDeletionResolutionStrategyAccess().getNameAssignment(), "rule__RevokeDeletionResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getPreferSourceResolutionStrategyAccess().getNameAssignment(), "rule__PreferSourceResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getPreferTargetResolutionStrategyAccess().getNameAssignment(), "rule__PreferTargetResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getDeleteCorrespondencesResolutionStrategyAccess().getNameAssignment(), "rule__DeleteCorrespondencesResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getContinueResolutionStrategyAccess().getNameAssignment(), "rule__ContinueResolutionStrategy__NameAssignment");
			builder.put(grammarAccess.getOperationalDeltaAccess().getVariablesAssignment_0(), "rule__OperationalDelta__VariablesAssignment_0");
			builder.put(grammarAccess.getOperationalDeltaAccess().getRuleAssignment_3(), "rule__OperationalDelta__RuleAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IntegrateGrammarAccess grammarAccess;

	@Override
	protected InternalIntegrateParser createParser() {
		InternalIntegrateParser result = new InternalIntegrateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IntegrateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IntegrateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
