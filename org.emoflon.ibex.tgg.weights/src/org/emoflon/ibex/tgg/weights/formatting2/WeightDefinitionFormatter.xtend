/*
 * generated by Xtext 2.14.0
 */
package org.emoflon.ibex.tgg.weights.formatting2



import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter
import org.emoflon.ibex.tgg.weights.weightDefinition.DefaultCalculation
import org.emoflon.ibex.tgg.weights.weightDefinition.HelperFuncParameter
import org.emoflon.ibex.tgg.weights.weightDefinition.HelperFunction
import org.emoflon.ibex.tgg.weights.weightDefinition.Import
import org.emoflon.ibex.tgg.weights.weightDefinition.RuleWeightDefinition
import org.emoflon.ibex.tgg.weights.weightDefinition.VariableDeclaration
import org.emoflon.ibex.tgg.weights.weightDefinition.WeightDefinitionFile
import org.emoflon.ibex.tgg.weights.weightDefinition.WeightDefinitionPackage

class WeightDefinitionFormatter extends XbaseFormatter {

	def dispatch void format(WeightDefinitionFile weightDefinitionFile, extension IFormattableDocument document) {
		weightDefinitionFile.importedTgg.format
		for (xExpression : weightDefinitionFile.weigthDefinitions) {
			xExpression.format
		}
		for (xExpression : weightDefinitionFile.defaultCalc) {
			xExpression.format
		}
		for (xExpression : weightDefinitionFile.helperFuntions) {
			xExpression.format
		}
		for (variableDeclaration : weightDefinitionFile.variables) {
			variableDeclaration.format
		}
	}

	def dispatch void format(Import importDeclaration, extension IFormattableDocument document) {
		importDeclaration.prepend[noSpace].append[newLines = 2]
		importDeclaration.regionFor.keyword("import").append[oneSpace]
	}

	def dispatch void format(VariableDeclaration variableDeclaration, extension IFormattableDocument document) {
		variableDeclaration.parameterType.format
		variableDeclaration.append[newLines = 2]
		variableDeclaration.regionFor.keyword("var").append[oneSpace]
		variableDeclaration.regionFor.feature(WeightDefinitionPackage.Literals.VARIABLE_DECLARATION__PARAMETER_TYPE).
			append[oneSpace]
	}

	def dispatch void format(RuleWeightDefinition ruleWeightDefinition, extension IFormattableDocument document) {
		ruleWeightDefinition.weightCalc.format
		ruleWeightDefinition.append[newLines = 2]
		ruleWeightDefinition.regionFor.keyword("rule").append[oneSpace]
		ruleWeightDefinition.regionFor.feature(WeightDefinitionPackage.Literals.RULE_WEIGHT_DEFINITION__RULE).append [
			oneSpace
		]
	}

	def dispatch void format(DefaultCalculation defaultCalculation, extension IFormattableDocument document) {
		defaultCalculation.calc.format
		defaultCalculation.append[newLines = 2]
		defaultCalculation.regionFor.keyword("default").append[oneSpace]
	}

	def dispatch void format(HelperFunction helperFunction, extension IFormattableDocument document) {
		helperFunction.returnType.format
		helperFunction.body.format
		helperFunction.params.forEach[format]
		helperFunction.append[newLines = 2]
		helperFunction.regionFor.keyword("function").append[oneSpace]
		helperFunction.regionFor.feature(WeightDefinitionPackage.Literals.HELPER_FUNCTION__RETURN_TYPE).append[oneSpace]
		helperFunction.regionFor.feature(WeightDefinitionPackage.Literals.HELPER_FUNCTION__NAME).append[noSpace]
		helperFunction.regionFor.feature(WeightDefinitionPackage.Literals.HELPER_FUNCTION__PARAMS).append[noSpace]
		helperFunction.regionFor.keyword(",").append[oneSpace]
		helperFunction.regionFor.keyword("(").append[noSpace]
		helperFunction.regionFor.keyword(")").append[oneSpace]
	}

	def dispatch void format(HelperFuncParameter helperFuncParameter, extension IFormattableDocument document) {
		helperFuncParameter.parameterType.format
		helperFuncParameter.regionFor.feature(WeightDefinitionPackage.Literals.HELPER_FUNC_PARAMETER__PARAMETER_TYPE).
			append[oneSpace]
	}
}
