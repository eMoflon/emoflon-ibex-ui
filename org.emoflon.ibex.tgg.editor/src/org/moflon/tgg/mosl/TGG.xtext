/* 
 * Warning: Do not try to refactor the grammar by extracting keywords as rules!
 * Xtext handles rules differently and this will adversely affect syntax highlighting etc.
 */

grammar org.moflon.tgg.mosl.TGG with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate tgg "http://www.moflon.org/ide/tgg/mosl/TGG"

TripleGraphGrammarFile:
	imports += Import*	
	using += Using*	
	(schema = Schema)?
  	(rules += Rule)*
  	(complementRules += ComplementRule)*
  	(nacs += Nac)*
  	(library = AttrCondDefLibrary)?
;

/* ---------- */
/*   SCHEMA   */
/* ---------- */

Schema:
	'#schema' name = QualifiedName
		
	('#source' '{'
		sourceTypes += [ecore::EPackage | QualifiedName]*
	'}')? 
	
	('#target' '{'
		targetTypes += [ecore::EPackage | QualifiedName]*
	'}')? 

	('#correspondence' '{'
		correspondenceTypes += CorrType*
	'}')?	
	
	('#attributeConditions' '{'
		attributeCondDefs += AttrCondDef*
	'}')? 
;

CorrType:
	name = ID (('#extends' super=[CorrType]) | ('{'
		'#src->' source = [ecore::EClass | QualifiedName]  
		'#trg->' target = [ecore::EClass | QualifiedName]
	'}'))
;

AttrCondDef:
	(userDefined ?= '#userDefined')? name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
		'#sync:'
			allowedSyncAdornments += Adornment (',' allowedSyncAdornments += Adornment)*
		('#gen:'
			(allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?)?
	'}'
;

Param:
	paramName = ID ':' (type = [ecore::EDataType | QualifiedName])
;

/* ------------- */
/*   TGG RULES   */
/* ------------- */

Rule:
	(abstractRule ?= '#abstract')? '#rule' name = ID ('#extends' supertypes += [Rule] (',' supertypes += [Rule])*)? '#with' schema = [Schema | QualifiedName]
		
	('#source' '{'
		sourcePatterns += ObjectVariablePattern* 
	'}')? 	
	
	('#target' '{'
		targetPatterns += ObjectVariablePattern* 
	'}')? 
	
	('#correspondence' '{'
		correspondencePatterns += CorrVariablePattern*	
	'}')? 

	('#attributeConditions' '{'
		attrConditions += AttrCond*
	'}')? 
;

AttrCond:
	name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')'
;

AttrCondDefLibrary:
	'#library' name = QualifiedName
	('{'
		attributeCondDefs += AttrCondDef*
	'}')?
;

Adornment:
	'[' value += ('B'|'F')+ ']'
;


ParamValue:
	(LocalVariable | Expression)
;

LocalVariable:
	name = ID
;

CorrVariablePattern:
	(op=Operator)? name = ID ':' type = [CorrType | QualifiedName] '{'
		'#src->' source = [ObjectVariablePattern]
		'#trg->' target = [ObjectVariablePattern]
	'}' 
;

ObjectVariablePattern:
	(op=Operator)? name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		attributeAssignments += AttributeAssignment*
		attributeConstraints += AttributeConstraint*
		linkVariablePatterns += LinkVariablePattern*
	'}')? 
;

ContextObjectVariablePattern:
	name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		attributeConstraints += AttributeConstraint*
		linkVariablePatterns += ContextLinkVariablePattern*
	'}')? 
;

AttributeConstraint:
	attribute = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
;

AttributeAssignment:
	attribute = [ecore::EAttribute] op=':=' valueExp = Expression
;

Expression:
	(LiteralExpression | AttributeExpression | EnumExpression)
;

EnumExpression:
	 'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]  
;

AttributeExpression:
	objectVar = [ecore::EObject] '.' attribute = [ecore::EAttribute]
;

LiteralExpression:
	value = LiteralValue
;

LinkVariablePattern:
	(op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern]
;

ContextLinkVariablePattern:
	'-' type = [ecore::EReference] '->' target = [ContextObjectVariablePattern]
;

Operator:
	value='++'
;

/* ------------- */
/*   COMPLEMENT RULES   */
/* ------------- */

ComplementRule:
	'#complement' name = ID '#for' kernel = [Rule]
		
	('#source' '{'
		sourcePatterns += ObjectVariablePattern* 
	'}')? 	
	
	('#target' '{'
		targetPatterns += ObjectVariablePattern* 
	'}')? 
	
	('#correspondence' '{'
		correspondencePatterns += CorrVariablePattern*	
	'}')? 

	('#attributeConditions' '{'
		attrConditions += AttrCond*
	'}')? 
;

/* ------------ */
/*    NACs      */
/* ------------ */

Nac:
	'#nac' name = ID '#for' rule = [Rule]
		
	(
	'#source' '{'
		sourcePatterns += ContextObjectVariablePattern* 
	'}'
	|
	'#target' '{'
		targetPatterns += ContextObjectVariablePattern* 
	'}'
	) 

	('#attributeConditions' '{'
		attrConditions += AttrCond*
	'}')? 
;


/* ---------------- */
/*    Auxiliaries   */
/* ---------------- */

Import:
	'#import' name = STRING
;

Using:
	'#using' importedNamespace = QualifiedNameWithWildcard
;

terminal DECIMAL: INT '.' INT;

LiteralValue:
	(STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
;

terminal BOOL:
	'true' | 'false'
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;


// some head classes for better OOP aspects

OperatorPattern:
	NamePattern | LinkVariablePattern
;

NamedElements:
	 Rule | ComplementRule | Schema | CorrType | AttrCondDef | NamePattern | AttrCondDefLibrary | Nac
;

NamePattern:
	CorrVariablePattern | ObjectVariablePattern 
;
