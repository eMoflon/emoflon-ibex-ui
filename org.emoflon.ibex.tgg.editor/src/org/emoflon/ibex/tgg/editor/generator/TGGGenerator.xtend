/*
 * generated by Xtext 2.26.0
 */
package org.emoflon.ibex.tgg.editor.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.jdt.internal.core.JavaProject
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.SynchronizedXtextResourceSet
import org.emoflon.ibex.tgg.editor.builder.TGGBuilderExtension
import org.emoflon.ibex.tgg.editor.tgg.TripleGraphGrammarFile
import org.moflon.core.utilities.ExtensionsUtil

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TGGGenerator extends AbstractGenerator {
	
	var oldFsa = null
		
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var lResource = input.resourceSet as SynchronizedXtextResourceSet
		val project = lResource.classpathURIContext as JavaProject
		val iProject = project.project
		
		val xtextParsedTGG = input.getContents().get(0) as TripleGraphGrammarFile;
		if(xtextParsedTGG.schema === null)
			return;
			
		// trick to avoid xtext triggering endless loops
		if(oldFsa !== null && oldFsa.hashCode == fsa.hashCode) 
			return;
		
		this.oldFsa = fsa
		
		ExtensionsUtil
			.collectExtensions(TGGBuilderExtension.BUILDER_EXTENSON_ID, "class", typeof(TGGBuilderExtension))
			.forEach[builder | builder.run(iProject, input)];
	}
		
}
