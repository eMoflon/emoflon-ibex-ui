/*
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.tgg.editor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TGGGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TripleGraphGrammarFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.TripleGraphGrammarFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cUsingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsingUsingParserRuleCall_1_0 = (RuleCall)cUsingAssignment_1.eContents().get(0);
		private final Assignment cSchemaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemaSchemaParserRuleCall_2_0 = (RuleCall)cSchemaAssignment_2.eContents().get(0);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Assignment cLibraryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLibraryAttrCondDefLibraryParserRuleCall_4_0 = (RuleCall)cLibraryAssignment_4.eContents().get(0);
		
		//TripleGraphGrammarFile:
		//    imports += Import*
		//    using += Using*
		//    (schema = Schema)?
		//      (rules += Rule)*
		//      (library = AttrCondDefLibrary)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//imports += Import*
		//using += Using*
		//(schema = Schema)?
		//  (rules += Rule)*
		//  (library = AttrCondDefLibrary)?
		public Group getGroup() { return cGroup; }
		
		//imports += Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//using += Using*
		public Assignment getUsingAssignment_1() { return cUsingAssignment_1; }
		
		//Using
		public RuleCall getUsingUsingParserRuleCall_1_0() { return cUsingUsingParserRuleCall_1_0; }
		
		//(schema = Schema)?
		public Assignment getSchemaAssignment_2() { return cSchemaAssignment_2; }
		
		//Schema
		public RuleCall getSchemaSchemaParserRuleCall_2_0() { return cSchemaSchemaParserRuleCall_2_0; }
		
		//(rules += Rule)*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0() { return cRulesRuleParserRuleCall_3_0; }
		
		//(library = AttrCondDefLibrary)?
		public Assignment getLibraryAssignment_4() { return cLibraryAssignment_4; }
		
		//AttrCondDefLibrary
		public RuleCall getLibraryAttrCondDefLibraryParserRuleCall_4_0() { return cLibraryAttrCondDefLibraryParserRuleCall_4_0; }
	}
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSourceTypesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cSourceTypesEPackageCrossReference_2_2_0 = (CrossReference)cSourceTypesAssignment_2_2.eContents().get(0);
		private final RuleCall cSourceTypesEPackageQualifiedNameParserRuleCall_2_2_0_1 = (RuleCall)cSourceTypesEPackageCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTargetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTargetTypesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cTargetTypesEPackageCrossReference_3_2_0 = (CrossReference)cTargetTypesAssignment_3_2.eContents().get(0);
		private final RuleCall cTargetTypesEPackageQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cTargetTypesEPackageCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCorrespondenceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCorrespondenceTypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCorrespondenceTypesCorrTypeParserRuleCall_4_2_0 = (RuleCall)cCorrespondenceTypesAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributeConditionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttributeCondDefsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAttributeCondDefsAttrCondDefParserRuleCall_5_2_0 = (RuleCall)cAttributeCondDefsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		///* ---------- */
		///*   SCHEMA   */
		///* ---------- */
		//Schema:
		//    '#schema' name = QualifiedName
		//    ('#source' '{'
		//        sourceTypes += [ecore::EPackage | QualifiedName]*
		//    '}')?
		//    ('#target' '{'
		//        targetTypes += [ecore::EPackage | QualifiedName]*
		//    '}')?
		//    ('#correspondence' '{'
		//        correspondenceTypes += CorrType*
		//    '}')?
		//    ('#attributeConditions' '{'
		//        attributeCondDefs += AttrCondDef*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#schema' name = QualifiedName
		//('#source' '{'
		//    sourceTypes += [ecore::EPackage | QualifiedName]*
		//'}')?
		//('#target' '{'
		//    targetTypes += [ecore::EPackage | QualifiedName]*
		//'}')?
		//('#correspondence' '{'
		//    correspondenceTypes += CorrType*
		//'}')?
		//('#attributeConditions' '{'
		//    attributeCondDefs += AttrCondDef*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'#schema'
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }
		
		//name = QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//('#source' '{'
		//    sourceTypes += [ecore::EPackage | QualifiedName]*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'#source'
		public Keyword getSourceKeyword_2_0() { return cSourceKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//sourceTypes += [ecore::EPackage | QualifiedName]*
		public Assignment getSourceTypesAssignment_2_2() { return cSourceTypesAssignment_2_2; }
		
		//[ecore::EPackage | QualifiedName]
		public CrossReference getSourceTypesEPackageCrossReference_2_2_0() { return cSourceTypesEPackageCrossReference_2_2_0; }
		
		//QualifiedName
		public RuleCall getSourceTypesEPackageQualifiedNameParserRuleCall_2_2_0_1() { return cSourceTypesEPackageQualifiedNameParserRuleCall_2_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//('#target' '{'
		//    targetTypes += [ecore::EPackage | QualifiedName]*
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#target'
		public Keyword getTargetKeyword_3_0() { return cTargetKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//targetTypes += [ecore::EPackage | QualifiedName]*
		public Assignment getTargetTypesAssignment_3_2() { return cTargetTypesAssignment_3_2; }
		
		//[ecore::EPackage | QualifiedName]
		public CrossReference getTargetTypesEPackageCrossReference_3_2_0() { return cTargetTypesEPackageCrossReference_3_2_0; }
		
		//QualifiedName
		public RuleCall getTargetTypesEPackageQualifiedNameParserRuleCall_3_2_0_1() { return cTargetTypesEPackageQualifiedNameParserRuleCall_3_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//('#correspondence' '{'
		//    correspondenceTypes += CorrType*
		//'}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'#correspondence'
		public Keyword getCorrespondenceKeyword_4_0() { return cCorrespondenceKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//correspondenceTypes += CorrType*
		public Assignment getCorrespondenceTypesAssignment_4_2() { return cCorrespondenceTypesAssignment_4_2; }
		
		//CorrType
		public RuleCall getCorrespondenceTypesCorrTypeParserRuleCall_4_2_0() { return cCorrespondenceTypesCorrTypeParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('#attributeConditions' '{'
		//    attributeCondDefs += AttrCondDef*
		//'}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'#attributeConditions'
		public Keyword getAttributeConditionsKeyword_5_0() { return cAttributeConditionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//attributeCondDefs += AttrCondDef*
		public Assignment getAttributeCondDefsAssignment_5_2() { return cAttributeCondDefsAssignment_5_2; }
		
		//AttrCondDef
		public RuleCall getAttributeCondDefsAttrCondDefParserRuleCall_5_2_0() { return cAttributeCondDefsAttrCondDefParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class CorrTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.CorrType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExtendsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cSuperAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cSuperCorrTypeCrossReference_1_0_1_0 = (CrossReference)cSuperAssignment_1_0_1.eContents().get(0);
		private final RuleCall cSuperCorrTypeIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cSuperCorrTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cSrcKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSourceAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cSourceEClassCrossReference_1_1_2_0 = (CrossReference)cSourceAssignment_1_1_2.eContents().get(0);
		private final RuleCall cSourceEClassQualifiedNameParserRuleCall_1_1_2_0_1 = (RuleCall)cSourceEClassCrossReference_1_1_2_0.eContents().get(1);
		private final Keyword cTrgKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cTargetAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final CrossReference cTargetEClassCrossReference_1_1_4_0 = (CrossReference)cTargetAssignment_1_1_4.eContents().get(0);
		private final RuleCall cTargetEClassQualifiedNameParserRuleCall_1_1_4_0_1 = (RuleCall)cTargetEClassCrossReference_1_1_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//CorrType:
		//    name = ID (('#extends' super=[CorrType]) | ('{'
		//        '#src->' source = [ecore::EClass | QualifiedName]
		//        '#trg->' target = [ecore::EClass | QualifiedName]
		//    '}'))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (('#extends' super=[CorrType]) | ('{'
		//    '#src->' source = [ecore::EClass | QualifiedName]
		//    '#trg->' target = [ecore::EClass | QualifiedName]
		//'}'))
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(('#extends' super=[CorrType]) | ('{'
		//       '#src->' source = [ecore::EClass | QualifiedName]
		//       '#trg->' target = [ecore::EClass | QualifiedName]
		//   '}'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('#extends' super=[CorrType])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'#extends'
		public Keyword getExtendsKeyword_1_0_0() { return cExtendsKeyword_1_0_0; }
		
		//super=[CorrType]
		public Assignment getSuperAssignment_1_0_1() { return cSuperAssignment_1_0_1; }
		
		//[CorrType]
		public CrossReference getSuperCorrTypeCrossReference_1_0_1_0() { return cSuperCorrTypeCrossReference_1_0_1_0; }
		
		//ID
		public RuleCall getSuperCorrTypeIDTerminalRuleCall_1_0_1_0_1() { return cSuperCorrTypeIDTerminalRuleCall_1_0_1_0_1; }
		
		//('{'
		//       '#src->' source = [ecore::EClass | QualifiedName]
		//       '#trg->' target = [ecore::EClass | QualifiedName]
		//   '}')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//'#src->'
		public Keyword getSrcKeyword_1_1_1() { return cSrcKeyword_1_1_1; }
		
		//source = [ecore::EClass | QualifiedName]
		public Assignment getSourceAssignment_1_1_2() { return cSourceAssignment_1_1_2; }
		
		//[ecore::EClass | QualifiedName]
		public CrossReference getSourceEClassCrossReference_1_1_2_0() { return cSourceEClassCrossReference_1_1_2_0; }
		
		//QualifiedName
		public RuleCall getSourceEClassQualifiedNameParserRuleCall_1_1_2_0_1() { return cSourceEClassQualifiedNameParserRuleCall_1_1_2_0_1; }
		
		//'#trg->'
		public Keyword getTrgKeyword_1_1_3() { return cTrgKeyword_1_1_3; }
		
		//target = [ecore::EClass | QualifiedName]
		public Assignment getTargetAssignment_1_1_4() { return cTargetAssignment_1_1_4; }
		
		//[ecore::EClass | QualifiedName]
		public CrossReference getTargetEClassCrossReference_1_1_4_0() { return cTargetEClassCrossReference_1_1_4_0; }
		
		//QualifiedName
		public RuleCall getTargetEClassQualifiedNameParserRuleCall_1_1_4_0_1() { return cTargetEClassQualifiedNameParserRuleCall_1_1_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_5() { return cRightCurlyBracketKeyword_1_1_5; }
	}
	public class AttrCondDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttrCondDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUserDefinedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUserDefinedUserDefinedKeyword_0_0 = (Keyword)cUserDefinedAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSyncKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAllowedSyncAdornmentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAllowedSyncAdornmentsAdornmentParserRuleCall_7_0 = (RuleCall)cAllowedSyncAdornmentsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAllowedSyncAdornmentsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAllowedSyncAdornmentsAdornmentParserRuleCall_8_1_0 = (RuleCall)cAllowedSyncAdornmentsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cGenKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Assignment cAllowedGenAdornmentsAssignment_9_1_0 = (Assignment)cGroup_9_1.eContents().get(0);
		private final RuleCall cAllowedGenAdornmentsAdornmentParserRuleCall_9_1_0_0 = (RuleCall)cAllowedGenAdornmentsAssignment_9_1_0.eContents().get(0);
		private final Group cGroup_9_1_1 = (Group)cGroup_9_1.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_1_0 = (Keyword)cGroup_9_1_1.eContents().get(0);
		private final Assignment cAllowedGenAdornmentsAssignment_9_1_1_1 = (Assignment)cGroup_9_1_1.eContents().get(1);
		private final RuleCall cAllowedGenAdornmentsAdornmentParserRuleCall_9_1_1_1_0 = (RuleCall)cAllowedGenAdornmentsAssignment_9_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AttrCondDef:
		//    (userDefined ?= '#userDefined')? name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
		//        '#sync:'
		//            allowedSyncAdornments += Adornment (',' allowedSyncAdornments += Adornment)*
		//        ('#gen:'
		//            (allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?)?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(userDefined ?= '#userDefined')? name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
		//    '#sync:'
		//        allowedSyncAdornments += Adornment (',' allowedSyncAdornments += Adornment)*
		//    ('#gen:'
		//        (allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(userDefined ?= '#userDefined')?
		public Assignment getUserDefinedAssignment_0() { return cUserDefinedAssignment_0; }
		
		//'#userDefined'
		public Keyword getUserDefinedUserDefinedKeyword_0_0() { return cUserDefinedUserDefinedKeyword_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params += Param (',' params += Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params += Param
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_0_0() { return cParamsParamParserRuleCall_3_0_0; }
		
		//(',' params += Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params += Param
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_1_1_0() { return cParamsParamParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'#sync:'
		public Keyword getSyncKeyword_6() { return cSyncKeyword_6; }
		
		//allowedSyncAdornments += Adornment
		public Assignment getAllowedSyncAdornmentsAssignment_7() { return cAllowedSyncAdornmentsAssignment_7; }
		
		//Adornment
		public RuleCall getAllowedSyncAdornmentsAdornmentParserRuleCall_7_0() { return cAllowedSyncAdornmentsAdornmentParserRuleCall_7_0; }
		
		//(',' allowedSyncAdornments += Adornment)*
		public Group getGroup_8() { return cGroup_8; }
		
		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//allowedSyncAdornments += Adornment
		public Assignment getAllowedSyncAdornmentsAssignment_8_1() { return cAllowedSyncAdornmentsAssignment_8_1; }
		
		//Adornment
		public RuleCall getAllowedSyncAdornmentsAdornmentParserRuleCall_8_1_0() { return cAllowedSyncAdornmentsAdornmentParserRuleCall_8_1_0; }
		
		//('#gen:'
		//    (allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#gen:'
		public Keyword getGenKeyword_9_0() { return cGenKeyword_9_0; }
		
		//(allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//allowedGenAdornments += Adornment
		public Assignment getAllowedGenAdornmentsAssignment_9_1_0() { return cAllowedGenAdornmentsAssignment_9_1_0; }
		
		//Adornment
		public RuleCall getAllowedGenAdornmentsAdornmentParserRuleCall_9_1_0_0() { return cAllowedGenAdornmentsAdornmentParserRuleCall_9_1_0_0; }
		
		//(',' allowedGenAdornments += Adornment )*
		public Group getGroup_9_1_1() { return cGroup_9_1_1; }
		
		//','
		public Keyword getCommaKeyword_9_1_1_0() { return cCommaKeyword_9_1_1_0; }
		
		//allowedGenAdornments += Adornment
		public Assignment getAllowedGenAdornmentsAssignment_9_1_1_1() { return cAllowedGenAdornmentsAssignment_9_1_1_1; }
		
		//Adornment
		public RuleCall getAllowedGenAdornmentsAdornmentParserRuleCall_9_1_1_1_0() { return cAllowedGenAdornmentsAdornmentParserRuleCall_9_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamNameIDTerminalRuleCall_0_0 = (RuleCall)cParamNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEDataTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEDataTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeEDataTypeCrossReference_2_0.eContents().get(1);
		
		//Param:
		//    paramName = ID ':' (type = [ecore::EDataType | QualifiedName])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//paramName = ID ':' (type = [ecore::EDataType | QualifiedName])
		public Group getGroup() { return cGroup; }
		
		//paramName = ID
		public Assignment getParamNameAssignment_0() { return cParamNameAssignment_0; }
		
		//ID
		public RuleCall getParamNameIDTerminalRuleCall_0_0() { return cParamNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(type = [ecore::EDataType | QualifiedName])
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ecore::EDataType | QualifiedName]
		public CrossReference getTypeEDataTypeCrossReference_2_0() { return cTypeEDataTypeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeEDataTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeEDataTypeQualifiedNameParserRuleCall_2_0_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractRuleAbstractKeyword_0_0 = (Keyword)cAbstractRuleAssignment_0.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSupertypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSupertypesRuleCrossReference_3_1_0 = (CrossReference)cSupertypesAssignment_3_1.eContents().get(0);
		private final RuleCall cSupertypesRuleIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSupertypesRuleCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSupertypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSupertypesRuleCrossReference_3_2_1_0 = (CrossReference)cSupertypesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSupertypesRuleIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cSupertypesRuleCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSchemaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSchemaSchemaCrossReference_5_0 = (CrossReference)cSchemaAssignment_5.eContents().get(0);
		private final RuleCall cSchemaSchemaQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cSchemaSchemaCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSourceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSourcePatternsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSourcePatternsObjectVariablePatternParserRuleCall_6_2_0 = (RuleCall)cSourcePatternsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTargetKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTargetPatternsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cTargetPatternsObjectVariablePatternParserRuleCall_7_2_0 = (RuleCall)cTargetPatternsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCorrespondenceKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cCorrespondencePatternsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cCorrespondencePatternsCorrVariablePatternParserRuleCall_8_2_0 = (RuleCall)cCorrespondencePatternsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAttributeConditionsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cAttrConditionsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cAttrConditionsAttrCondParserRuleCall_9_2_0 = (RuleCall)cAttrConditionsAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		///* ------------- */
		///*   TGG RULES   */
		///* ------------- */
		//Rule:
		//    (abstractRule ?= '#abstract')? '#rule' name = ID ('#extends' supertypes += [Rule] (',' supertypes += [Rule])*)? '#with' schema = [Schema | QualifiedName]
		//    ('#source' '{'
		//        sourcePatterns += ObjectVariablePattern*
		//    '}')?
		//    ('#target' '{'
		//        targetPatterns += ObjectVariablePattern*
		//    '}')?
		//    ('#correspondence' '{'
		//        correspondencePatterns += CorrVariablePattern*
		//    '}')?
		//    ('#attributeConditions' '{'
		//        attrConditions += AttrCond*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(abstractRule ?= '#abstract')? '#rule' name = ID ('#extends' supertypes += [Rule] (',' supertypes += [Rule])*)? '#with' schema = [Schema | QualifiedName]
		//('#source' '{'
		//    sourcePatterns += ObjectVariablePattern*
		//'}')?
		//('#target' '{'
		//    targetPatterns += ObjectVariablePattern*
		//'}')?
		//('#correspondence' '{'
		//    correspondencePatterns += CorrVariablePattern*
		//'}')?
		//('#attributeConditions' '{'
		//    attrConditions += AttrCond*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//(abstractRule ?= '#abstract')?
		public Assignment getAbstractRuleAssignment_0() { return cAbstractRuleAssignment_0; }
		
		//'#abstract'
		public Keyword getAbstractRuleAbstractKeyword_0_0() { return cAbstractRuleAbstractKeyword_0_0; }
		
		//'#rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('#extends' supertypes += [Rule] (',' supertypes += [Rule])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//supertypes += [Rule]
		public Assignment getSupertypesAssignment_3_1() { return cSupertypesAssignment_3_1; }
		
		//[Rule]
		public CrossReference getSupertypesRuleCrossReference_3_1_0() { return cSupertypesRuleCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSupertypesRuleIDTerminalRuleCall_3_1_0_1() { return cSupertypesRuleIDTerminalRuleCall_3_1_0_1; }
		
		//(',' supertypes += [Rule])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//supertypes += [Rule]
		public Assignment getSupertypesAssignment_3_2_1() { return cSupertypesAssignment_3_2_1; }
		
		//[Rule]
		public CrossReference getSupertypesRuleCrossReference_3_2_1_0() { return cSupertypesRuleCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getSupertypesRuleIDTerminalRuleCall_3_2_1_0_1() { return cSupertypesRuleIDTerminalRuleCall_3_2_1_0_1; }
		
		//'#with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//schema = [Schema | QualifiedName]
		public Assignment getSchemaAssignment_5() { return cSchemaAssignment_5; }
		
		//[Schema | QualifiedName]
		public CrossReference getSchemaSchemaCrossReference_5_0() { return cSchemaSchemaCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getSchemaSchemaQualifiedNameParserRuleCall_5_0_1() { return cSchemaSchemaQualifiedNameParserRuleCall_5_0_1; }
		
		//('#source' '{'
		//    sourcePatterns += ObjectVariablePattern*
		//'}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'#source'
		public Keyword getSourceKeyword_6_0() { return cSourceKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//sourcePatterns += ObjectVariablePattern*
		public Assignment getSourcePatternsAssignment_6_2() { return cSourcePatternsAssignment_6_2; }
		
		//ObjectVariablePattern
		public RuleCall getSourcePatternsObjectVariablePatternParserRuleCall_6_2_0() { return cSourcePatternsObjectVariablePatternParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('#target' '{'
		//    targetPatterns += ObjectVariablePattern*
		//'}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'#target'
		public Keyword getTargetKeyword_7_0() { return cTargetKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//targetPatterns += ObjectVariablePattern*
		public Assignment getTargetPatternsAssignment_7_2() { return cTargetPatternsAssignment_7_2; }
		
		//ObjectVariablePattern
		public RuleCall getTargetPatternsObjectVariablePatternParserRuleCall_7_2_0() { return cTargetPatternsObjectVariablePatternParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//('#correspondence' '{'
		//    correspondencePatterns += CorrVariablePattern*
		//'}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'#correspondence'
		public Keyword getCorrespondenceKeyword_8_0() { return cCorrespondenceKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//correspondencePatterns += CorrVariablePattern*
		public Assignment getCorrespondencePatternsAssignment_8_2() { return cCorrespondencePatternsAssignment_8_2; }
		
		//CorrVariablePattern
		public RuleCall getCorrespondencePatternsCorrVariablePatternParserRuleCall_8_2_0() { return cCorrespondencePatternsCorrVariablePatternParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//('#attributeConditions' '{'
		//    attrConditions += AttrCond*
		//'}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#attributeConditions'
		public Keyword getAttributeConditionsKeyword_9_0() { return cAttributeConditionsKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//attrConditions += AttrCond*
		public Assignment getAttrConditionsAssignment_9_2() { return cAttrConditionsAssignment_9_2; }
		
		//AttrCond
		public RuleCall getAttrConditionsAttrCondParserRuleCall_9_2_0() { return cAttrConditionsAttrCondParserRuleCall_9_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }
	}
	public class AttrCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttrCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameAttrCondDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameAttrCondDefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameAttrCondDefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesParamValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesParamValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttrCond:
		//    name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name = [AttrCondDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[AttrCondDef]
		public CrossReference getNameAttrCondDefCrossReference_0_0() { return cNameAttrCondDefCrossReference_0_0; }
		
		//ID
		public RuleCall getNameAttrCondDefIDTerminalRuleCall_0_0_1() { return cNameAttrCondDefIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(values += ParamValue (',' values += ParamValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values += ParamValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//ParamValue
		public RuleCall getValuesParamValueParserRuleCall_2_0_0() { return cValuesParamValueParserRuleCall_2_0_0; }
		
		//(',' values += ParamValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values += ParamValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//ParamValue
		public RuleCall getValuesParamValueParserRuleCall_2_1_1_0() { return cValuesParamValueParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AttrCondDefLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttrCondDefLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeCondDefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeCondDefsAttrCondDefParserRuleCall_2_1_0 = (RuleCall)cAttributeCondDefsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//AttrCondDefLibrary:
		//    '#library' name = QualifiedName
		//    ('{'
		//        attributeCondDefs += AttrCondDef*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#library' name = QualifiedName
		//('{'
		//    attributeCondDefs += AttrCondDef*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'#library'
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }
		
		//name = QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//('{'
		//    attributeCondDefs += AttrCondDef*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributeCondDefs += AttrCondDef*
		public Assignment getAttributeCondDefsAssignment_2_1() { return cAttributeCondDefsAssignment_2_1; }
		
		//AttrCondDef
		public RuleCall getAttributeCondDefsAttrCondDefParserRuleCall_2_1_0() { return cAttributeCondDefsAttrCondDefParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class AdornmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Adornment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueBKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Adornment:
		//    '[' value += ('B'|'F')+ ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' value += ('B'|'F')+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//value += ('B'|'F')+
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//('B'|'F')
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//'B'
		public Keyword getValueBKeyword_1_0_0() { return cValueBKeyword_1_0_0; }
		
		//'F'
		public Keyword getValueFKeyword_1_0_1() { return cValueFKeyword_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ParamValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.ParamValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParamValue:
		//    (LocalVariable | Expression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(LocalVariable | Expression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_0() { return cLocalVariableParserRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.LocalVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LocalVariable:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CorrVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.CorrVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeCorrTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeCorrTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeCorrTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSrcKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourceObjectVariablePatternCrossReference_6_0 = (CrossReference)cSourceAssignment_6.eContents().get(0);
		private final RuleCall cSourceObjectVariablePatternIDTerminalRuleCall_6_0_1 = (RuleCall)cSourceObjectVariablePatternCrossReference_6_0.eContents().get(1);
		private final Keyword cTrgKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetObjectVariablePatternCrossReference_8_0 = (CrossReference)cTargetAssignment_8.eContents().get(0);
		private final RuleCall cTargetObjectVariablePatternIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetObjectVariablePatternCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CorrVariablePattern:
		//    (op=Operator)? name = ID ':' type = [CorrType | QualifiedName] '{'
		//        '#src->' source = [ObjectVariablePattern]
		//        '#trg->' target = [ObjectVariablePattern]
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(op=Operator)? name = ID ':' type = [CorrType | QualifiedName] '{'
		//    '#src->' source = [ObjectVariablePattern]
		//    '#trg->' target = [ObjectVariablePattern]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(op=Operator)?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type = [CorrType | QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[CorrType | QualifiedName]
		public CrossReference getTypeCorrTypeCrossReference_3_0() { return cTypeCorrTypeCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeCorrTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeCorrTypeQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'#src->'
		public Keyword getSrcKeyword_5() { return cSrcKeyword_5; }
		
		//source = [ObjectVariablePattern]
		public Assignment getSourceAssignment_6() { return cSourceAssignment_6; }
		
		//[ObjectVariablePattern]
		public CrossReference getSourceObjectVariablePatternCrossReference_6_0() { return cSourceObjectVariablePatternCrossReference_6_0; }
		
		//ID
		public RuleCall getSourceObjectVariablePatternIDTerminalRuleCall_6_0_1() { return cSourceObjectVariablePatternIDTerminalRuleCall_6_0_1; }
		
		//'#trg->'
		public Keyword getTrgKeyword_7() { return cTrgKeyword_7; }
		
		//target = [ObjectVariablePattern]
		public Assignment getTargetAssignment_8() { return cTargetAssignment_8; }
		
		//[ObjectVariablePattern]
		public CrossReference getTargetObjectVariablePatternCrossReference_8_0() { return cTargetObjectVariablePatternCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetObjectVariablePatternIDTerminalRuleCall_8_0_1() { return cTargetObjectVariablePatternIDTerminalRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ObjectVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.ObjectVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributeAssignmentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributeAssignmentsAttributeAssignmentParserRuleCall_4_1_0 = (RuleCall)cAttributeAssignmentsAssignment_4_1.eContents().get(0);
		private final Assignment cAttributeConstraintsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAttributeConstraintsAttributeConstraintParserRuleCall_4_2_0 = (RuleCall)cAttributeConstraintsAssignment_4_2.eContents().get(0);
		private final Assignment cLinkVariablePatternsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cLinkVariablePatternsLinkVariablePatternParserRuleCall_4_3_0 = (RuleCall)cLinkVariablePatternsAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//ObjectVariablePattern:
		//    (op=Operator)? name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		//        attributeAssignments += AttributeAssignment*
		//        attributeConstraints += AttributeConstraint*
		//        linkVariablePatterns += LinkVariablePattern*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(op=Operator)? name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		//    attributeAssignments += AttributeAssignment*
		//    attributeConstraints += AttributeConstraint*
		//    linkVariablePatterns += LinkVariablePattern*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//(op=Operator)?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type = [ecore::EClass | QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[ecore::EClass | QualifiedName]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_3_0_1() { return cTypeEClassQualifiedNameParserRuleCall_3_0_1; }
		
		//('{'
		//       attributeAssignments += AttributeAssignment*
		//       attributeConstraints += AttributeConstraint*
		//       linkVariablePatterns += LinkVariablePattern*
		//   '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//attributeAssignments += AttributeAssignment*
		public Assignment getAttributeAssignmentsAssignment_4_1() { return cAttributeAssignmentsAssignment_4_1; }
		
		//AttributeAssignment
		public RuleCall getAttributeAssignmentsAttributeAssignmentParserRuleCall_4_1_0() { return cAttributeAssignmentsAttributeAssignmentParserRuleCall_4_1_0; }
		
		//attributeConstraints += AttributeConstraint*
		public Assignment getAttributeConstraintsAssignment_4_2() { return cAttributeConstraintsAssignment_4_2; }
		
		//AttributeConstraint
		public RuleCall getAttributeConstraintsAttributeConstraintParserRuleCall_4_2_0() { return cAttributeConstraintsAttributeConstraintParserRuleCall_4_2_0; }
		
		//linkVariablePatterns += LinkVariablePattern*
		public Assignment getLinkVariablePatternsAssignment_4_3() { return cLinkVariablePatternsAssignment_4_3; }
		
		//LinkVariablePattern
		public RuleCall getLinkVariablePatternsLinkVariablePatternParserRuleCall_4_3_0() { return cLinkVariablePatternsLinkVariablePatternParserRuleCall_4_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
	}
	public class ContextObjectVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.ContextObjectVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributeConstraintsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributeConstraintsAttributeConstraintParserRuleCall_3_1_0 = (RuleCall)cAttributeConstraintsAssignment_3_1.eContents().get(0);
		private final Assignment cLinkVariablePatternsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLinkVariablePatternsContextLinkVariablePatternParserRuleCall_3_2_0 = (RuleCall)cLinkVariablePatternsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ContextObjectVariablePattern:
		//    name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		//        attributeConstraints += AttributeConstraint*
		//        linkVariablePatterns += ContextLinkVariablePattern*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
		//    attributeConstraints += AttributeConstraint*
		//    linkVariablePatterns += ContextLinkVariablePattern*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type = [ecore::EClass | QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ecore::EClass | QualifiedName]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_2_0_1() { return cTypeEClassQualifiedNameParserRuleCall_2_0_1; }
		
		//('{'
		//       attributeConstraints += AttributeConstraint*
		//       linkVariablePatterns += ContextLinkVariablePattern*
		//   '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributeConstraints += AttributeConstraint*
		public Assignment getAttributeConstraintsAssignment_3_1() { return cAttributeConstraintsAssignment_3_1; }
		
		//AttributeConstraint
		public RuleCall getAttributeConstraintsAttributeConstraintParserRuleCall_3_1_0() { return cAttributeConstraintsAttributeConstraintParserRuleCall_3_1_0; }
		
		//linkVariablePatterns += ContextLinkVariablePattern*
		public Assignment getLinkVariablePatternsAssignment_3_2() { return cLinkVariablePatternsAssignment_3_2; }
		
		//ContextLinkVariablePattern
		public RuleCall getLinkVariablePatternsContextLinkVariablePatternParserRuleCall_3_2_0() { return cLinkVariablePatternsContextLinkVariablePatternParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class AttributeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttributeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeEAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpLessThanSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Assignment cValueExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpExpressionParserRuleCall_2_0 = (RuleCall)cValueExpAssignment_2.eContents().get(0);
		
		//AttributeConstraint:
		//    attribute = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
		public Group getGroup() { return cGroup; }
		
		//attribute = [ecore::EAttribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0_0() { return cAttributeEAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_0_1; }
		
		//op=('==' | '!=' | '<=' | '>=' | '>' | '<')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('==' | '!=' | '<=' | '>=' | '>' | '<')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_4() { return cOpGreaterThanSignKeyword_1_0_4; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_5() { return cOpLessThanSignKeyword_1_0_5; }
		
		//valueExp = Expression
		public Assignment getValueExpAssignment_2() { return cValueExpAssignment_2; }
		
		//Expression
		public RuleCall getValueExpExpressionParserRuleCall_2_0() { return cValueExpExpressionParserRuleCall_2_0; }
	}
	public class AttributeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttributeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeEAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpColonEqualsSignKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cValueExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpExpressionParserRuleCall_2_0 = (RuleCall)cValueExpAssignment_2.eContents().get(0);
		
		//AttributeAssignment:
		//    attribute = [ecore::EAttribute] op=':=' valueExp = Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute = [ecore::EAttribute] op=':=' valueExp = Expression
		public Group getGroup() { return cGroup; }
		
		//attribute = [ecore::EAttribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0_0() { return cAttributeEAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_0_1; }
		
		//op=':='
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//':='
		public Keyword getOpColonEqualsSignKeyword_1_0() { return cOpColonEqualsSignKeyword_1_0; }
		
		//valueExp = Expression
		public Assignment getValueExpAssignment_2() { return cValueExpAssignment_2; }
		
		//Expression
		public RuleCall getValueExpExpressionParserRuleCall_2_0() { return cValueExpExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//    (EnumExpression | AttributeExpression | LiteralExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(EnumExpression | AttributeExpression | LiteralExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumExpression
		public RuleCall getEnumExpressionParserRuleCall_0() { return cEnumExpressionParserRuleCall_0; }
		
		//AttributeExpression
		public RuleCall getAttributeExpressionParserRuleCall_1() { return cAttributeExpressionParserRuleCall_1; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_2() { return cLiteralExpressionParserRuleCall_2; }
	}
	public class EnumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.EnumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEenumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEenumEEnumCrossReference_1_0 = (CrossReference)cEenumAssignment_1.eContents().get(0);
		private final RuleCall cEenumEEnumQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEenumEEnumCrossReference_1_0.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLiteralEEnumLiteralCrossReference_3_0 = (CrossReference)cLiteralAssignment_3.eContents().get(0);
		private final RuleCall cLiteralEEnumLiteralQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cLiteralEEnumLiteralCrossReference_3_0.eContents().get(1);
		
		//EnumExpression:
		//     'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'enum::'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//eenum=[ecore::EEnum | QualifiedName]
		public Assignment getEenumAssignment_1() { return cEenumAssignment_1; }
		
		//[ecore::EEnum | QualifiedName]
		public CrossReference getEenumEEnumCrossReference_1_0() { return cEenumEEnumCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getEenumEEnumQualifiedNameParserRuleCall_1_0_1() { return cEenumEEnumQualifiedNameParserRuleCall_1_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//literal = [ecore::EEnumLiteral | QualifiedName]
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }
		
		//[ecore::EEnumLiteral | QualifiedName]
		public CrossReference getLiteralEEnumLiteralCrossReference_3_0() { return cLiteralEEnumLiteralCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getLiteralEEnumLiteralQualifiedNameParserRuleCall_3_0_1() { return cLiteralEEnumLiteralQualifiedNameParserRuleCall_3_0_1; }
	}
	public class AttributeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.AttributeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_0_0 = (Keyword)cDerivedAssignment_0.eContents().get(0);
		private final Assignment cObjectVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjectVarEObjectCrossReference_1_0 = (CrossReference)cObjectVarAssignment_1.eContents().get(0);
		private final RuleCall cObjectVarEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cObjectVarEObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAttributeEAttributeCrossReference_3_0 = (CrossReference)cAttributeAssignment_3.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cAttributeEAttributeCrossReference_3_0.eContents().get(1);
		
		//AttributeExpression:
		//    (derived ?= '#derived')? objectVar = [ecore::EObject] '.' attribute = [ecore::EAttribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(derived ?= '#derived')? objectVar = [ecore::EObject] '.' attribute = [ecore::EAttribute]
		public Group getGroup() { return cGroup; }
		
		//(derived ?= '#derived')?
		public Assignment getDerivedAssignment_0() { return cDerivedAssignment_0; }
		
		//'#derived'
		public Keyword getDerivedDerivedKeyword_0_0() { return cDerivedDerivedKeyword_0_0; }
		
		//objectVar = [ecore::EObject]
		public Assignment getObjectVarAssignment_1() { return cObjectVarAssignment_1; }
		
		//[ecore::EObject]
		public CrossReference getObjectVarEObjectCrossReference_1_0() { return cObjectVarEObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getObjectVarEObjectIDTerminalRuleCall_1_0_1() { return cObjectVarEObjectIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//attribute = [ecore::EAttribute]
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }
		
		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_3_0() { return cAttributeEAttributeCrossReference_3_0; }
		
		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_3_0_1() { return cAttributeEAttributeIDTerminalRuleCall_3_0_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.LiteralExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLiteralValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralExpression:
		//    value = LiteralValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = LiteralValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//LiteralValue
		public RuleCall getValueLiteralValueParserRuleCall_0() { return cValueLiteralValueParserRuleCall_0; }
	}
	public class LinkVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.LinkVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEReferenceCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetObjectVariablePatternCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetObjectVariablePatternIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetObjectVariablePatternCrossReference_4_0.eContents().get(1);
		
		//LinkVariablePattern:
		//    (op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern|ID]
		public Group getGroup() { return cGroup; }
		
		//(op = Operator)?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//type = [ecore::EReference]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ecore::EReference]
		public CrossReference getTypeEReferenceCrossReference_2_0() { return cTypeEReferenceCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeEReferenceIDTerminalRuleCall_2_0_1() { return cTypeEReferenceIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//target = [ObjectVariablePattern|ID]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[ObjectVariablePattern|ID]
		public CrossReference getTargetObjectVariablePatternCrossReference_4_0() { return cTargetObjectVariablePatternCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetObjectVariablePatternIDTerminalRuleCall_4_0_1() { return cTargetObjectVariablePatternIDTerminalRuleCall_4_0_1; }
	}
	public class ContextLinkVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.ContextLinkVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEReferenceCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEReferenceCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetContextObjectVariablePatternCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetContextObjectVariablePatternIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetContextObjectVariablePatternCrossReference_3_0.eContents().get(1);
		
		//ContextLinkVariablePattern:
		//    '-' type = [ecore::EReference] '->' target = [ContextObjectVariablePattern|ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' type = [ecore::EReference] '->' target = [ContextObjectVariablePattern|ID]
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//type = [ecore::EReference]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[ecore::EReference]
		public CrossReference getTypeEReferenceCrossReference_1_0() { return cTypeEReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEReferenceIDTerminalRuleCall_1_0_1() { return cTypeEReferenceIDTerminalRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target = [ContextObjectVariablePattern|ID]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[ContextObjectVariablePattern|ID]
		public CrossReference getTargetContextObjectVariablePatternCrossReference_3_0() { return cTargetContextObjectVariablePatternCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetContextObjectVariablePatternIDTerminalRuleCall_3_0_1() { return cTargetContextObjectVariablePatternIDTerminalRuleCall_3_0_1; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Operator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValuePlusSignPlusSignKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Operator:
		//    value='++'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value='++'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'++'
		public Keyword getValuePlusSignPlusSignKeyword_0() { return cValuePlusSignPlusSignKeyword_0; }
	}
	public class NacElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Nac");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNacKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRuleRuleCrossReference_3_0 = (CrossReference)cRuleAssignment_3.eContents().get(0);
		private final RuleCall cRuleRuleIDTerminalRuleCall_3_0_1 = (RuleCall)cRuleRuleCrossReference_3_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cSourceKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cSourcePatternsAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cSourcePatternsContextObjectVariablePatternParserRuleCall_4_0_2_0 = (RuleCall)cSourcePatternsAssignment_4_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cTargetKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cTargetPatternsAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cTargetPatternsContextObjectVariablePatternParserRuleCall_4_1_2_0 = (RuleCall)cTargetPatternsAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributeConditionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttrConditionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAttrConditionsAttrCondParserRuleCall_5_2_0 = (RuleCall)cAttrConditionsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		///* ------------ */
		///*    NACs      */
		///* ------------ */
		//Nac:
		//    '#nac' name = ID '#for' rule = [Rule]
		//    (
		//    '#source' '{'
		//        sourcePatterns += ContextObjectVariablePattern*
		//    '}'
		//    |
		//    '#target' '{'
		//        targetPatterns += ContextObjectVariablePattern*
		//    '}'
		//    )
		//    ('#attributeConditions' '{'
		//        attrConditions += AttrCond*
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#nac' name = ID '#for' rule = [Rule]
		//(
		//'#source' '{'
		//    sourcePatterns += ContextObjectVariablePattern*
		//'}'
		//|
		//'#target' '{'
		//    targetPatterns += ContextObjectVariablePattern*
		//'}'
		//)
		//('#attributeConditions' '{'
		//    attrConditions += AttrCond*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'#nac'
		public Keyword getNacKeyword_0() { return cNacKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'#for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//rule = [Rule]
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//[Rule]
		public CrossReference getRuleRuleCrossReference_3_0() { return cRuleRuleCrossReference_3_0; }
		
		//ID
		public RuleCall getRuleRuleIDTerminalRuleCall_3_0_1() { return cRuleRuleIDTerminalRuleCall_3_0_1; }
		
		//(
		//'#source' '{'
		//    sourcePatterns += ContextObjectVariablePattern*
		//'}'
		//|
		//'#target' '{'
		//    targetPatterns += ContextObjectVariablePattern*
		//'}'
		//)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'#source' '{'
		//    sourcePatterns += ContextObjectVariablePattern*
		//'}'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'#source'
		public Keyword getSourceKeyword_4_0_0() { return cSourceKeyword_4_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_1() { return cLeftCurlyBracketKeyword_4_0_1; }
		
		//sourcePatterns += ContextObjectVariablePattern*
		public Assignment getSourcePatternsAssignment_4_0_2() { return cSourcePatternsAssignment_4_0_2; }
		
		//ContextObjectVariablePattern
		public RuleCall getSourcePatternsContextObjectVariablePatternParserRuleCall_4_0_2_0() { return cSourcePatternsContextObjectVariablePatternParserRuleCall_4_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_3() { return cRightCurlyBracketKeyword_4_0_3; }
		
		//'#target' '{'
		//    targetPatterns += ContextObjectVariablePattern*
		//'}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'#target'
		public Keyword getTargetKeyword_4_1_0() { return cTargetKeyword_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_1() { return cLeftCurlyBracketKeyword_4_1_1; }
		
		//targetPatterns += ContextObjectVariablePattern*
		public Assignment getTargetPatternsAssignment_4_1_2() { return cTargetPatternsAssignment_4_1_2; }
		
		//ContextObjectVariablePattern
		public RuleCall getTargetPatternsContextObjectVariablePatternParserRuleCall_4_1_2_0() { return cTargetPatternsContextObjectVariablePatternParserRuleCall_4_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_3() { return cRightCurlyBracketKeyword_4_1_3; }
		
		//('#attributeConditions' '{'
		//    attrConditions += AttrCond*
		//'}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'#attributeConditions'
		public Keyword getAttributeConditionsKeyword_5_0() { return cAttributeConditionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//attrConditions += AttrCond*
		public Assignment getAttrConditionsAssignment_5_2() { return cAttrConditionsAssignment_5_2; }
		
		//AttrCond
		public RuleCall getAttrConditionsAttrCondParserRuleCall_5_2_0() { return cAttrConditionsAttrCondParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///* ---------------- */
		///*    Auxiliaries   */
		///* ---------------- */
		//Import:
		//    '#import' name = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#import' name = STRING
		public Group getGroup() { return cGroup; }
		
		//'#import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name = STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class UsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.Using");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Using:
		//    '#using' importedNamespace = QualifiedNameWithWildcard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#using' importedNamespace = QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'#using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//importedNamespace = QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LiteralValue:
		//    (STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//('-')?INT
		public Group getGroup_1() { return cGroup_1; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('-')?DECIMAL
		public Group getGroup_2() { return cGroup_2; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_2_1() { return cDECIMALTerminalRuleCall_2_1; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall_3() { return cBOOLTerminalRuleCall_3; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//    ID ('.' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class OperatorPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.OperatorPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamePatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkVariablePatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// some head classes for better OOP aspects
		//OperatorPattern:
		//    NamePattern | LinkVariablePattern
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NamePattern | LinkVariablePattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamePattern
		public RuleCall getNamePatternParserRuleCall_0() { return cNamePatternParserRuleCall_0; }
		
		//LinkVariablePattern
		public RuleCall getLinkVariablePatternParserRuleCall_1() { return cLinkVariablePatternParserRuleCall_1; }
	}
	public class NamedElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.NamedElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCorrTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttrCondDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNamePatternParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAttrCondDefLibraryParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNacParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//NamedElements:
		//     Rule  | Schema | CorrType | AttrCondDef | NamePattern | AttrCondDefLibrary | Nac
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Rule  | Schema | CorrType | AttrCondDef | NamePattern | AttrCondDefLibrary | Nac
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_0() { return cRuleParserRuleCall_0; }
		
		//Schema
		public RuleCall getSchemaParserRuleCall_1() { return cSchemaParserRuleCall_1; }
		
		//CorrType
		public RuleCall getCorrTypeParserRuleCall_2() { return cCorrTypeParserRuleCall_2; }
		
		//AttrCondDef
		public RuleCall getAttrCondDefParserRuleCall_3() { return cAttrCondDefParserRuleCall_3; }
		
		//NamePattern
		public RuleCall getNamePatternParserRuleCall_4() { return cNamePatternParserRuleCall_4; }
		
		//AttrCondDefLibrary
		public RuleCall getAttrCondDefLibraryParserRuleCall_5() { return cAttrCondDefLibraryParserRuleCall_5; }
		
		//Nac
		public RuleCall getNacParserRuleCall_6() { return cNacParserRuleCall_6; }
	}
	public class NamePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.NamePattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCorrVariablePatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectVariablePatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamePattern:
		//    CorrVariablePattern | ObjectVariablePattern
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CorrVariablePattern | ObjectVariablePattern
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CorrVariablePattern
		public RuleCall getCorrVariablePatternParserRuleCall_0() { return cCorrVariablePatternParserRuleCall_0; }
		
		//ObjectVariablePattern
		public RuleCall getObjectVariablePatternParserRuleCall_1() { return cObjectVariablePatternParserRuleCall_1; }
	}
	
	
	private final TripleGraphGrammarFileElements pTripleGraphGrammarFile;
	private final SchemaElements pSchema;
	private final CorrTypeElements pCorrType;
	private final AttrCondDefElements pAttrCondDef;
	private final ParamElements pParam;
	private final RuleElements pRule;
	private final AttrCondElements pAttrCond;
	private final AttrCondDefLibraryElements pAttrCondDefLibrary;
	private final AdornmentElements pAdornment;
	private final ParamValueElements pParamValue;
	private final LocalVariableElements pLocalVariable;
	private final CorrVariablePatternElements pCorrVariablePattern;
	private final ObjectVariablePatternElements pObjectVariablePattern;
	private final ContextObjectVariablePatternElements pContextObjectVariablePattern;
	private final AttributeConstraintElements pAttributeConstraint;
	private final AttributeAssignmentElements pAttributeAssignment;
	private final ExpressionElements pExpression;
	private final EnumExpressionElements pEnumExpression;
	private final AttributeExpressionElements pAttributeExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final LinkVariablePatternElements pLinkVariablePattern;
	private final ContextLinkVariablePatternElements pContextLinkVariablePattern;
	private final OperatorElements pOperator;
	private final NacElements pNac;
	private final ImportElements pImport;
	private final UsingElements pUsing;
	private final TerminalRule tDECIMAL;
	private final LiteralValueElements pLiteralValue;
	private final TerminalRule tBOOL;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final OperatorPatternElements pOperatorPattern;
	private final NamedElementsElements pNamedElements;
	private final NamePatternElements pNamePattern;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TGGGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTripleGraphGrammarFile = new TripleGraphGrammarFileElements();
		this.pSchema = new SchemaElements();
		this.pCorrType = new CorrTypeElements();
		this.pAttrCondDef = new AttrCondDefElements();
		this.pParam = new ParamElements();
		this.pRule = new RuleElements();
		this.pAttrCond = new AttrCondElements();
		this.pAttrCondDefLibrary = new AttrCondDefLibraryElements();
		this.pAdornment = new AdornmentElements();
		this.pParamValue = new ParamValueElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pCorrVariablePattern = new CorrVariablePatternElements();
		this.pObjectVariablePattern = new ObjectVariablePatternElements();
		this.pContextObjectVariablePattern = new ContextObjectVariablePatternElements();
		this.pAttributeConstraint = new AttributeConstraintElements();
		this.pAttributeAssignment = new AttributeAssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pEnumExpression = new EnumExpressionElements();
		this.pAttributeExpression = new AttributeExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pLinkVariablePattern = new LinkVariablePatternElements();
		this.pContextLinkVariablePattern = new ContextLinkVariablePatternElements();
		this.pOperator = new OperatorElements();
		this.pNac = new NacElements();
		this.pImport = new ImportElements();
		this.pUsing = new UsingElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.DECIMAL");
		this.pLiteralValue = new LiteralValueElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.emoflon.ibex.tgg.editor.TGG.BOOL");
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pOperatorPattern = new OperatorPatternElements();
		this.pNamedElements = new NamedElementsElements();
		this.pNamePattern = new NamePatternElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.emoflon.ibex.tgg.editor.TGG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TripleGraphGrammarFile:
	//    imports += Import*
	//    using += Using*
	//    (schema = Schema)?
	//      (rules += Rule)*
	//      (library = AttrCondDefLibrary)?
	//;
	public TripleGraphGrammarFileElements getTripleGraphGrammarFileAccess() {
		return pTripleGraphGrammarFile;
	}
	
	public ParserRule getTripleGraphGrammarFileRule() {
		return getTripleGraphGrammarFileAccess().getRule();
	}
	
	///* ---------- */
	///*   SCHEMA   */
	///* ---------- */
	//Schema:
	//    '#schema' name = QualifiedName
	//    ('#source' '{'
	//        sourceTypes += [ecore::EPackage | QualifiedName]*
	//    '}')?
	//    ('#target' '{'
	//        targetTypes += [ecore::EPackage | QualifiedName]*
	//    '}')?
	//    ('#correspondence' '{'
	//        correspondenceTypes += CorrType*
	//    '}')?
	//    ('#attributeConditions' '{'
	//        attributeCondDefs += AttrCondDef*
	//    '}')?
	//;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//CorrType:
	//    name = ID (('#extends' super=[CorrType]) | ('{'
	//        '#src->' source = [ecore::EClass | QualifiedName]
	//        '#trg->' target = [ecore::EClass | QualifiedName]
	//    '}'))
	//;
	public CorrTypeElements getCorrTypeAccess() {
		return pCorrType;
	}
	
	public ParserRule getCorrTypeRule() {
		return getCorrTypeAccess().getRule();
	}
	
	//AttrCondDef:
	//    (userDefined ?= '#userDefined')? name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
	//        '#sync:'
	//            allowedSyncAdornments += Adornment (',' allowedSyncAdornments += Adornment)*
	//        ('#gen:'
	//            (allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?)?
	//    '}'
	//;
	public AttrCondDefElements getAttrCondDefAccess() {
		return pAttrCondDef;
	}
	
	public ParserRule getAttrCondDefRule() {
		return getAttrCondDefAccess().getRule();
	}
	
	//Param:
	//    paramName = ID ':' (type = [ecore::EDataType | QualifiedName])
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	///* ------------- */
	///*   TGG RULES   */
	///* ------------- */
	//Rule:
	//    (abstractRule ?= '#abstract')? '#rule' name = ID ('#extends' supertypes += [Rule] (',' supertypes += [Rule])*)? '#with' schema = [Schema | QualifiedName]
	//    ('#source' '{'
	//        sourcePatterns += ObjectVariablePattern*
	//    '}')?
	//    ('#target' '{'
	//        targetPatterns += ObjectVariablePattern*
	//    '}')?
	//    ('#correspondence' '{'
	//        correspondencePatterns += CorrVariablePattern*
	//    '}')?
	//    ('#attributeConditions' '{'
	//        attrConditions += AttrCond*
	//    '}')?
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//AttrCond:
	//    name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')'
	//;
	public AttrCondElements getAttrCondAccess() {
		return pAttrCond;
	}
	
	public ParserRule getAttrCondRule() {
		return getAttrCondAccess().getRule();
	}
	
	//AttrCondDefLibrary:
	//    '#library' name = QualifiedName
	//    ('{'
	//        attributeCondDefs += AttrCondDef*
	//    '}')?
	//;
	public AttrCondDefLibraryElements getAttrCondDefLibraryAccess() {
		return pAttrCondDefLibrary;
	}
	
	public ParserRule getAttrCondDefLibraryRule() {
		return getAttrCondDefLibraryAccess().getRule();
	}
	
	//Adornment:
	//    '[' value += ('B'|'F')+ ']'
	//;
	public AdornmentElements getAdornmentAccess() {
		return pAdornment;
	}
	
	public ParserRule getAdornmentRule() {
		return getAdornmentAccess().getRule();
	}
	
	//ParamValue:
	//    (LocalVariable | Expression)
	//;
	public ParamValueElements getParamValueAccess() {
		return pParamValue;
	}
	
	public ParserRule getParamValueRule() {
		return getParamValueAccess().getRule();
	}
	
	//LocalVariable:
	//    name = ID
	//;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//CorrVariablePattern:
	//    (op=Operator)? name = ID ':' type = [CorrType | QualifiedName] '{'
	//        '#src->' source = [ObjectVariablePattern]
	//        '#trg->' target = [ObjectVariablePattern]
	//    '}'
	//;
	public CorrVariablePatternElements getCorrVariablePatternAccess() {
		return pCorrVariablePattern;
	}
	
	public ParserRule getCorrVariablePatternRule() {
		return getCorrVariablePatternAccess().getRule();
	}
	
	//ObjectVariablePattern:
	//    (op=Operator)? name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
	//        attributeAssignments += AttributeAssignment*
	//        attributeConstraints += AttributeConstraint*
	//        linkVariablePatterns += LinkVariablePattern*
	//    '}')?
	//;
	public ObjectVariablePatternElements getObjectVariablePatternAccess() {
		return pObjectVariablePattern;
	}
	
	public ParserRule getObjectVariablePatternRule() {
		return getObjectVariablePatternAccess().getRule();
	}
	
	//ContextObjectVariablePattern:
	//    name = ID ':' type = [ecore::EClass | QualifiedName] ('{'
	//        attributeConstraints += AttributeConstraint*
	//        linkVariablePatterns += ContextLinkVariablePattern*
	//    '}')?
	//;
	public ContextObjectVariablePatternElements getContextObjectVariablePatternAccess() {
		return pContextObjectVariablePattern;
	}
	
	public ParserRule getContextObjectVariablePatternRule() {
		return getContextObjectVariablePatternAccess().getRule();
	}
	
	//AttributeConstraint:
	//    attribute = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
	//;
	public AttributeConstraintElements getAttributeConstraintAccess() {
		return pAttributeConstraint;
	}
	
	public ParserRule getAttributeConstraintRule() {
		return getAttributeConstraintAccess().getRule();
	}
	
	//AttributeAssignment:
	//    attribute = [ecore::EAttribute] op=':=' valueExp = Expression
	//;
	public AttributeAssignmentElements getAttributeAssignmentAccess() {
		return pAttributeAssignment;
	}
	
	public ParserRule getAttributeAssignmentRule() {
		return getAttributeAssignmentAccess().getRule();
	}
	
	//Expression:
	//    (EnumExpression | AttributeExpression | LiteralExpression)
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//EnumExpression:
	//     'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]
	//;
	public EnumExpressionElements getEnumExpressionAccess() {
		return pEnumExpression;
	}
	
	public ParserRule getEnumExpressionRule() {
		return getEnumExpressionAccess().getRule();
	}
	
	//AttributeExpression:
	//    (derived ?= '#derived')? objectVar = [ecore::EObject] '.' attribute = [ecore::EAttribute]
	//;
	public AttributeExpressionElements getAttributeExpressionAccess() {
		return pAttributeExpression;
	}
	
	public ParserRule getAttributeExpressionRule() {
		return getAttributeExpressionAccess().getRule();
	}
	
	//LiteralExpression:
	//    value = LiteralValue
	//;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//LinkVariablePattern:
	//    (op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern|ID]
	//;
	public LinkVariablePatternElements getLinkVariablePatternAccess() {
		return pLinkVariablePattern;
	}
	
	public ParserRule getLinkVariablePatternRule() {
		return getLinkVariablePatternAccess().getRule();
	}
	
	//ContextLinkVariablePattern:
	//    '-' type = [ecore::EReference] '->' target = [ContextObjectVariablePattern|ID]
	//;
	public ContextLinkVariablePatternElements getContextLinkVariablePatternAccess() {
		return pContextLinkVariablePattern;
	}
	
	public ParserRule getContextLinkVariablePatternRule() {
		return getContextLinkVariablePatternAccess().getRule();
	}
	
	//Operator:
	//    value='++'
	//;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	///* ------------ */
	///*    NACs      */
	///* ------------ */
	//Nac:
	//    '#nac' name = ID '#for' rule = [Rule]
	//    (
	//    '#source' '{'
	//        sourcePatterns += ContextObjectVariablePattern*
	//    '}'
	//    |
	//    '#target' '{'
	//        targetPatterns += ContextObjectVariablePattern*
	//    '}'
	//    )
	//    ('#attributeConditions' '{'
	//        attrConditions += AttrCond*
	//    '}')?
	//;
	public NacElements getNacAccess() {
		return pNac;
	}
	
	public ParserRule getNacRule() {
		return getNacAccess().getRule();
	}
	
	///* ---------------- */
	///*    Auxiliaries   */
	///* ---------------- */
	//Import:
	//    '#import' name = STRING
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Using:
	//    '#using' importedNamespace = QualifiedNameWithWildcard
	//;
	public UsingElements getUsingAccess() {
		return pUsing;
	}
	
	public ParserRule getUsingRule() {
		return getUsingAccess().getRule();
	}
	
	//terminal DECIMAL: INT '.' INT;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//LiteralValue:
	//    (STRING | ('-')?INT | ('-')?DECIMAL | BOOL)
	//;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//terminal BOOL:
	//    'true' | 'false'
	//;
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*'
	//;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName returns ecore::EString:
	//    ID ('.' ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//// some head classes for better OOP aspects
	//OperatorPattern:
	//    NamePattern | LinkVariablePattern
	//;
	public OperatorPatternElements getOperatorPatternAccess() {
		return pOperatorPattern;
	}
	
	public ParserRule getOperatorPatternRule() {
		return getOperatorPatternAccess().getRule();
	}
	
	//NamedElements:
	//     Rule  | Schema | CorrType | AttrCondDef | NamePattern | AttrCondDefLibrary | Nac
	//;
	public NamedElementsElements getNamedElementsAccess() {
		return pNamedElements;
	}
	
	public ParserRule getNamedElementsRule() {
		return getNamedElementsAccess().getRule();
	}
	
	//NamePattern:
	//    CorrVariablePattern | ObjectVariablePattern
	//;
	public NamePatternElements getNamePatternAccess() {
		return pNamePattern;
	}
	
	public ParserRule getNamePatternRule() {
		return getNamePatternAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
