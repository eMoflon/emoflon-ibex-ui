/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.emoflon.ibex.gt.editor.gT.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.emoflon.ibex.gt.editor.gT.GTPackage
 * @generated
 */
public class GTAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GTPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GTAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GTPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GTSwitch<Adapter> modelSwitch =
    new GTSwitch<Adapter>()
    {
      @Override
      public Adapter caseEditorGTFile(EditorGTFile object)
      {
        return createEditorGTFileAdapter();
      }
      @Override
      public Adapter caseEditorParameterOrNode(EditorParameterOrNode object)
      {
        return createEditorParameterOrNodeAdapter();
      }
      @Override
      public Adapter caseEditorImport(EditorImport object)
      {
        return createEditorImportAdapter();
      }
      @Override
      public Adapter caseEditorPattern(EditorPattern object)
      {
        return createEditorPatternAdapter();
      }
      @Override
      public Adapter caseEditorParameter(EditorParameter object)
      {
        return createEditorParameterAdapter();
      }
      @Override
      public Adapter caseEditorNode(EditorNode object)
      {
        return createEditorNodeAdapter();
      }
      @Override
      public Adapter caseEditorAttributeConstraint(EditorAttributeConstraint object)
      {
        return createEditorAttributeConstraintAdapter();
      }
      @Override
      public Adapter caseEditorAttributeAssignment(EditorAttributeAssignment object)
      {
        return createEditorAttributeAssignmentAdapter();
      }
      @Override
      public Adapter caseEditorExpression(EditorExpression object)
      {
        return createEditorExpressionAdapter();
      }
      @Override
      public Adapter caseEditorAttributeExpression(EditorAttributeExpression object)
      {
        return createEditorAttributeExpressionAdapter();
      }
      @Override
      public Adapter caseEditorCountExpression(EditorCountExpression object)
      {
        return createEditorCountExpressionAdapter();
      }
      @Override
      public Adapter caseEditorLiteralExpression(EditorLiteralExpression object)
      {
        return createEditorLiteralExpressionAdapter();
      }
      @Override
      public Adapter caseEditorEnumExpression(EditorEnumExpression object)
      {
        return createEditorEnumExpressionAdapter();
      }
      @Override
      public Adapter caseEditorParameterExpression(EditorParameterExpression object)
      {
        return createEditorParameterExpressionAdapter();
      }
      @Override
      public Adapter caseEditorReference(EditorReference object)
      {
        return createEditorReferenceAdapter();
      }
      @Override
      public Adapter caseEditorReferenceIterator(EditorReferenceIterator object)
      {
        return createEditorReferenceIteratorAdapter();
      }
      @Override
      public Adapter caseEditorIteratorAttributeExpression(EditorIteratorAttributeExpression object)
      {
        return createEditorIteratorAttributeExpressionAdapter();
      }
      @Override
      public Adapter caseEditorIteratorAttributeAssignment(EditorIteratorAttributeAssignment object)
      {
        return createEditorIteratorAttributeAssignmentAdapter();
      }
      @Override
      public Adapter caseEditorIteratorAttributeAssignmentItr(EditorIteratorAttributeAssignmentItr object)
      {
        return createEditorIteratorAttributeAssignmentItrAdapter();
      }
      @Override
      public Adapter caseEditorIteratorAttributeAssignmentNode(EditorIteratorAttributeAssignmentNode object)
      {
        return createEditorIteratorAttributeAssignmentNodeAdapter();
      }
      @Override
      public Adapter caseEditorIteratorReference(EditorIteratorReference object)
      {
        return createEditorIteratorReferenceAdapter();
      }
      @Override
      public Adapter caseEditorCondition(EditorCondition object)
      {
        return createEditorConditionAdapter();
      }
      @Override
      public Adapter caseEditorSimpleCondition(EditorSimpleCondition object)
      {
        return createEditorSimpleConditionAdapter();
      }
      @Override
      public Adapter caseEditorProbability(EditorProbability object)
      {
        return createEditorProbabilityAdapter();
      }
      @Override
      public Adapter caseStochasticFunction(StochasticFunction object)
      {
        return createStochasticFunctionAdapter();
      }
      @Override
      public Adapter caseStochasticFunctionExpression(StochasticFunctionExpression object)
      {
        return createStochasticFunctionExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticCalculationExpression(ArithmeticCalculationExpression object)
      {
        return createArithmeticCalculationExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression(ArithmeticExpression object)
      {
        return createArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseEditorConditionReference(EditorConditionReference object)
      {
        return createEditorConditionReferenceAdapter();
      }
      @Override
      public Adapter caseEditorApplicationCondition(EditorApplicationCondition object)
      {
        return createEditorApplicationConditionAdapter();
      }
      @Override
      public Adapter caseAddExpression(AddExpression object)
      {
        return createAddExpressionAdapter();
      }
      @Override
      public Adapter caseMultExpression(MultExpression object)
      {
        return createMultExpressionAdapter();
      }
      @Override
      public Adapter caseExpExpression(ExpExpression object)
      {
        return createExpExpressionAdapter();
      }
      @Override
      public Adapter caseMinMaxExpression(MinMaxExpression object)
      {
        return createMinMaxExpressionAdapter();
      }
      @Override
      public Adapter caseOneParameterArithmetics(OneParameterArithmetics object)
      {
        return createOneParameterArithmeticsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorGTFile <em>Editor GT File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorGTFile
   * @generated
   */
  public Adapter createEditorGTFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorParameterOrNode <em>Editor Parameter Or Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorParameterOrNode
   * @generated
   */
  public Adapter createEditorParameterOrNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorImport <em>Editor Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorImport
   * @generated
   */
  public Adapter createEditorImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorPattern <em>Editor Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorPattern
   * @generated
   */
  public Adapter createEditorPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorParameter <em>Editor Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorParameter
   * @generated
   */
  public Adapter createEditorParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorNode <em>Editor Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorNode
   * @generated
   */
  public Adapter createEditorNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorAttributeConstraint <em>Editor Attribute Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorAttributeConstraint
   * @generated
   */
  public Adapter createEditorAttributeConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorAttributeAssignment <em>Editor Attribute Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorAttributeAssignment
   * @generated
   */
  public Adapter createEditorAttributeAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorExpression <em>Editor Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorExpression
   * @generated
   */
  public Adapter createEditorExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorAttributeExpression <em>Editor Attribute Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorAttributeExpression
   * @generated
   */
  public Adapter createEditorAttributeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorCountExpression <em>Editor Count Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorCountExpression
   * @generated
   */
  public Adapter createEditorCountExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorLiteralExpression <em>Editor Literal Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorLiteralExpression
   * @generated
   */
  public Adapter createEditorLiteralExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorEnumExpression <em>Editor Enum Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorEnumExpression
   * @generated
   */
  public Adapter createEditorEnumExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorParameterExpression <em>Editor Parameter Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorParameterExpression
   * @generated
   */
  public Adapter createEditorParameterExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorReference <em>Editor Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorReference
   * @generated
   */
  public Adapter createEditorReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorReferenceIterator <em>Editor Reference Iterator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorReferenceIterator
   * @generated
   */
  public Adapter createEditorReferenceIteratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeExpression <em>Editor Iterator Attribute Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeExpression
   * @generated
   */
  public Adapter createEditorIteratorAttributeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignment <em>Editor Iterator Attribute Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignment
   * @generated
   */
  public Adapter createEditorIteratorAttributeAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignmentItr <em>Editor Iterator Attribute Assignment Itr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignmentItr
   * @generated
   */
  public Adapter createEditorIteratorAttributeAssignmentItrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignmentNode <em>Editor Iterator Attribute Assignment Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignmentNode
   * @generated
   */
  public Adapter createEditorIteratorAttributeAssignmentNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorIteratorReference <em>Editor Iterator Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorIteratorReference
   * @generated
   */
  public Adapter createEditorIteratorReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorCondition <em>Editor Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorCondition
   * @generated
   */
  public Adapter createEditorConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorSimpleCondition <em>Editor Simple Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorSimpleCondition
   * @generated
   */
  public Adapter createEditorSimpleConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorProbability <em>Editor Probability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorProbability
   * @generated
   */
  public Adapter createEditorProbabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.StochasticFunction <em>Stochastic Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.StochasticFunction
   * @generated
   */
  public Adapter createStochasticFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.StochasticFunctionExpression <em>Stochastic Function Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.StochasticFunctionExpression
   * @generated
   */
  public Adapter createStochasticFunctionExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.ArithmeticCalculationExpression <em>Arithmetic Calculation Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.ArithmeticCalculationExpression
   * @generated
   */
  public Adapter createArithmeticCalculationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.ArithmeticExpression
   * @generated
   */
  public Adapter createArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorConditionReference <em>Editor Condition Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorConditionReference
   * @generated
   */
  public Adapter createEditorConditionReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.EditorApplicationCondition <em>Editor Application Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.EditorApplicationCondition
   * @generated
   */
  public Adapter createEditorApplicationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.AddExpression <em>Add Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.AddExpression
   * @generated
   */
  public Adapter createAddExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.MultExpression <em>Mult Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.MultExpression
   * @generated
   */
  public Adapter createMultExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.ExpExpression <em>Exp Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.ExpExpression
   * @generated
   */
  public Adapter createExpExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.MinMaxExpression <em>Min Max Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.MinMaxExpression
   * @generated
   */
  public Adapter createMinMaxExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.emoflon.ibex.gt.editor.gT.OneParameterArithmetics <em>One Parameter Arithmetics</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.emoflon.ibex.gt.editor.gT.OneParameterArithmetics
   * @generated
   */
  public Adapter createOneParameterArithmeticsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GTAdapterFactory
