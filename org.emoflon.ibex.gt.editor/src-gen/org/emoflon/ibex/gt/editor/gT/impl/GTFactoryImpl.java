/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.emoflon.ibex.gt.editor.gT.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GTFactoryImpl extends EFactoryImpl implements GTFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GTFactory init()
  {
    try
    {
      GTFactory theGTFactory = (GTFactory)EPackage.Registry.INSTANCE.getEFactory(GTPackage.eNS_URI);
      if (theGTFactory != null)
      {
        return theGTFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GTFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GTFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GTPackage.EDITOR_GT_FILE: return createEditorGTFile();
      case GTPackage.EDITOR_PARAMETER_OR_NODE: return createEditorParameterOrNode();
      case GTPackage.EDITOR_IMPORT: return createEditorImport();
      case GTPackage.EDITOR_PATTERN: return createEditorPattern();
      case GTPackage.EDITOR_PARAMETER: return createEditorParameter();
      case GTPackage.EDITOR_NODE: return createEditorNode();
      case GTPackage.EDITOR_ATTRIBUTE_CONSTRAINT: return createEditorAttributeConstraint();
      case GTPackage.EDITOR_ATTRIBUTE_ASSIGNMENT: return createEditorAttributeAssignment();
      case GTPackage.EDITOR_EXPRESSION: return createEditorExpression();
      case GTPackage.EDITOR_ATTRIBUTE_EXPRESSION: return createEditorAttributeExpression();
      case GTPackage.EDITOR_COUNT_EXPRESSION: return createEditorCountExpression();
      case GTPackage.EDITOR_LITERAL_EXPRESSION: return createEditorLiteralExpression();
      case GTPackage.EDITOR_ENUM_EXPRESSION: return createEditorEnumExpression();
      case GTPackage.EDITOR_PARAMETER_EXPRESSION: return createEditorParameterExpression();
      case GTPackage.EDITOR_REFERENCE: return createEditorReference();
      case GTPackage.EDITOR_REFERENCE_ITERATOR: return createEditorReferenceIterator();
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_EXPRESSION: return createEditorIteratorAttributeExpression();
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT: return createEditorIteratorAttributeAssignment();
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_ITR: return createEditorIteratorAttributeAssignmentItr();
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE: return createEditorIteratorAttributeAssignmentNode();
      case GTPackage.EDITOR_ITERATOR_REFERENCE: return createEditorIteratorReference();
      case GTPackage.EDITOR_CONDITION: return createEditorCondition();
      case GTPackage.EDITOR_SIMPLE_CONDITION: return createEditorSimpleCondition();
      case GTPackage.EDITOR_PROBABILITY: return createEditorProbability();
      case GTPackage.STOCHASTIC_FUNCTION: return createStochasticFunction();
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION: return createStochasticFunctionExpression();
      case GTPackage.ARITHMETIC_CALCULATION_EXPRESSION: return createArithmeticCalculationExpression();
      case GTPackage.ARITHMETIC_EXPRESSION: return createArithmeticExpression();
      case GTPackage.STRING_CONSTANT: return createStringConstant();
      case GTPackage.EDITOR_CONDITION_REFERENCE: return createEditorConditionReference();
      case GTPackage.EDITOR_APPLICATION_CONDITION: return createEditorApplicationCondition();
      case GTPackage.ADD_EXPRESSION: return createAddExpression();
      case GTPackage.MULT_EXPRESSION: return createMultExpression();
      case GTPackage.EXP_EXPRESSION: return createExpExpression();
      case GTPackage.MIN_MAX_EXPRESSION: return createMinMaxExpression();
      case GTPackage.ONE_PARAMETER_ARITHMETICS: return createOneParameterArithmetics();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GTPackage.EDITOR_PATTERN_TYPE:
        return createEditorPatternTypeFromString(eDataType, initialValue);
      case GTPackage.EDITOR_OPERATOR:
        return createEditorOperatorFromString(eDataType, initialValue);
      case GTPackage.EDITOR_RELATION:
        return createEditorRelationFromString(eDataType, initialValue);
      case GTPackage.EDITOR_APPLICATION_CONDITION_TYPE:
        return createEditorApplicationConditionTypeFromString(eDataType, initialValue);
      case GTPackage.POSSIBLE_STOCHASTIC_RANGES:
        return createPossibleStochasticRangesFromString(eDataType, initialValue);
      case GTPackage.STOCHASTIC_DISTRIBUTION:
        return createStochasticDistributionFromString(eDataType, initialValue);
      case GTPackage.MULT_OPERATOR:
        return createMultOperatorFromString(eDataType, initialValue);
      case GTPackage.MIN_MAX_OPERATOR:
        return createMinMaxOperatorFromString(eDataType, initialValue);
      case GTPackage.ADD_OPERATOR:
        return createAddOperatorFromString(eDataType, initialValue);
      case GTPackage.ALL_ONE_PARAMETER_OPERATORS:
        return createAllOneParameterOperatorsFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GTPackage.EDITOR_PATTERN_TYPE:
        return convertEditorPatternTypeToString(eDataType, instanceValue);
      case GTPackage.EDITOR_OPERATOR:
        return convertEditorOperatorToString(eDataType, instanceValue);
      case GTPackage.EDITOR_RELATION:
        return convertEditorRelationToString(eDataType, instanceValue);
      case GTPackage.EDITOR_APPLICATION_CONDITION_TYPE:
        return convertEditorApplicationConditionTypeToString(eDataType, instanceValue);
      case GTPackage.POSSIBLE_STOCHASTIC_RANGES:
        return convertPossibleStochasticRangesToString(eDataType, instanceValue);
      case GTPackage.STOCHASTIC_DISTRIBUTION:
        return convertStochasticDistributionToString(eDataType, instanceValue);
      case GTPackage.MULT_OPERATOR:
        return convertMultOperatorToString(eDataType, instanceValue);
      case GTPackage.MIN_MAX_OPERATOR:
        return convertMinMaxOperatorToString(eDataType, instanceValue);
      case GTPackage.ADD_OPERATOR:
        return convertAddOperatorToString(eDataType, instanceValue);
      case GTPackage.ALL_ONE_PARAMETER_OPERATORS:
        return convertAllOneParameterOperatorsToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorGTFile createEditorGTFile()
  {
    EditorGTFileImpl editorGTFile = new EditorGTFileImpl();
    return editorGTFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorParameterOrNode createEditorParameterOrNode()
  {
    EditorParameterOrNodeImpl editorParameterOrNode = new EditorParameterOrNodeImpl();
    return editorParameterOrNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorImport createEditorImport()
  {
    EditorImportImpl editorImport = new EditorImportImpl();
    return editorImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorPattern createEditorPattern()
  {
    EditorPatternImpl editorPattern = new EditorPatternImpl();
    return editorPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorParameter createEditorParameter()
  {
    EditorParameterImpl editorParameter = new EditorParameterImpl();
    return editorParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorNode createEditorNode()
  {
    EditorNodeImpl editorNode = new EditorNodeImpl();
    return editorNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorAttributeConstraint createEditorAttributeConstraint()
  {
    EditorAttributeConstraintImpl editorAttributeConstraint = new EditorAttributeConstraintImpl();
    return editorAttributeConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorAttributeAssignment createEditorAttributeAssignment()
  {
    EditorAttributeAssignmentImpl editorAttributeAssignment = new EditorAttributeAssignmentImpl();
    return editorAttributeAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorExpression createEditorExpression()
  {
    EditorExpressionImpl editorExpression = new EditorExpressionImpl();
    return editorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorAttributeExpression createEditorAttributeExpression()
  {
    EditorAttributeExpressionImpl editorAttributeExpression = new EditorAttributeExpressionImpl();
    return editorAttributeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorCountExpression createEditorCountExpression()
  {
    EditorCountExpressionImpl editorCountExpression = new EditorCountExpressionImpl();
    return editorCountExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorLiteralExpression createEditorLiteralExpression()
  {
    EditorLiteralExpressionImpl editorLiteralExpression = new EditorLiteralExpressionImpl();
    return editorLiteralExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorEnumExpression createEditorEnumExpression()
  {
    EditorEnumExpressionImpl editorEnumExpression = new EditorEnumExpressionImpl();
    return editorEnumExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorParameterExpression createEditorParameterExpression()
  {
    EditorParameterExpressionImpl editorParameterExpression = new EditorParameterExpressionImpl();
    return editorParameterExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorReference createEditorReference()
  {
    EditorReferenceImpl editorReference = new EditorReferenceImpl();
    return editorReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorReferenceIterator createEditorReferenceIterator()
  {
    EditorReferenceIteratorImpl editorReferenceIterator = new EditorReferenceIteratorImpl();
    return editorReferenceIterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorIteratorAttributeExpression createEditorIteratorAttributeExpression()
  {
    EditorIteratorAttributeExpressionImpl editorIteratorAttributeExpression = new EditorIteratorAttributeExpressionImpl();
    return editorIteratorAttributeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorIteratorAttributeAssignment createEditorIteratorAttributeAssignment()
  {
    EditorIteratorAttributeAssignmentImpl editorIteratorAttributeAssignment = new EditorIteratorAttributeAssignmentImpl();
    return editorIteratorAttributeAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorIteratorAttributeAssignmentItr createEditorIteratorAttributeAssignmentItr()
  {
    EditorIteratorAttributeAssignmentItrImpl editorIteratorAttributeAssignmentItr = new EditorIteratorAttributeAssignmentItrImpl();
    return editorIteratorAttributeAssignmentItr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorIteratorAttributeAssignmentNode createEditorIteratorAttributeAssignmentNode()
  {
    EditorIteratorAttributeAssignmentNodeImpl editorIteratorAttributeAssignmentNode = new EditorIteratorAttributeAssignmentNodeImpl();
    return editorIteratorAttributeAssignmentNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorIteratorReference createEditorIteratorReference()
  {
    EditorIteratorReferenceImpl editorIteratorReference = new EditorIteratorReferenceImpl();
    return editorIteratorReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorCondition createEditorCondition()
  {
    EditorConditionImpl editorCondition = new EditorConditionImpl();
    return editorCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorSimpleCondition createEditorSimpleCondition()
  {
    EditorSimpleConditionImpl editorSimpleCondition = new EditorSimpleConditionImpl();
    return editorSimpleCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorProbability createEditorProbability()
  {
    EditorProbabilityImpl editorProbability = new EditorProbabilityImpl();
    return editorProbability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StochasticFunction createStochasticFunction()
  {
    StochasticFunctionImpl stochasticFunction = new StochasticFunctionImpl();
    return stochasticFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StochasticFunctionExpression createStochasticFunctionExpression()
  {
    StochasticFunctionExpressionImpl stochasticFunctionExpression = new StochasticFunctionExpressionImpl();
    return stochasticFunctionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticCalculationExpression createArithmeticCalculationExpression()
  {
    ArithmeticCalculationExpressionImpl arithmeticCalculationExpression = new ArithmeticCalculationExpressionImpl();
    return arithmeticCalculationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression createArithmeticExpression()
  {
    ArithmeticExpressionImpl arithmeticExpression = new ArithmeticExpressionImpl();
    return arithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorConditionReference createEditorConditionReference()
  {
    EditorConditionReferenceImpl editorConditionReference = new EditorConditionReferenceImpl();
    return editorConditionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorApplicationCondition createEditorApplicationCondition()
  {
    EditorApplicationConditionImpl editorApplicationCondition = new EditorApplicationConditionImpl();
    return editorApplicationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddExpression createAddExpression()
  {
    AddExpressionImpl addExpression = new AddExpressionImpl();
    return addExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultExpression createMultExpression()
  {
    MultExpressionImpl multExpression = new MultExpressionImpl();
    return multExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpExpression createExpExpression()
  {
    ExpExpressionImpl expExpression = new ExpExpressionImpl();
    return expExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinMaxExpression createMinMaxExpression()
  {
    MinMaxExpressionImpl minMaxExpression = new MinMaxExpressionImpl();
    return minMaxExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneParameterArithmetics createOneParameterArithmetics()
  {
    OneParameterArithmeticsImpl oneParameterArithmetics = new OneParameterArithmeticsImpl();
    return oneParameterArithmetics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditorPatternType createEditorPatternTypeFromString(EDataType eDataType, String initialValue)
  {
    EditorPatternType result = EditorPatternType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEditorPatternTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditorOperator createEditorOperatorFromString(EDataType eDataType, String initialValue)
  {
    EditorOperator result = EditorOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEditorOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditorRelation createEditorRelationFromString(EDataType eDataType, String initialValue)
  {
    EditorRelation result = EditorRelation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEditorRelationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EditorApplicationConditionType createEditorApplicationConditionTypeFromString(EDataType eDataType, String initialValue)
  {
    EditorApplicationConditionType result = EditorApplicationConditionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEditorApplicationConditionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PossibleStochasticRanges createPossibleStochasticRangesFromString(EDataType eDataType, String initialValue)
  {
    PossibleStochasticRanges result = PossibleStochasticRanges.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPossibleStochasticRangesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StochasticDistribution createStochasticDistributionFromString(EDataType eDataType, String initialValue)
  {
    StochasticDistribution result = StochasticDistribution.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStochasticDistributionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MultOperator createMultOperatorFromString(EDataType eDataType, String initialValue)
  {
    MultOperator result = MultOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMultOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinMaxOperator createMinMaxOperatorFromString(EDataType eDataType, String initialValue)
  {
    MinMaxOperator result = MinMaxOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMinMaxOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AddOperator createAddOperatorFromString(EDataType eDataType, String initialValue)
  {
    AddOperator result = AddOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAddOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllOneParameterOperators createAllOneParameterOperatorsFromString(EDataType eDataType, String initialValue)
  {
    AllOneParameterOperators result = AllOneParameterOperators.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAllOneParameterOperatorsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GTPackage getGTPackage()
  {
    return (GTPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GTPackage getPackage()
  {
    return GTPackage.eINSTANCE;
  }

} //GTFactoryImpl
