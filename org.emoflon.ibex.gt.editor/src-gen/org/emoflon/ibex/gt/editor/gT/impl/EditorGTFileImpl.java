/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.emoflon.ibex.gt.editor.gT.EditorCondition;
import org.emoflon.ibex.gt.editor.gT.EditorGTFile;
import org.emoflon.ibex.gt.editor.gT.EditorImport;
import org.emoflon.ibex.gt.editor.gT.EditorPattern;
import org.emoflon.ibex.gt.editor.gT.GTPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Editor GT File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorGTFileImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorGTFileImpl#getPatterns <em>Patterns</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorGTFileImpl#getConditions <em>Conditions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EditorGTFileImpl extends MinimalEObjectImpl.Container implements EditorGTFile
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<EditorImport> imports;

  /**
   * The cached value of the '{@link #getPatterns() <em>Patterns</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatterns()
   * @generated
   * @ordered
   */
  protected EList<EditorPattern> patterns;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<EditorCondition> conditions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EditorGTFileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.EDITOR_GT_FILE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorImport> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<EditorImport>(EditorImport.class, this, GTPackage.EDITOR_GT_FILE__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorPattern> getPatterns()
  {
    if (patterns == null)
    {
      patterns = new EObjectContainmentEList<EditorPattern>(EditorPattern.class, this, GTPackage.EDITOR_GT_FILE__PATTERNS);
    }
    return patterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<EditorCondition>(EditorCondition.class, this, GTPackage.EDITOR_GT_FILE__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_GT_FILE__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_GT_FILE__PATTERNS:
        return ((InternalEList<?>)getPatterns()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_GT_FILE__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_GT_FILE__IMPORTS:
        return getImports();
      case GTPackage.EDITOR_GT_FILE__PATTERNS:
        return getPatterns();
      case GTPackage.EDITOR_GT_FILE__CONDITIONS:
        return getConditions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_GT_FILE__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends EditorImport>)newValue);
        return;
      case GTPackage.EDITOR_GT_FILE__PATTERNS:
        getPatterns().clear();
        getPatterns().addAll((Collection<? extends EditorPattern>)newValue);
        return;
      case GTPackage.EDITOR_GT_FILE__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends EditorCondition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_GT_FILE__IMPORTS:
        getImports().clear();
        return;
      case GTPackage.EDITOR_GT_FILE__PATTERNS:
        getPatterns().clear();
        return;
      case GTPackage.EDITOR_GT_FILE__CONDITIONS:
        getConditions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_GT_FILE__IMPORTS:
        return imports != null && !imports.isEmpty();
      case GTPackage.EDITOR_GT_FILE__PATTERNS:
        return patterns != null && !patterns.isEmpty();
      case GTPackage.EDITOR_GT_FILE__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EditorGTFileImpl
