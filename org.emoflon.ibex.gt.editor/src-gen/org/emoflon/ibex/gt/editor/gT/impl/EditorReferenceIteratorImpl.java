/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignment;
import org.emoflon.ibex.gt.editor.gT.EditorIteratorReference;
import org.emoflon.ibex.gt.editor.gT.EditorReferenceIterator;
import org.emoflon.ibex.gt.editor.gT.GTPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Editor Reference Iterator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorReferenceIteratorImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorReferenceIteratorImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorReferenceIteratorImpl#getSubType <em>Sub Type</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorReferenceIteratorImpl#getIteratorAttributes <em>Iterator Attributes</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorReferenceIteratorImpl#getReferences <em>References</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EditorReferenceIteratorImpl extends MinimalEObjectImpl.Container implements EditorReferenceIterator
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EReference type;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubType() <em>Sub Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubType()
   * @generated
   * @ordered
   */
  protected EClass subType;

  /**
   * The cached value of the '{@link #getIteratorAttributes() <em>Iterator Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIteratorAttributes()
   * @generated
   * @ordered
   */
  protected EList<EditorIteratorAttributeAssignment> iteratorAttributes;

  /**
   * The cached value of the '{@link #getReferences() <em>References</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferences()
   * @generated
   * @ordered
   */
  protected EList<EditorIteratorReference> references;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EditorReferenceIteratorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.EDITOR_REFERENCE_ITERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (EReference)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(EReference newType)
  {
    EReference oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_REFERENCE_ITERATOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubType()
  {
    if (subType != null && subType.eIsProxy())
    {
      InternalEObject oldSubType = (InternalEObject)subType;
      subType = (EClass)eResolveProxy(oldSubType);
      if (subType != oldSubType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE, oldSubType, subType));
      }
    }
    return subType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass basicGetSubType()
  {
    return subType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubType(EClass newSubType)
  {
    EClass oldSubType = subType;
    subType = newSubType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE, oldSubType, subType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorIteratorAttributeAssignment> getIteratorAttributes()
  {
    if (iteratorAttributes == null)
    {
      iteratorAttributes = new EObjectContainmentEList<EditorIteratorAttributeAssignment>(EditorIteratorAttributeAssignment.class, this, GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES);
    }
    return iteratorAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorIteratorReference> getReferences()
  {
    if (references == null)
    {
      references = new EObjectContainmentEList<EditorIteratorReference>(EditorIteratorReference.class, this, GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES);
    }
    return references;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES:
        return ((InternalEList<?>)getIteratorAttributes()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES:
        return ((InternalEList<?>)getReferences()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case GTPackage.EDITOR_REFERENCE_ITERATOR__NAME:
        return getName();
      case GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE:
        if (resolve) return getSubType();
        return basicGetSubType();
      case GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES:
        return getIteratorAttributes();
      case GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES:
        return getReferences();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE:
        setType((EReference)newValue);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__NAME:
        setName((String)newValue);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE:
        setSubType((EClass)newValue);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES:
        getIteratorAttributes().clear();
        getIteratorAttributes().addAll((Collection<? extends EditorIteratorAttributeAssignment>)newValue);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES:
        getReferences().clear();
        getReferences().addAll((Collection<? extends EditorIteratorReference>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE:
        setType((EReference)null);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE:
        setSubType((EClass)null);
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES:
        getIteratorAttributes().clear();
        return;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES:
        getReferences().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_REFERENCE_ITERATOR__TYPE:
        return type != null;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GTPackage.EDITOR_REFERENCE_ITERATOR__SUB_TYPE:
        return subType != null;
      case GTPackage.EDITOR_REFERENCE_ITERATOR__ITERATOR_ATTRIBUTES:
        return iteratorAttributes != null && !iteratorAttributes.isEmpty();
      case GTPackage.EDITOR_REFERENCE_ITERATOR__REFERENCES:
        return references != null && !references.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //EditorReferenceIteratorImpl
