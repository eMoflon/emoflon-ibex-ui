/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.emoflon.ibex.gt.editor.gT.ArithmeticExpression;
import org.emoflon.ibex.gt.editor.gT.GTPackage;
import org.emoflon.ibex.gt.editor.gT.MinMaxExpression;
import org.emoflon.ibex.gt.editor.gT.MinMaxOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Min Max Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.MinMaxExpressionImpl#getMinMaxOperator <em>Min Max Operator</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.MinMaxExpressionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.MinMaxExpressionImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MinMaxExpressionImpl extends ArithmeticExpressionImpl implements MinMaxExpression
{
  /**
   * The default value of the '{@link #getMinMaxOperator() <em>Min Max Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinMaxOperator()
   * @generated
   * @ordered
   */
  protected static final MinMaxOperator MIN_MAX_OPERATOR_EDEFAULT = MinMaxOperator.MIN;

  /**
   * The cached value of the '{@link #getMinMaxOperator() <em>Min Max Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinMaxOperator()
   * @generated
   * @ordered
   */
  protected MinMaxOperator minMaxOperator = MIN_MAX_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression left;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MinMaxExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.MIN_MAX_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinMaxOperator getMinMaxOperator()
  {
    return minMaxOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinMaxOperator(MinMaxOperator newMinMaxOperator)
  {
    MinMaxOperator oldMinMaxOperator = minMaxOperator;
    minMaxOperator = newMinMaxOperator == null ? MIN_MAX_OPERATOR_EDEFAULT : newMinMaxOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.MIN_MAX_EXPRESSION__MIN_MAX_OPERATOR, oldMinMaxOperator, minMaxOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(ArithmeticExpression newLeft, NotificationChain msgs)
  {
    ArithmeticExpression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.MIN_MAX_EXPRESSION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(ArithmeticExpression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.MIN_MAX_EXPRESSION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.MIN_MAX_EXPRESSION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.MIN_MAX_EXPRESSION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(ArithmeticExpression newRight, NotificationChain msgs)
  {
    ArithmeticExpression oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.MIN_MAX_EXPRESSION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(ArithmeticExpression newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.MIN_MAX_EXPRESSION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.MIN_MAX_EXPRESSION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.MIN_MAX_EXPRESSION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.MIN_MAX_EXPRESSION__LEFT:
        return basicSetLeft(null, msgs);
      case GTPackage.MIN_MAX_EXPRESSION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.MIN_MAX_EXPRESSION__MIN_MAX_OPERATOR:
        return getMinMaxOperator();
      case GTPackage.MIN_MAX_EXPRESSION__LEFT:
        return getLeft();
      case GTPackage.MIN_MAX_EXPRESSION__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.MIN_MAX_EXPRESSION__MIN_MAX_OPERATOR:
        setMinMaxOperator((MinMaxOperator)newValue);
        return;
      case GTPackage.MIN_MAX_EXPRESSION__LEFT:
        setLeft((ArithmeticExpression)newValue);
        return;
      case GTPackage.MIN_MAX_EXPRESSION__RIGHT:
        setRight((ArithmeticExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.MIN_MAX_EXPRESSION__MIN_MAX_OPERATOR:
        setMinMaxOperator(MIN_MAX_OPERATOR_EDEFAULT);
        return;
      case GTPackage.MIN_MAX_EXPRESSION__LEFT:
        setLeft((ArithmeticExpression)null);
        return;
      case GTPackage.MIN_MAX_EXPRESSION__RIGHT:
        setRight((ArithmeticExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.MIN_MAX_EXPRESSION__MIN_MAX_OPERATOR:
        return minMaxOperator != MIN_MAX_OPERATOR_EDEFAULT;
      case GTPackage.MIN_MAX_EXPRESSION__LEFT:
        return left != null;
      case GTPackage.MIN_MAX_EXPRESSION__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (minMaxOperator: ");
    result.append(minMaxOperator);
    result.append(')');
    return result.toString();
  }

} //MinMaxExpressionImpl
