/**
 * generated by Xtext 2.25.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.emoflon.ibex.gt.editor.gT.ArithmeticExpression;
import org.emoflon.ibex.gt.editor.gT.GTPackage;
import org.emoflon.ibex.gt.editor.gT.PossibleStochasticRanges;
import org.emoflon.ibex.gt.editor.gT.StochasticDistribution;
import org.emoflon.ibex.gt.editor.gT.StochasticFunctionExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Stochastic Function Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.StochasticFunctionExpressionImpl#getOperatorRange <em>Operator Range</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.StochasticFunctionExpressionImpl#getDistribution <em>Distribution</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.StochasticFunctionExpressionImpl#getMean <em>Mean</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.StochasticFunctionExpressionImpl#isHasSd <em>Has Sd</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.StochasticFunctionExpressionImpl#getSd <em>Sd</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StochasticFunctionExpressionImpl extends EditorExpressionImpl implements StochasticFunctionExpression
{
  /**
   * The default value of the '{@link #getOperatorRange() <em>Operator Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorRange()
   * @generated
   * @ordered
   */
  protected static final PossibleStochasticRanges OPERATOR_RANGE_EDEFAULT = PossibleStochasticRanges.NEUTRAL;

  /**
   * The cached value of the '{@link #getOperatorRange() <em>Operator Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorRange()
   * @generated
   * @ordered
   */
  protected PossibleStochasticRanges operatorRange = OPERATOR_RANGE_EDEFAULT;

  /**
   * The default value of the '{@link #getDistribution() <em>Distribution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistribution()
   * @generated
   * @ordered
   */
  protected static final StochasticDistribution DISTRIBUTION_EDEFAULT = StochasticDistribution.NORMAL;

  /**
   * The cached value of the '{@link #getDistribution() <em>Distribution</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistribution()
   * @generated
   * @ordered
   */
  protected StochasticDistribution distribution = DISTRIBUTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getMean() <em>Mean</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMean()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression mean;

  /**
   * The default value of the '{@link #isHasSd() <em>Has Sd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasSd()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_SD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasSd() <em>Has Sd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasSd()
   * @generated
   * @ordered
   */
  protected boolean hasSd = HAS_SD_EDEFAULT;

  /**
   * The cached value of the '{@link #getSd() <em>Sd</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSd()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression sd;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StochasticFunctionExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.STOCHASTIC_FUNCTION_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PossibleStochasticRanges getOperatorRange()
  {
    return operatorRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperatorRange(PossibleStochasticRanges newOperatorRange)
  {
    PossibleStochasticRanges oldOperatorRange = operatorRange;
    operatorRange = newOperatorRange == null ? OPERATOR_RANGE_EDEFAULT : newOperatorRange;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__OPERATOR_RANGE, oldOperatorRange, operatorRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StochasticDistribution getDistribution()
  {
    return distribution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistribution(StochasticDistribution newDistribution)
  {
    StochasticDistribution oldDistribution = distribution;
    distribution = newDistribution == null ? DISTRIBUTION_EDEFAULT : newDistribution;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__DISTRIBUTION, oldDistribution, distribution));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getMean()
  {
    return mean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMean(ArithmeticExpression newMean, NotificationChain msgs)
  {
    ArithmeticExpression oldMean = mean;
    mean = newMean;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN, oldMean, newMean);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMean(ArithmeticExpression newMean)
  {
    if (newMean != mean)
    {
      NotificationChain msgs = null;
      if (mean != null)
        msgs = ((InternalEObject)mean).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN, null, msgs);
      if (newMean != null)
        msgs = ((InternalEObject)newMean).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN, null, msgs);
      msgs = basicSetMean(newMean, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN, newMean, newMean));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHasSd()
  {
    return hasSd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasSd(boolean newHasSd)
  {
    boolean oldHasSd = hasSd;
    hasSd = newHasSd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__HAS_SD, oldHasSd, hasSd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getSd()
  {
    return sd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSd(ArithmeticExpression newSd, NotificationChain msgs)
  {
    ArithmeticExpression oldSd = sd;
    sd = newSd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD, oldSd, newSd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSd(ArithmeticExpression newSd)
  {
    if (newSd != sd)
    {
      NotificationChain msgs = null;
      if (sd != null)
        msgs = ((InternalEObject)sd).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD, null, msgs);
      if (newSd != null)
        msgs = ((InternalEObject)newSd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD, null, msgs);
      msgs = basicSetSd(newSd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD, newSd, newSd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN:
        return basicSetMean(null, msgs);
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD:
        return basicSetSd(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__OPERATOR_RANGE:
        return getOperatorRange();
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__DISTRIBUTION:
        return getDistribution();
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN:
        return getMean();
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__HAS_SD:
        return isHasSd();
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD:
        return getSd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__OPERATOR_RANGE:
        setOperatorRange((PossibleStochasticRanges)newValue);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__DISTRIBUTION:
        setDistribution((StochasticDistribution)newValue);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN:
        setMean((ArithmeticExpression)newValue);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__HAS_SD:
        setHasSd((Boolean)newValue);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD:
        setSd((ArithmeticExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__OPERATOR_RANGE:
        setOperatorRange(OPERATOR_RANGE_EDEFAULT);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__DISTRIBUTION:
        setDistribution(DISTRIBUTION_EDEFAULT);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN:
        setMean((ArithmeticExpression)null);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__HAS_SD:
        setHasSd(HAS_SD_EDEFAULT);
        return;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD:
        setSd((ArithmeticExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__OPERATOR_RANGE:
        return operatorRange != OPERATOR_RANGE_EDEFAULT;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__DISTRIBUTION:
        return distribution != DISTRIBUTION_EDEFAULT;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__MEAN:
        return mean != null;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__HAS_SD:
        return hasSd != HAS_SD_EDEFAULT;
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION__SD:
        return sd != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operatorRange: ");
    result.append(operatorRange);
    result.append(", distribution: ");
    result.append(distribution);
    result.append(", hasSd: ");
    result.append(hasSd);
    result.append(')');
    return result.toString();
  }

} //StochasticFunctionExpressionImpl
