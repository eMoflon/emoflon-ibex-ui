/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.emoflon.ibex.gt.editor.gT.EditorAttributeConstraint;
import org.emoflon.ibex.gt.editor.gT.EditorCondition;
import org.emoflon.ibex.gt.editor.gT.EditorNode;
import org.emoflon.ibex.gt.editor.gT.EditorParameter;
import org.emoflon.ibex.gt.editor.gT.EditorPattern;
import org.emoflon.ibex.gt.editor.gT.EditorPatternType;
import org.emoflon.ibex.gt.editor.gT.EditorProbability;
import org.emoflon.ibex.gt.editor.gT.GTPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Editor Pattern</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getSuperPatterns <em>Super Patterns</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getAttributeConstraints <em>Attribute Constraints</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#isStochastic <em>Stochastic</em>}</li>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorPatternImpl#getProbability <em>Probability</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EditorPatternImpl extends MinimalEObjectImpl.Container implements EditorPattern
{
  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final EditorPatternType TYPE_EDEFAULT = EditorPatternType.PATTERN;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EditorPatternType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<EditorParameter> parameters;

  /**
   * The cached value of the '{@link #getSuperPatterns() <em>Super Patterns</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperPatterns()
   * @generated
   * @ordered
   */
  protected EList<EditorPattern> superPatterns;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<EditorNode> nodes;

  /**
   * The cached value of the '{@link #getAttributeConstraints() <em>Attribute Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeConstraints()
   * @generated
   * @ordered
   */
  protected EList<EditorAttributeConstraint> attributeConstraints;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<EditorCondition> conditions;

  /**
   * The default value of the '{@link #isStochastic() <em>Stochastic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStochastic()
   * @generated
   * @ordered
   */
  protected static final boolean STOCHASTIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStochastic() <em>Stochastic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStochastic()
   * @generated
   * @ordered
   */
  protected boolean stochastic = STOCHASTIC_EDEFAULT;

  /**
   * The cached value of the '{@link #getProbability() <em>Probability</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability()
   * @generated
   * @ordered
   */
  protected EditorProbability probability;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EditorPatternImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.EDITOR_PATTERN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorPatternType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(EditorPatternType newType)
  {
    EditorPatternType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorParameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<EditorParameter>(EditorParameter.class, this, GTPackage.EDITOR_PATTERN__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorPattern> getSuperPatterns()
  {
    if (superPatterns == null)
    {
      superPatterns = new EObjectResolvingEList<EditorPattern>(EditorPattern.class, this, GTPackage.EDITOR_PATTERN__SUPER_PATTERNS);
    }
    return superPatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorNode> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectContainmentEList<EditorNode>(EditorNode.class, this, GTPackage.EDITOR_PATTERN__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorAttributeConstraint> getAttributeConstraints()
  {
    if (attributeConstraints == null)
    {
      attributeConstraints = new EObjectContainmentEList<EditorAttributeConstraint>(EditorAttributeConstraint.class, this, GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS);
    }
    return attributeConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EditorCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectResolvingEList<EditorCondition>(EditorCondition.class, this, GTPackage.EDITOR_PATTERN__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStochastic()
  {
    return stochastic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStochastic(boolean newStochastic)
  {
    boolean oldStochastic = stochastic;
    stochastic = newStochastic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__STOCHASTIC, oldStochastic, stochastic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorProbability getProbability()
  {
    return probability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProbability(EditorProbability newProbability, NotificationChain msgs)
  {
    EditorProbability oldProbability = probability;
    probability = newProbability;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__PROBABILITY, oldProbability, newProbability);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability(EditorProbability newProbability)
  {
    if (newProbability != probability)
    {
      NotificationChain msgs = null;
      if (probability != null)
        msgs = ((InternalEObject)probability).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.EDITOR_PATTERN__PROBABILITY, null, msgs);
      if (newProbability != null)
        msgs = ((InternalEObject)newProbability).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.EDITOR_PATTERN__PROBABILITY, null, msgs);
      msgs = basicSetProbability(newProbability, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_PATTERN__PROBABILITY, newProbability, newProbability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_PATTERN__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_PATTERN__NODES:
        return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS:
        return ((InternalEList<?>)getAttributeConstraints()).basicRemove(otherEnd, msgs);
      case GTPackage.EDITOR_PATTERN__PROBABILITY:
        return basicSetProbability(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_PATTERN__ABSTRACT:
        return isAbstract();
      case GTPackage.EDITOR_PATTERN__TYPE:
        return getType();
      case GTPackage.EDITOR_PATTERN__NAME:
        return getName();
      case GTPackage.EDITOR_PATTERN__PARAMETERS:
        return getParameters();
      case GTPackage.EDITOR_PATTERN__SUPER_PATTERNS:
        return getSuperPatterns();
      case GTPackage.EDITOR_PATTERN__NODES:
        return getNodes();
      case GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS:
        return getAttributeConstraints();
      case GTPackage.EDITOR_PATTERN__CONDITIONS:
        return getConditions();
      case GTPackage.EDITOR_PATTERN__STOCHASTIC:
        return isStochastic();
      case GTPackage.EDITOR_PATTERN__PROBABILITY:
        return getProbability();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_PATTERN__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__TYPE:
        setType((EditorPatternType)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__NAME:
        setName((String)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends EditorParameter>)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__SUPER_PATTERNS:
        getSuperPatterns().clear();
        getSuperPatterns().addAll((Collection<? extends EditorPattern>)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends EditorNode>)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS:
        getAttributeConstraints().clear();
        getAttributeConstraints().addAll((Collection<? extends EditorAttributeConstraint>)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends EditorCondition>)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__STOCHASTIC:
        setStochastic((Boolean)newValue);
        return;
      case GTPackage.EDITOR_PATTERN__PROBABILITY:
        setProbability((EditorProbability)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_PATTERN__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case GTPackage.EDITOR_PATTERN__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case GTPackage.EDITOR_PATTERN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GTPackage.EDITOR_PATTERN__PARAMETERS:
        getParameters().clear();
        return;
      case GTPackage.EDITOR_PATTERN__SUPER_PATTERNS:
        getSuperPatterns().clear();
        return;
      case GTPackage.EDITOR_PATTERN__NODES:
        getNodes().clear();
        return;
      case GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS:
        getAttributeConstraints().clear();
        return;
      case GTPackage.EDITOR_PATTERN__CONDITIONS:
        getConditions().clear();
        return;
      case GTPackage.EDITOR_PATTERN__STOCHASTIC:
        setStochastic(STOCHASTIC_EDEFAULT);
        return;
      case GTPackage.EDITOR_PATTERN__PROBABILITY:
        setProbability((EditorProbability)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_PATTERN__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case GTPackage.EDITOR_PATTERN__TYPE:
        return type != TYPE_EDEFAULT;
      case GTPackage.EDITOR_PATTERN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GTPackage.EDITOR_PATTERN__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case GTPackage.EDITOR_PATTERN__SUPER_PATTERNS:
        return superPatterns != null && !superPatterns.isEmpty();
      case GTPackage.EDITOR_PATTERN__NODES:
        return nodes != null && !nodes.isEmpty();
      case GTPackage.EDITOR_PATTERN__ATTRIBUTE_CONSTRAINTS:
        return attributeConstraints != null && !attributeConstraints.isEmpty();
      case GTPackage.EDITOR_PATTERN__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case GTPackage.EDITOR_PATTERN__STOCHASTIC:
        return stochastic != STOCHASTIC_EDEFAULT;
      case GTPackage.EDITOR_PATTERN__PROBABILITY:
        return probability != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", type: ");
    result.append(type);
    result.append(", name: ");
    result.append(name);
    result.append(", stochastic: ");
    result.append(stochastic);
    result.append(')');
    return result.toString();
  }

} //EditorPatternImpl
