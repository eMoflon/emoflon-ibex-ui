/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.emoflon.ibex.gt.editor.gT.EditorAttributeExpression;
import org.emoflon.ibex.gt.editor.gT.EditorIteratorAttributeAssignmentNode;
import org.emoflon.ibex.gt.editor.gT.GTPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Editor Iterator Attribute Assignment Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.emoflon.ibex.gt.editor.gT.impl.EditorIteratorAttributeAssignmentNodeImpl#getNodeAttribute <em>Node Attribute</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EditorIteratorAttributeAssignmentNodeImpl extends EditorIteratorAttributeAssignmentImpl implements EditorIteratorAttributeAssignmentNode
{
  /**
   * The cached value of the '{@link #getNodeAttribute() <em>Node Attribute</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeAttribute()
   * @generated
   * @ordered
   */
  protected EditorAttributeExpression nodeAttribute;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EditorIteratorAttributeAssignmentNodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GTPackage.Literals.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EditorAttributeExpression getNodeAttribute()
  {
    return nodeAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeAttribute(EditorAttributeExpression newNodeAttribute, NotificationChain msgs)
  {
    EditorAttributeExpression oldNodeAttribute = nodeAttribute;
    nodeAttribute = newNodeAttribute;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE, oldNodeAttribute, newNodeAttribute);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeAttribute(EditorAttributeExpression newNodeAttribute)
  {
    if (newNodeAttribute != nodeAttribute)
    {
      NotificationChain msgs = null;
      if (nodeAttribute != null)
        msgs = ((InternalEObject)nodeAttribute).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE, null, msgs);
      if (newNodeAttribute != null)
        msgs = ((InternalEObject)newNodeAttribute).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE, null, msgs);
      msgs = basicSetNodeAttribute(newNodeAttribute, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE, newNodeAttribute, newNodeAttribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE:
        return basicSetNodeAttribute(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE:
        return getNodeAttribute();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE:
        setNodeAttribute((EditorAttributeExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE:
        setNodeAttribute((EditorAttributeExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE__NODE_ATTRIBUTE:
        return nodeAttribute != null;
    }
    return super.eIsSet(featureID);
  }

} //EditorIteratorAttributeAssignmentNodeImpl
