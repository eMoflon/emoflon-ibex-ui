/**
 * generated by Xtext 2.27.0
 */
package org.emoflon.ibex.gt.editor.gT.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.emoflon.ibex.gt.editor.gT.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.emoflon.ibex.gt.editor.gT.GTPackage
 * @generated
 */
public class GTSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GTPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GTSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GTPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GTPackage.EDITOR_GT_FILE:
      {
        EditorGTFile editorGTFile = (EditorGTFile)theEObject;
        T result = caseEditorGTFile(editorGTFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_PARAMETER_OR_NODE:
      {
        EditorParameterOrNode editorParameterOrNode = (EditorParameterOrNode)theEObject;
        T result = caseEditorParameterOrNode(editorParameterOrNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_IMPORT:
      {
        EditorImport editorImport = (EditorImport)theEObject;
        T result = caseEditorImport(editorImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_PATTERN:
      {
        EditorPattern editorPattern = (EditorPattern)theEObject;
        T result = caseEditorPattern(editorPattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_PARAMETER:
      {
        EditorParameter editorParameter = (EditorParameter)theEObject;
        T result = caseEditorParameter(editorParameter);
        if (result == null) result = caseEditorParameterOrNode(editorParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_NODE:
      {
        EditorNode editorNode = (EditorNode)theEObject;
        T result = caseEditorNode(editorNode);
        if (result == null) result = caseEditorParameterOrNode(editorNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ATTRIBUTE_CONSTRAINT:
      {
        EditorAttributeConstraint editorAttributeConstraint = (EditorAttributeConstraint)theEObject;
        T result = caseEditorAttributeConstraint(editorAttributeConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ATTRIBUTE_ASSIGNMENT:
      {
        EditorAttributeAssignment editorAttributeAssignment = (EditorAttributeAssignment)theEObject;
        T result = caseEditorAttributeAssignment(editorAttributeAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_EXPRESSION:
      {
        EditorExpression editorExpression = (EditorExpression)theEObject;
        T result = caseEditorExpression(editorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ATTRIBUTE_EXPRESSION:
      {
        EditorAttributeExpression editorAttributeExpression = (EditorAttributeExpression)theEObject;
        T result = caseEditorAttributeExpression(editorAttributeExpression);
        if (result == null) result = caseArithmeticExpression(editorAttributeExpression);
        if (result == null) result = caseEditorProbability(editorAttributeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_COUNT_EXPRESSION:
      {
        EditorCountExpression editorCountExpression = (EditorCountExpression)theEObject;
        T result = caseEditorCountExpression(editorCountExpression);
        if (result == null) result = caseArithmeticExpression(editorCountExpression);
        if (result == null) result = caseEditorProbability(editorCountExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_LITERAL_EXPRESSION:
      {
        EditorLiteralExpression editorLiteralExpression = (EditorLiteralExpression)theEObject;
        T result = caseEditorLiteralExpression(editorLiteralExpression);
        if (result == null) result = caseArithmeticExpression(editorLiteralExpression);
        if (result == null) result = caseEditorProbability(editorLiteralExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ENUM_EXPRESSION:
      {
        EditorEnumExpression editorEnumExpression = (EditorEnumExpression)theEObject;
        T result = caseEditorEnumExpression(editorEnumExpression);
        if (result == null) result = caseEditorExpression(editorEnumExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_PARAMETER_EXPRESSION:
      {
        EditorParameterExpression editorParameterExpression = (EditorParameterExpression)theEObject;
        T result = caseEditorParameterExpression(editorParameterExpression);
        if (result == null) result = caseEditorExpression(editorParameterExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_REFERENCE:
      {
        EditorReference editorReference = (EditorReference)theEObject;
        T result = caseEditorReference(editorReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_REFERENCE_ITERATOR:
      {
        EditorReferenceIterator editorReferenceIterator = (EditorReferenceIterator)theEObject;
        T result = caseEditorReferenceIterator(editorReferenceIterator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_EXPRESSION:
      {
        EditorIteratorAttributeExpression editorIteratorAttributeExpression = (EditorIteratorAttributeExpression)theEObject;
        T result = caseEditorIteratorAttributeExpression(editorIteratorAttributeExpression);
        if (result == null) result = caseArithmeticExpression(editorIteratorAttributeExpression);
        if (result == null) result = caseEditorProbability(editorIteratorAttributeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT:
      {
        EditorIteratorAttributeAssignment editorIteratorAttributeAssignment = (EditorIteratorAttributeAssignment)theEObject;
        T result = caseEditorIteratorAttributeAssignment(editorIteratorAttributeAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_ITR:
      {
        EditorIteratorAttributeAssignmentItr editorIteratorAttributeAssignmentItr = (EditorIteratorAttributeAssignmentItr)theEObject;
        T result = caseEditorIteratorAttributeAssignmentItr(editorIteratorAttributeAssignmentItr);
        if (result == null) result = caseEditorIteratorAttributeAssignment(editorIteratorAttributeAssignmentItr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ITERATOR_ATTRIBUTE_ASSIGNMENT_NODE:
      {
        EditorIteratorAttributeAssignmentNode editorIteratorAttributeAssignmentNode = (EditorIteratorAttributeAssignmentNode)theEObject;
        T result = caseEditorIteratorAttributeAssignmentNode(editorIteratorAttributeAssignmentNode);
        if (result == null) result = caseEditorIteratorAttributeAssignment(editorIteratorAttributeAssignmentNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_ITERATOR_REFERENCE:
      {
        EditorIteratorReference editorIteratorReference = (EditorIteratorReference)theEObject;
        T result = caseEditorIteratorReference(editorIteratorReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_CONDITION:
      {
        EditorCondition editorCondition = (EditorCondition)theEObject;
        T result = caseEditorCondition(editorCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_SIMPLE_CONDITION:
      {
        EditorSimpleCondition editorSimpleCondition = (EditorSimpleCondition)theEObject;
        T result = caseEditorSimpleCondition(editorSimpleCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_PROBABILITY:
      {
        EditorProbability editorProbability = (EditorProbability)theEObject;
        T result = caseEditorProbability(editorProbability);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.STOCHASTIC_FUNCTION:
      {
        StochasticFunction stochasticFunction = (StochasticFunction)theEObject;
        T result = caseStochasticFunction(stochasticFunction);
        if (result == null) result = caseEditorProbability(stochasticFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.STOCHASTIC_FUNCTION_EXPRESSION:
      {
        StochasticFunctionExpression stochasticFunctionExpression = (StochasticFunctionExpression)theEObject;
        T result = caseStochasticFunctionExpression(stochasticFunctionExpression);
        if (result == null) result = caseEditorExpression(stochasticFunctionExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.ARITHMETIC_CALCULATION_EXPRESSION:
      {
        ArithmeticCalculationExpression arithmeticCalculationExpression = (ArithmeticCalculationExpression)theEObject;
        T result = caseArithmeticCalculationExpression(arithmeticCalculationExpression);
        if (result == null) result = caseEditorExpression(arithmeticCalculationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.ARITHMETIC_EXPRESSION:
      {
        ArithmeticExpression arithmeticExpression = (ArithmeticExpression)theEObject;
        T result = caseArithmeticExpression(arithmeticExpression);
        if (result == null) result = caseEditorProbability(arithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.STRING_CONSTANT:
      {
        StringConstant stringConstant = (StringConstant)theEObject;
        T result = caseStringConstant(stringConstant);
        if (result == null) result = caseEditorLiteralExpression(stringConstant);
        if (result == null) result = caseArithmeticExpression(stringConstant);
        if (result == null) result = caseEditorProbability(stringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_CONDITION_REFERENCE:
      {
        EditorConditionReference editorConditionReference = (EditorConditionReference)theEObject;
        T result = caseEditorConditionReference(editorConditionReference);
        if (result == null) result = caseEditorSimpleCondition(editorConditionReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EDITOR_APPLICATION_CONDITION:
      {
        EditorApplicationCondition editorApplicationCondition = (EditorApplicationCondition)theEObject;
        T result = caseEditorApplicationCondition(editorApplicationCondition);
        if (result == null) result = caseEditorSimpleCondition(editorApplicationCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.ADD_EXPRESSION:
      {
        AddExpression addExpression = (AddExpression)theEObject;
        T result = caseAddExpression(addExpression);
        if (result == null) result = caseArithmeticExpression(addExpression);
        if (result == null) result = caseEditorProbability(addExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.MULT_EXPRESSION:
      {
        MultExpression multExpression = (MultExpression)theEObject;
        T result = caseMultExpression(multExpression);
        if (result == null) result = caseArithmeticExpression(multExpression);
        if (result == null) result = caseEditorProbability(multExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.EXP_EXPRESSION:
      {
        ExpExpression expExpression = (ExpExpression)theEObject;
        T result = caseExpExpression(expExpression);
        if (result == null) result = caseArithmeticExpression(expExpression);
        if (result == null) result = caseEditorProbability(expExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.MIN_MAX_EXPRESSION:
      {
        MinMaxExpression minMaxExpression = (MinMaxExpression)theEObject;
        T result = caseMinMaxExpression(minMaxExpression);
        if (result == null) result = caseArithmeticExpression(minMaxExpression);
        if (result == null) result = caseEditorProbability(minMaxExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GTPackage.ONE_PARAMETER_ARITHMETICS:
      {
        OneParameterArithmetics oneParameterArithmetics = (OneParameterArithmetics)theEObject;
        T result = caseOneParameterArithmetics(oneParameterArithmetics);
        if (result == null) result = caseArithmeticExpression(oneParameterArithmetics);
        if (result == null) result = caseEditorProbability(oneParameterArithmetics);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor GT File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor GT File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorGTFile(EditorGTFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Parameter Or Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Parameter Or Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorParameterOrNode(EditorParameterOrNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorImport(EditorImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorPattern(EditorPattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorParameter(EditorParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorNode(EditorNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Attribute Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Attribute Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorAttributeConstraint(EditorAttributeConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Attribute Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Attribute Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorAttributeAssignment(EditorAttributeAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorExpression(EditorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Attribute Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Attribute Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorAttributeExpression(EditorAttributeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Count Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Count Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorCountExpression(EditorCountExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Literal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Literal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorLiteralExpression(EditorLiteralExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Enum Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Enum Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorEnumExpression(EditorEnumExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Parameter Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Parameter Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorParameterExpression(EditorParameterExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorReference(EditorReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Reference Iterator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Reference Iterator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorReferenceIterator(EditorReferenceIterator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorIteratorAttributeExpression(EditorIteratorAttributeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorIteratorAttributeAssignment(EditorIteratorAttributeAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment Itr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment Itr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorIteratorAttributeAssignmentItr(EditorIteratorAttributeAssignmentItr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Iterator Attribute Assignment Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorIteratorAttributeAssignmentNode(EditorIteratorAttributeAssignmentNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Iterator Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Iterator Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorIteratorReference(EditorIteratorReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorCondition(EditorCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Simple Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Simple Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorSimpleCondition(EditorSimpleCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Probability</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Probability</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorProbability(EditorProbability object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stochastic Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stochastic Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStochasticFunction(StochasticFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stochastic Function Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stochastic Function Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStochasticFunctionExpression(StochasticFunctionExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Calculation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Calculation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticCalculationExpression(ArithmeticCalculationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression(ArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstant(StringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Condition Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Condition Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorConditionReference(EditorConditionReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Editor Application Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Editor Application Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEditorApplicationCondition(EditorApplicationCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddExpression(AddExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mult Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mult Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultExpression(MultExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpExpression(ExpExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Min Max Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Min Max Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinMaxExpression(MinMaxExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One Parameter Arithmetics</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One Parameter Arithmetics</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneParameterArithmetics(OneParameterArithmetics object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GTSwitch
