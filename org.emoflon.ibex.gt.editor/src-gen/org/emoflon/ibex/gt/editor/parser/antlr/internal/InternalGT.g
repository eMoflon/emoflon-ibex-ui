/*
 * generated by Xtext 2.27.0
 */
grammar InternalGT;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.emoflon.ibex.gt.editor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.emoflon.ibex.gt.editor.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.emoflon.ibex.gt.editor.services.GTGrammarAccess;

}

@parser::members {

 	private GTGrammarAccess grammarAccess;

    public InternalGTParser(TokenStream input, GTGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "EditorGTFile";
   	}

   	@Override
   	protected GTGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEditorGTFile
entryRuleEditorGTFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorGTFileRule()); }
	iv_ruleEditorGTFile=ruleEditorGTFile
	{ $current=$iv_ruleEditorGTFile.current; }
	EOF;

// Rule EditorGTFile
ruleEditorGTFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorGTFileAccess().getImportsEditorImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleEditorImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorGTFileRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorGTFileAccess().getPatternsEditorPatternParserRuleCall_1_0_0());
					}
					lv_patterns_1_0=ruleEditorPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorGTFileRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_1_0,
							"org.emoflon.ibex.gt.editor.GT.EditorPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorGTFileAccess().getConditionsEditorConditionParserRuleCall_1_1_0());
					}
					lv_conditions_2_0=ruleEditorCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorGTFileRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_2_0,
							"org.emoflon.ibex.gt.editor.GT.EditorCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEditorImport
entryRuleEditorImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorImportRule()); }
	iv_ruleEditorImport=ruleEditorImport
	{ $current=$iv_ruleEditorImport.current; }
	EOF;

// Rule EditorImport
ruleEditorImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEditorImportAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEditorPattern
entryRuleEditorPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorPatternRule()); }
	iv_ruleEditorPattern=ruleEditorPattern
	{ $current=$iv_ruleEditorPattern.current; }
	EOF;

// Rule EditorPattern
ruleEditorPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getEditorPatternAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorPatternRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorPatternAccess().getTypeEditorPatternTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleEditorPatternType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.emoflon.ibex.gt.editor.GT.EditorPatternType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEditorPatternAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getEditorPatternAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorPatternAccess().getParametersEditorParameterParserRuleCall_3_1_0_0());
						}
						lv_parameters_4_0=ruleEditorParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.emoflon.ibex.gt.editor.GT.EditorParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getEditorPatternAccess().getCommaKeyword_3_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getEditorPatternAccess().getParametersEditorParameterParserRuleCall_3_1_1_1_0());
							}
							lv_parameters_6_0=ruleEditorParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_6_0,
									"org.emoflon.ibex.gt.editor.GT.EditorParameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getEditorPatternAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		(
			otherlv_8='refines'
			{
				newLeafNode(otherlv_8, grammarAccess.getEditorPatternAccess().getRefinesKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorPatternRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getEditorPatternAccess().getSuperPatternsEditorPatternCrossReference_4_1_0());
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getEditorPatternAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEditorPatternRule());
							}
						}
						otherlv_11=RULE_ID
						{
							newLeafNode(otherlv_11, grammarAccess.getEditorPatternAccess().getSuperPatternsEditorPatternCrossReference_4_2_1_0());
						}
					)
				)
			)*
		)?
		(
			otherlv_12='{'
			{
				newLeafNode(otherlv_12, grammarAccess.getEditorPatternAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorPatternAccess().getNodesEditorNodeParserRuleCall_5_1_0_0());
						}
						lv_nodes_13_0=ruleEditorNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_13_0,
								"org.emoflon.ibex.gt.editor.GT.EditorNode");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorPatternAccess().getAttributeConstraintsEditorAttributeConstraintParserRuleCall_5_1_1_0());
						}
						lv_attributeConstraints_14_0=ruleEditorAttributeConstraint
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
							}
							add(
								$current,
								"attributeConstraints",
								lv_attributeConstraints_14_0,
								"org.emoflon.ibex.gt.editor.GT.EditorAttributeConstraint");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getEditorPatternAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
		(
			otherlv_16='when'
			{
				newLeafNode(otherlv_16, grammarAccess.getEditorPatternAccess().getWhenKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorPatternRule());
						}
					}
					otherlv_17=RULE_ID
					{
						newLeafNode(otherlv_17, grammarAccess.getEditorPatternAccess().getConditionsEditorConditionCrossReference_6_1_0());
					}
				)
			)
			(
				otherlv_18='||'
				{
					newLeafNode(otherlv_18, grammarAccess.getEditorPatternAccess().getVerticalLineVerticalLineKeyword_6_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEditorPatternRule());
							}
						}
						otherlv_19=RULE_ID
						{
							newLeafNode(otherlv_19, grammarAccess.getEditorPatternAccess().getConditionsEditorConditionCrossReference_6_2_1_0());
						}
					)
				)
			)*
		)?
		(
			(
				(
					lv_stochastic_20_0='@'
					{
						newLeafNode(lv_stochastic_20_0, grammarAccess.getEditorPatternAccess().getStochasticCommercialAtKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorPatternRule());
						}
						setWithLastConsumed($current, "stochastic", lv_stochastic_20_0 != null, "@");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorPatternAccess().getProbabilityEditorProbabilityParserRuleCall_7_1_0());
					}
					lv_probability_21_0=ruleEditorProbability
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorPatternRule());
						}
						set(
							$current,
							"probability",
							lv_probability_21_0,
							"org.emoflon.ibex.gt.editor.GT.EditorProbability");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEditorParameter
entryRuleEditorParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorParameterRule()); }
	iv_ruleEditorParameter=ruleEditorParameter
	{ $current=$iv_ruleEditorParameter.current; }
	EOF;

// Rule EditorParameter
ruleEditorParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEditorParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorParameterRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEditorParameterAccess().getTypeEDataTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorNode
entryRuleEditorNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorNodeRule()); }
	iv_ruleEditorNode=ruleEditorNode
	{ $current=$iv_ruleEditorNode.current; }
	EOF;

// Rule EditorNode
ruleEditorNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorNodeAccess().getOperatorEditorOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleEditorOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorNodeRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_local_1_0='local'
				{
					newLeafNode(lv_local_1_0, grammarAccess.getEditorNodeAccess().getLocalLocalKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorNodeRule());
					}
					setWithLastConsumed($current, "local", lv_local_1_0 != null, "local");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEditorNodeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getEditorNodeAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorNodeRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getEditorNodeAccess().getTypeEClassCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getEditorNodeAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorNodeAccess().getAttributesEditorAttributeAssignmentParserRuleCall_5_1_0_0());
						}
						lv_attributes_6_0=ruleEditorAttributeAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorNodeRule());
							}
							add(
								$current,
								"attributes",
								lv_attributes_6_0,
								"org.emoflon.ibex.gt.editor.GT.EditorAttributeAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorNodeAccess().getReferencesEditorReferenceParserRuleCall_5_1_1_0());
						}
						lv_references_7_0=ruleEditorReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorNodeRule());
							}
							add(
								$current,
								"references",
								lv_references_7_0,
								"org.emoflon.ibex.gt.editor.GT.EditorReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getEditorNodeAccess().getIteratorsEditorReferenceIteratorParserRuleCall_5_1_2_0());
						}
						lv_iterators_8_0=ruleEditorReferenceIterator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEditorNodeRule());
							}
							add(
								$current,
								"iterators",
								lv_iterators_8_0,
								"org.emoflon.ibex.gt.editor.GT.EditorReferenceIterator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getEditorNodeAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleEditorAttributeConstraint
entryRuleEditorAttributeConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorAttributeConstraintRule()); }
	iv_ruleEditorAttributeConstraint=ruleEditorAttributeConstraint
	{ $current=$iv_ruleEditorAttributeConstraint.current; }
	EOF;

// Rule EditorAttributeConstraint
ruleEditorAttributeConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='#'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorAttributeConstraintAccess().getNumberSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorAttributeConstraintAccess().getLhsEditorExpressionParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleEditorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorAttributeConstraintRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"org.emoflon.ibex.gt.editor.GT.EditorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorAttributeConstraintAccess().getRelationEditorRelationEnumRuleCall_2_0());
				}
				lv_relation_2_0=ruleEditorRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorAttributeConstraintRule());
					}
					set(
						$current,
						"relation",
						lv_relation_2_0,
						"org.emoflon.ibex.gt.editor.GT.EditorRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorAttributeConstraintAccess().getRhsEditorExpressionParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleEditorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorAttributeConstraintRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"org.emoflon.ibex.gt.editor.GT.EditorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEditorAttributeAssignment
entryRuleEditorAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorAttributeAssignmentRule()); }
	iv_ruleEditorAttributeAssignment=ruleEditorAttributeAssignment
	{ $current=$iv_ruleEditorAttributeAssignment.current; }
	EOF;

// Rule EditorAttributeAssignment
ruleEditorAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorAttributeAssignmentAccess().getFullStopKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorAttributeAssignmentRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorAttributeAssignmentAccess().getAttributeEAttributeCrossReference_1_0());
				}
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getEditorAttributeAssignmentAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorAttributeAssignmentAccess().getValueEditorExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEditorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorAttributeAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.emoflon.ibex.gt.editor.GT.EditorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEditorExpression
entryRuleEditorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorExpressionRule()); }
	iv_ruleEditorExpression=ruleEditorExpression
	{ $current=$iv_ruleEditorExpression.current; }
	EOF;

// Rule EditorExpression
ruleEditorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEditorExpressionAccess().getEditorEnumExpressionParserRuleCall_0());
		}
		this_EditorEnumExpression_0=ruleEditorEnumExpression
		{
			$current = $this_EditorEnumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEditorExpressionAccess().getEditorParameterExpressionParserRuleCall_1());
		}
		this_EditorParameterExpression_1=ruleEditorParameterExpression
		{
			$current = $this_EditorParameterExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEditorExpressionAccess().getStochasticFunctionExpressionParserRuleCall_2());
		}
		this_StochasticFunctionExpression_2=ruleStochasticFunctionExpression
		{
			$current = $this_StochasticFunctionExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEditorExpressionAccess().getArithmeticCalculationExpressionParserRuleCall_3());
		}
		this_ArithmeticCalculationExpression_3=ruleArithmeticCalculationExpression
		{
			$current = $this_ArithmeticCalculationExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEditorAttributeExpression
entryRuleEditorAttributeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorAttributeExpressionRule()); }
	iv_ruleEditorAttributeExpression=ruleEditorAttributeExpression
	{ $current=$iv_ruleEditorAttributeExpression.current; }
	EOF;

// Rule EditorAttributeExpression
ruleEditorAttributeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorAttributeExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEditorAttributeExpressionAccess().getNodeEditorNodeCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorAttributeExpressionAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorAttributeExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEditorAttributeExpressionAccess().getAttributeEAttributeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorCountExpression
entryRuleEditorCountExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorCountExpressionRule()); }
	iv_ruleEditorCountExpression=ruleEditorCountExpression
	{ $current=$iv_ruleEditorCountExpression.current; }
	EOF;

// Rule EditorCountExpression
ruleEditorCountExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='count'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorCountExpressionAccess().getCountKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorCountExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorCountExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEditorCountExpressionAccess().getInvokedPattenEditorPatternCrossReference_2_0());
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEditorCountExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleEditorLiteralExpression
entryRuleEditorLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorLiteralExpressionRule()); }
	iv_ruleEditorLiteralExpression=ruleEditorLiteralExpression
	{ $current=$iv_ruleEditorLiteralExpression.current; }
	EOF;

// Rule EditorLiteralExpression
ruleEditorLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_value_0_1='true'
					{
						newLeafNode(lv_value_0_1, grammarAccess.getEditorLiteralExpressionAccess().getValueTrueKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorLiteralExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_0_1, null);
					}
					    |
					lv_value_0_2='false'
					{
						newLeafNode(lv_value_0_2, grammarAccess.getEditorLiteralExpressionAccess().getValueFalseKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorLiteralExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_0_2, null);
					}
					    |
					{
						newCompositeNode(grammarAccess.getEditorLiteralExpressionAccess().getValueNumberParserRuleCall_0_0_2());
					}
					lv_value_0_3=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorLiteralExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_0_3,
							"org.emoflon.ibex.gt.editor.GT.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getEditorLiteralExpressionAccess().getStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_2_0=RULE_STRING
					{
						newLeafNode(lv_value_2_0, grammarAccess.getEditorLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorLiteralExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_2_0());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleEditorEnumExpression
entryRuleEditorEnumExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorEnumExpressionRule()); }
	iv_ruleEditorEnumExpression=ruleEditorEnumExpression
	{ $current=$iv_ruleEditorEnumExpression.current; }
	EOF;

// Rule EditorEnumExpression
ruleEditorEnumExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum::'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorEnumExpressionAccess().getEnumKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorEnumExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorEnumExpressionAccess().getLiteralEEnumLiteralCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorParameterExpression
entryRuleEditorParameterExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorParameterExpressionRule()); }
	iv_ruleEditorParameterExpression=ruleEditorParameterExpression
	{ $current=$iv_ruleEditorParameterExpression.current; }
	EOF;

// Rule EditorParameterExpression
ruleEditorParameterExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='param::'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorParameterExpressionAccess().getParamKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorParameterExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorParameterExpressionAccess().getParameterEditorParameterCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorReference
entryRuleEditorReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorReferenceRule()); }
	iv_ruleEditorReference=ruleEditorReference
	{ $current=$iv_ruleEditorReference.current; }
	EOF;

// Rule EditorReference
ruleEditorReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorReferenceAccess().getOperatorEditorOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleEditorOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorReferenceRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorReferenceAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorReferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEditorReferenceAccess().getTypeEReferenceCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getEditorReferenceAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorReferenceRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getEditorReferenceAccess().getTargetEditorNodeCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorReferenceIterator
entryRuleEditorReferenceIterator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorReferenceIteratorRule()); }
	iv_ruleEditorReferenceIterator=ruleEditorReferenceIterator
	{ $current=$iv_ruleEditorReferenceIterator.current; }
	EOF;

// Rule EditorReferenceIterator
ruleEditorReferenceIterator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forEach'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorReferenceIteratorAccess().getForEachKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorReferenceIteratorRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorReferenceIteratorAccess().getTypeEReferenceCrossReference_1_0());
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getEditorReferenceIteratorAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getEditorReferenceIteratorAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorReferenceIteratorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4='<'
			{
				newLeafNode(otherlv_4, grammarAccess.getEditorReferenceIteratorAccess().getLessThanSignKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorReferenceIteratorRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getEditorReferenceIteratorAccess().getSubTypeEClassCrossReference_4_1_0());
					}
				)
			)
			otherlv_6='>'
			{
				newLeafNode(otherlv_6, grammarAccess.getEditorReferenceIteratorAccess().getGreaterThanSignKeyword_4_2());
			}
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getEditorReferenceIteratorAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorReferenceIteratorAccess().getIteratorAttributesEditorIteratorAttributeAssignmentParserRuleCall_6_0_0());
					}
					lv_iteratorAttributes_8_0=ruleEditorIteratorAttributeAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorReferenceIteratorRule());
						}
						add(
							$current,
							"iteratorAttributes",
							lv_iteratorAttributes_8_0,
							"org.emoflon.ibex.gt.editor.GT.EditorIteratorAttributeAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorReferenceIteratorAccess().getReferencesEditorIteratorReferenceParserRuleCall_6_1_0());
					}
					lv_references_9_0=ruleEditorIteratorReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorReferenceIteratorRule());
						}
						add(
							$current,
							"references",
							lv_references_9_0,
							"org.emoflon.ibex.gt.editor.GT.EditorIteratorReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getEditorReferenceIteratorAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEditorIteratorAttributeExpression
entryRuleEditorIteratorAttributeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorIteratorAttributeExpressionRule()); }
	iv_ruleEditorIteratorAttributeExpression=ruleEditorIteratorAttributeExpression
	{ $current=$iv_ruleEditorIteratorAttributeExpression.current; }
	EOF;

// Rule EditorIteratorAttributeExpression
ruleEditorIteratorAttributeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='iterator::'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorIteratorAttributeExpressionAccess().getIteratorKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorIteratorAttributeExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorIteratorAttributeExpressionAccess().getIteratorEditorReferenceIteratorCrossReference_1_0());
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getEditorIteratorAttributeExpressionAccess().getFullStopKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorIteratorAttributeExpressionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getEditorIteratorAttributeExpressionAccess().getAttributeEAttributeCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorIteratorAttributeAssignment
entryRuleEditorIteratorAttributeAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentRule()); }
	iv_ruleEditorIteratorAttributeAssignment=ruleEditorIteratorAttributeAssignment
	{ $current=$iv_ruleEditorIteratorAttributeAssignment.current; }
	EOF;

// Rule EditorIteratorAttributeAssignment
ruleEditorIteratorAttributeAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentAccess().getEditorIteratorAttributeAssignmentItrParserRuleCall_0());
		}
		this_EditorIteratorAttributeAssignmentItr_0=ruleEditorIteratorAttributeAssignmentItr
		{
			$current = $this_EditorIteratorAttributeAssignmentItr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentAccess().getEditorIteratorAttributeAssignmentNodeParserRuleCall_1());
		}
		this_EditorIteratorAttributeAssignmentNode_1=ruleEditorIteratorAttributeAssignmentNode
		{
			$current = $this_EditorIteratorAttributeAssignmentNode_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEditorIteratorAttributeAssignmentItr
entryRuleEditorIteratorAttributeAssignmentItr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentItrRule()); }
	iv_ruleEditorIteratorAttributeAssignmentItr=ruleEditorIteratorAttributeAssignmentItr
	{ $current=$iv_ruleEditorIteratorAttributeAssignmentItr.current; }
	EOF;

// Rule EditorIteratorAttributeAssignmentItr
ruleEditorIteratorAttributeAssignmentItr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentItrAccess().getIteratorAttributeEditorIteratorAttributeExpressionParserRuleCall_0_0());
				}
				lv_iteratorAttribute_0_0=ruleEditorIteratorAttributeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorIteratorAttributeAssignmentItrRule());
					}
					set(
						$current,
						"iteratorAttribute",
						lv_iteratorAttribute_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorIteratorAttributeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorIteratorAttributeAssignmentItrAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentItrAccess().getValueEditorExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleEditorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorIteratorAttributeAssignmentItrRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.emoflon.ibex.gt.editor.GT.EditorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEditorIteratorAttributeAssignmentNode
entryRuleEditorIteratorAttributeAssignmentNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentNodeRule()); }
	iv_ruleEditorIteratorAttributeAssignmentNode=ruleEditorIteratorAttributeAssignmentNode
	{ $current=$iv_ruleEditorIteratorAttributeAssignmentNode.current; }
	EOF;

// Rule EditorIteratorAttributeAssignmentNode
ruleEditorIteratorAttributeAssignmentNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentNodeAccess().getNodeAttributeEditorAttributeExpressionParserRuleCall_0_0());
				}
				lv_nodeAttribute_0_0=ruleEditorAttributeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorIteratorAttributeAssignmentNodeRule());
					}
					set(
						$current,
						"nodeAttribute",
						lv_nodeAttribute_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorAttributeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getEditorIteratorAttributeAssignmentNodeAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorIteratorAttributeAssignmentNodeAccess().getValueEditorExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleEditorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorIteratorAttributeAssignmentNodeRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.emoflon.ibex.gt.editor.GT.EditorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEditorIteratorReference
entryRuleEditorIteratorReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorIteratorReferenceRule()); }
	iv_ruleEditorIteratorReference=ruleEditorIteratorReference
	{ $current=$iv_ruleEditorIteratorReference.current; }
	EOF;

// Rule EditorIteratorReference
ruleEditorIteratorReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorIteratorReferenceAccess().getOperatorEditorOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleEditorOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorIteratorReferenceRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"org.emoflon.ibex.gt.editor.GT.EditorOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorIteratorReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEditorIteratorReferenceAccess().getSourceEditorNodeCrossReference_1_0());
				}
			)
		)
		otherlv_2='-'
		{
			newLeafNode(otherlv_2, grammarAccess.getEditorIteratorReferenceAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorIteratorReferenceRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getEditorIteratorReferenceAccess().getTypeEReferenceCrossReference_3_0());
				}
			)
		)
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getEditorIteratorReferenceAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorIteratorReferenceRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getEditorIteratorReferenceAccess().getTargetEditorReferenceIteratorCrossReference_5_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEditorCondition
entryRuleEditorCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorConditionRule()); }
	iv_ruleEditorCondition=ruleEditorCondition
	{ $current=$iv_ruleEditorCondition.current; }
	EOF;

// Rule EditorCondition
ruleEditorCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='condition'
		{
			newLeafNode(otherlv_0, grammarAccess.getEditorConditionAccess().getConditionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEditorConditionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEditorConditionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getEditorConditionAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEditorConditionAccess().getConditionsEditorSimpleConditionParserRuleCall_3_0());
				}
				lv_conditions_3_0=ruleEditorSimpleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEditorConditionRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_3_0,
						"org.emoflon.ibex.gt.editor.GT.EditorSimpleCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='&&'
			{
				newLeafNode(otherlv_4, grammarAccess.getEditorConditionAccess().getAmpersandAmpersandKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorConditionAccess().getConditionsEditorSimpleConditionParserRuleCall_4_1_0());
					}
					lv_conditions_5_0=ruleEditorSimpleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorConditionRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_5_0,
							"org.emoflon.ibex.gt.editor.GT.EditorSimpleCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEditorSimpleCondition
entryRuleEditorSimpleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorSimpleConditionRule()); }
	iv_ruleEditorSimpleCondition=ruleEditorSimpleCondition
	{ $current=$iv_ruleEditorSimpleCondition.current; }
	EOF;

// Rule EditorSimpleCondition
ruleEditorSimpleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getEditorSimpleConditionAccess().getEditorConditionReferenceAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorSimpleConditionRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getEditorSimpleConditionAccess().getConditionEditorConditionCrossReference_0_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getEditorSimpleConditionAccess().getEditorApplicationConditionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEditorSimpleConditionAccess().getTypeEditorApplicationConditionTypeEnumRuleCall_1_1_0());
					}
					lv_type_3_0=ruleEditorApplicationConditionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEditorSimpleConditionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.emoflon.ibex.gt.editor.GT.EditorApplicationConditionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEditorSimpleConditionRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getEditorSimpleConditionAccess().getPatternEditorPatternCrossReference_1_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEditorProbability
entryRuleEditorProbability returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEditorProbabilityRule()); }
	iv_ruleEditorProbability=ruleEditorProbability
	{ $current=$iv_ruleEditorProbability.current; }
	EOF;

// Rule EditorProbability
ruleEditorProbability returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEditorProbabilityAccess().getStochasticFunctionParserRuleCall_0());
		}
		this_StochasticFunction_0=ruleStochasticFunction
		{
			$current = $this_StochasticFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEditorProbabilityAccess().getArithmeticExpressionParserRuleCall_1());
		}
		this_ArithmeticExpression_1=ruleArithmeticExpression
		{
			$current = $this_ArithmeticExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStochasticFunction
entryRuleStochasticFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStochasticFunctionRule()); }
	iv_ruleStochasticFunction=ruleStochasticFunction
	{ $current=$iv_ruleStochasticFunction.current; }
	EOF;

// Rule StochasticFunction
ruleStochasticFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStochasticFunctionAccess().getFunctionExpressionStochasticFunctionExpressionParserRuleCall_0_0());
				}
				lv_functionExpression_0_0=ruleStochasticFunctionExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStochasticFunctionRule());
					}
					set(
						$current,
						"functionExpression",
						lv_functionExpression_0_0,
						"org.emoflon.ibex.gt.editor.GT.StochasticFunctionExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStochasticFunctionAccess().getParameterArithmeticExpressionParserRuleCall_1_0());
				}
				lv_parameter_1_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStochasticFunctionRule());
					}
					set(
						$current,
						"parameter",
						lv_parameter_1_0,
						"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleStochasticFunctionExpression
entryRuleStochasticFunctionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStochasticFunctionExpressionRule()); }
	iv_ruleStochasticFunctionExpression=ruleStochasticFunctionExpression
	{ $current=$iv_ruleStochasticFunctionExpression.current; }
	EOF;

// Rule StochasticFunctionExpression
ruleStochasticFunctionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStochasticFunctionExpressionAccess().getOperatorRangeStochasticRangeEnumRuleCall_0_0());
				}
				lv_operatorRange_0_0=ruleStochasticRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStochasticFunctionExpressionRule());
					}
					set(
						$current,
						"operatorRange",
						lv_operatorRange_0_0,
						"org.emoflon.ibex.gt.editor.GT.StochasticRange");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStochasticFunctionExpressionAccess().getDistributionStochasticDistributionEnumRuleCall_1_0());
				}
				lv_distribution_1_0=ruleStochasticDistribution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStochasticFunctionExpressionRule());
					}
					set(
						$current,
						"distribution",
						lv_distribution_1_0,
						"org.emoflon.ibex.gt.editor.GT.StochasticDistribution");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getStochasticFunctionExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStochasticFunctionExpressionAccess().getMeanArithmeticExpressionParserRuleCall_3_0());
				}
				lv_mean_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStochasticFunctionExpressionRule());
					}
					set(
						$current,
						"mean",
						lv_mean_3_0,
						"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_hasSd_4_0=','
					{
						newLeafNode(lv_hasSd_4_0, grammarAccess.getStochasticFunctionExpressionAccess().getHasSdCommaKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStochasticFunctionExpressionRule());
						}
						setWithLastConsumed($current, "hasSd", lv_hasSd_4_0 != null, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStochasticFunctionExpressionAccess().getSdArithmeticExpressionParserRuleCall_4_1_0());
					}
					lv_sd_5_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStochasticFunctionExpressionRule());
						}
						set(
							$current,
							"sd",
							lv_sd_5_0,
							"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getStochasticFunctionExpressionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleArithmeticCalculationExpression
entryRuleArithmeticCalculationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticCalculationExpressionRule()); }
	iv_ruleArithmeticCalculationExpression=ruleArithmeticCalculationExpression
	{ $current=$iv_ruleArithmeticCalculationExpression.current; }
	EOF;

// Rule ArithmeticCalculationExpression
ruleArithmeticCalculationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArithmeticCalculationExpressionAccess().getExpressionArithmeticExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleArithmeticExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArithmeticCalculationExpressionRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAddExpressionParserRuleCall());
	}
	this_AddExpression_0=ruleAddExpression
	{
		$current = $this_AddExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	iv_ruleAddExpression=ruleAddExpression
	{ $current=$iv_ruleAddExpression.current; }
	EOF;

// Rule AddExpression
ruleAddExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExpressionAccess().getMultExpressionParserRuleCall_0());
		}
		this_MultExpression_0=ruleMultExpression
		{
			$current = $this_MultExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddExpressionAccess().getAddExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getAddOperatorAddOperatorEnumRuleCall_1_1_0());
					}
					lv_addOperator_2_0=ruleAddOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"addOperator",
							lv_addOperator_2_0,
							"org.emoflon.ibex.gt.editor.GT.AddOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getRightMultExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.emoflon.ibex.gt.editor.GT.MultExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	iv_ruleMultExpression=ruleMultExpression
	{ $current=$iv_ruleMultExpression.current; }
	EOF;

// Rule MultExpression
ruleMultExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultExpressionAccess().getExpExpressionParserRuleCall_0());
		}
		this_ExpExpression_0=ruleExpExpression
		{
			$current = $this_ExpExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultExpressionAccess().getMultExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultExpressionAccess().getMultOperatorMultOperatorEnumRuleCall_1_1_0());
					}
					lv_multOperator_2_0=ruleMultOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultExpressionRule());
						}
						set(
							$current,
							"multOperator",
							lv_multOperator_2_0,
							"org.emoflon.ibex.gt.editor.GT.MultOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultExpressionAccess().getRightExpExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.emoflon.ibex.gt.editor.GT.ExpExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpExpression
entryRuleExpExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpExpressionRule()); }
	iv_ruleExpExpression=ruleExpExpression
	{ $current=$iv_ruleExpExpression.current; }
	EOF;

// Rule ExpExpression
ruleExpExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpExpressionAccess().getMinMaxExpressionParserRuleCall_0_0());
			}
			this_MinMaxExpression_0=ruleMinMaxExpression
			{
				$current = $this_MinMaxExpression_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getExpExpressionAccess().getOneParameterArithmeticsParserRuleCall_0_1());
			}
			this_OneParameterArithmetics_1=ruleOneParameterArithmetics
			{
				$current = $this_OneParameterArithmetics_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpExpressionAccess().getExpExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_3='^'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpExpressionAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExpExpressionAccess().getRightMinMaxExpressionParserRuleCall_1_2_0_0());
						}
						lv_right_4_1=ruleMinMaxExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpExpressionRule());
							}
							set(
								$current,
								"right",
								lv_right_4_1,
								"org.emoflon.ibex.gt.editor.GT.MinMaxExpression");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getExpExpressionAccess().getRightOneParameterArithmeticsParserRuleCall_1_2_0_1());
						}
						lv_right_4_2=ruleOneParameterArithmetics
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpExpressionRule());
							}
							set(
								$current,
								"right",
								lv_right_4_2,
								"org.emoflon.ibex.gt.editor.GT.OneParameterArithmetics");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleMinMaxExpression
entryRuleMinMaxExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinMaxExpressionRule()); }
	iv_ruleMinMaxExpression=ruleMinMaxExpression
	{ $current=$iv_ruleMinMaxExpression.current; }
	EOF;

// Rule MinMaxExpression
ruleMinMaxExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMinMaxExpressionAccess().getMinMaxExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getMinMaxOperatorMinMaxOperatorEnumRuleCall_1_0());
				}
				lv_minMaxOperator_1_0=ruleMinMaxOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
					}
					set(
						$current,
						"minMaxOperator",
						lv_minMaxOperator_1_0,
						"org.emoflon.ibex.gt.editor.GT.MinMaxOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMinMaxExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getLeftArithmeticExpressionParserRuleCall_3_0());
				}
				lv_left_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_3_0,
						"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getMinMaxExpressionAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getRightArithmeticExpressionParserRuleCall_5_0());
				}
				lv_right_5_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
					}
					set(
						$current,
						"right",
						lv_right_5_0,
						"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMinMaxExpressionAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleOneParameterArithmetics
entryRuleOneParameterArithmetics returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOneParameterArithmeticsRule()); }
	iv_ruleOneParameterArithmetics=ruleOneParameterArithmetics
	{ $current=$iv_ruleOneParameterArithmetics.current; }
	EOF;

// Rule OneParameterArithmetics
ruleOneParameterArithmetics returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOneParameterArithmeticsAccess().getOneParameterArithmeticsAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_negative_1_0='-'
					{
						newLeafNode(lv_negative_1_0, grammarAccess.getOneParameterArithmeticsAccess().getNegativeHyphenMinusKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneParameterArithmeticsRule());
						}
						setWithLastConsumed($current, "negative", lv_negative_1_0 != null, "-");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getOneParameterArithmeticsAccess().getOperatorOneParameterOperatorEnumRuleCall_0_2_0());
					}
					lv_operator_2_0=ruleOneParameterOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOneParameterArithmeticsRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.emoflon.ibex.gt.editor.GT.OneParameterOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getOneParameterArithmeticsAccess().getLeftParenthesisKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOneParameterArithmeticsAccess().getExpressionArithmeticExpressionParserRuleCall_0_4_0());
					}
					lv_expression_4_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOneParameterArithmeticsRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.emoflon.ibex.gt.editor.GT.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getOneParameterArithmeticsAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getOneParameterArithmeticsAccess().getArithmeticAttributeParserRuleCall_1());
		}
		this_ArithmeticAttribute_6=ruleArithmeticAttribute
		{
			$current = $this_ArithmeticAttribute_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArithmeticAttribute
entryRuleArithmeticAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticAttributeRule()); }
	iv_ruleArithmeticAttribute=ruleArithmeticAttribute
	{ $current=$iv_ruleArithmeticAttribute.current; }
	EOF;

// Rule ArithmeticAttribute
ruleArithmeticAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArithmeticAttributeAccess().getEditorLiteralExpressionParserRuleCall_0());
		}
		this_EditorLiteralExpression_0=ruleEditorLiteralExpression
		{
			$current = $this_EditorLiteralExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticAttributeAccess().getEditorAttributeExpressionParserRuleCall_1());
		}
		this_EditorAttributeExpression_1=ruleEditorAttributeExpression
		{
			$current = $this_EditorAttributeExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticAttributeAccess().getEditorIteratorAttributeExpressionParserRuleCall_2());
		}
		this_EditorIteratorAttributeExpression_2=ruleEditorIteratorAttributeExpression
		{
			$current = $this_EditorIteratorAttributeExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArithmeticAttributeAccess().getEditorCountExpressionParserRuleCall_3());
		}
		this_EditorCountExpression_3=ruleEditorCountExpression
		{
			$current = $this_EditorCountExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Rule EditorPatternType
ruleEditorPatternType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='pattern'
			{
				$current = grammarAccess.getEditorPatternTypeAccess().getPATTERNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEditorPatternTypeAccess().getPATTERNEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='rule'
			{
				$current = grammarAccess.getEditorPatternTypeAccess().getRULEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEditorPatternTypeAccess().getRULEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EditorOperator
ruleEditorOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='$context'
			{
				$current = grammarAccess.getEditorOperatorAccess().getCONTEXTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEditorOperatorAccess().getCONTEXTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='++'
			{
				$current = grammarAccess.getEditorOperatorAccess().getCREATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEditorOperatorAccess().getCREATEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='--'
			{
				$current = grammarAccess.getEditorOperatorAccess().getDELETEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEditorOperatorAccess().getDELETEEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule EditorRelation
ruleEditorRelation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<'
			{
				$current = grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule EditorApplicationConditionType
ruleEditorApplicationConditionType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='enforce'
			{
				$current = grammarAccess.getEditorApplicationConditionTypeAccess().getPOSITIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEditorApplicationConditionTypeAccess().getPOSITIVEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='forbid'
			{
				$current = grammarAccess.getEditorApplicationConditionTypeAccess().getNEGATIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEditorApplicationConditionTypeAccess().getNEGATIVEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule StochasticRange
ruleStochasticRange returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getStochasticRangeAccess().getPOSITIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStochasticRangeAccess().getPOSITIVEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getStochasticRangeAccess().getNEGATIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStochasticRangeAccess().getNEGATIVEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule StochasticDistribution
ruleStochasticDistribution returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='N'
			{
				$current = grammarAccess.getStochasticDistributionAccess().getNORMALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStochasticDistributionAccess().getNORMALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='U'
			{
				$current = grammarAccess.getStochasticDistributionAccess().getUNIFORMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStochasticDistributionAccess().getUNIFORMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Exp'
			{
				$current = grammarAccess.getStochasticDistributionAccess().getEXPONENTIALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStochasticDistributionAccess().getEXPONENTIALEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule MultOperator
ruleMultOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultOperatorAccess().getDIVISIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultOperatorAccess().getDIVISIONEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='%'
			{
				$current = grammarAccess.getMultOperatorAccess().getMODULOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMultOperatorAccess().getMODULOEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule MinMaxOperator
ruleMinMaxOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='min'
			{
				$current = grammarAccess.getMinMaxOperatorAccess().getMINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMinMaxOperatorAccess().getMINEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='max'
			{
				$current = grammarAccess.getMinMaxOperatorAccess().getMAXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMinMaxOperatorAccess().getMAXEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AddOperator
ruleAddOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAddOperatorAccess().getADDITIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getADDITIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAddOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule OneParameterOperator
ruleOneParameterOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='sqrt'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getROOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOneParameterOperatorAccess().getROOTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='abs'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getABSOLUTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOneParameterOperatorAccess().getABSOLUTEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='sin'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getSINEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOneParameterOperatorAccess().getSINEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='cos'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getCOSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOneParameterOperatorAccess().getCOSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='tan'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getTANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOneParameterOperatorAccess().getTANEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='exp'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getE_EXPONENTIALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOneParameterOperatorAccess().getE_EXPONENTIALEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='log'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getLOGARITHMUSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getOneParameterOperatorAccess().getLOGARITHMUSEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='ln'
			{
				$current = grammarAccess.getOneParameterOperatorAccess().getNAT_LOGEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getOneParameterOperatorAccess().getNAT_LOGEnumLiteralDeclaration_7());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
