grammar org.emoflon.ibex.gt.editor.GT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gT "http://www.emoflon.org/ibex/gt/editor/GT"

EditorGTFile:
	(imports+=EditorImport)*
	(patterns+=EditorPattern |
	conditions+=EditorCondition |
	attributeConditionLibraries+=EditorAttributeConditionLibrary)*;

EditorImport:
	'import' name=STRING;

EditorPattern:
	(abstract?='abstract')? type=EditorPatternType name=ID
	('('
	(parameters+=EditorParameter (',' parameters+=EditorParameter)*)?
	')')?
	('refines' superPatterns+=[EditorPattern] (',' superPatterns+=[EditorPattern])*)?
	('{'
	(nodes+=EditorNode)*
	'}')?
	('when' conditions+=[EditorCondition] ('||' conditions+=[EditorCondition])*)?;

enum EditorPatternType:
	PATTERN='pattern' |
	RULE='rule';

EditorParameter:
	name=ID ':' type=[ecore::EDataType];

// Nodes
EditorNode:
	(operator=OperatorInEditor)?
	name=ID ':' type=[ecore::EClass] (binding=EditorBindingExpression)?
	('{'
	attributes+=EditorAttribute*
	references+=EditorReference*
	attributeConditions+=EditorPatternAttributeCondition*
	'}')?;

enum EditorOperator:
	CONTEXT |
	CREATE |
	DELETE;

enum OperatorInEditor returns EditorOperator:
	CREATE='++' |
	DELETE='--';

	// Attribute Assignments and Conditions
EditorAttribute:
	'.' attribute=[ecore::EAttribute] relation=EditorRelation value=EditorExpression;

enum EditorRelation:
	ASSIGNMENT=':=' |
	GREATER='>' |
	GREATER_OR_EQUAL='>=' |
	EQUAL='==' |
	UNEQUAL='!=' |
	SMALLER_OR_EQUAL='<=' |
	SMALLER='<';

EditorExpression:
	EditorAttributeExpression | EditorLiteralExpression | EditorEnumExpression | EditorParameterExpression;

EditorAttributeExpression:
	node=[EditorNode] '.' attribute=[ecore::EAttribute];

EditorLiteralExpression:
	value=('true' | 'false' | Number) |
	{StringConstant} value=STRING;

Number:
	('-')? INT ('.' INT)?;

EditorEnumExpression:
	'enum::' literal=[ecore::EEnumLiteral];

EditorParameterExpression:
	'param::' parameter=[EditorParameter];

	// References
EditorReference:
	(operator=OperatorInEditor)? '-' type=[ecore::EReference] '->' target=[EditorNode];

EditorPatternAttributeCondition:
    {EditorPatternAttributeCondition}
    'attributeCondition' '{'
    constraints += EditorPatternAttributeConstraint*
    '}'
;

EditorPatternAttributeConstraint:
    EditorPatternAttributeConstraintVariable | EditorPatternAttributeConstraintPredicate
;

EditorPatternAttributeConstraintVariable:
    name = ID ':' eType = [ecore::EDataType]
;

EditorPatternAttributeConstraintPredicate:
    name=EditorAttributeConditionSpecification
    '(' args += EditorPatternAttributeConstraintArgument? (',' args += EditorPatternAttributeConstraintArgument)*
    ')'
;

EditorPatternAttributeConstraintArgument:
     EditorPatternAttributeConstraintAttributeValueExpression | EditorLiteralExpression | EditorEnumExpression
;

EditorPatternAttributeConstraintAttributeValueExpression:
    editorNode = [EditorNode] '.' name = [ecore::EAttribute] (free ?= "'")?
;


// Graph Conditions
EditorCondition:
	'condition' name=ID '='
	conditions+=EditorSimpleCondition ('&&' conditions+=EditorSimpleCondition)*;

EditorSimpleCondition:
	{EditorConditionReference}
	condition=[EditorCondition] |
	{EditorApplicationCondition}
	type=EditorApplicationConditionType pattern=[EditorPattern];

enum EditorApplicationConditionType:
	POSITIVE='enforce' |
	NEGATIVE='forbid';

EditorBindingExpression:
	':=' node=[EditorNode];

EditorAttributeConditionLibrary:
    {EditorAttributeConditionLibrary}
    'attributeConditionLibrary'
    (conditionSpecifications+=EditorAttributeConditionSpecification)*
;

EditorAttributeConditionSpecification:
    name = ID
    ('('
    (parameters+=EditorAttributeConditionParameter (',' parameters+=EditorAttributeConditionParameter)*)?
    ')')
    ('{'
    (operationalizations+=EditorAttributeConditionOperationalization*)
    '}')?
;

EditorAttributeConditionParameter:
    name=ID ':' type=[ecore::EDataType]
;

EditorAttributeConditionOperationalization:
    'op' '[' adornments+=EditorAttributeConditionAdornment+ ']'
    '{'
        target=EditorAttributeConditionTargetPlatform ':' specification = STRING
    '}'
;

enum EditorAttributeConditionAdornment:
    BOUND='B' |
    FREE='F';

enum EditorAttributeConditionTargetPlatform:
    JAVA='Java' |
    CONTIKI='Contiki';

// This rule serves to have a common super class for pattern parameters and editor nodes
EditorParameterOrNode:
    (EditorNode | EditorParameter);