grammar org.emoflon.ibex.gt.editor.GT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gT "http://www.emoflon.org/ibex/gt/editor/GT"

EditorGTFile:
 	(imports+=EditorImport)*
 	(patterns+=EditorPattern | conditions+=EditorCondition)*;
  
  // This rule serves to have a common super class for pattern parameters and editor nodes
EditorParameterOrNode:
  (EditorNode | EditorParameter);

EditorImport:
  'import' name=STRING;

EditorPattern:
	(optimize ?= '@optimize')?
  (abstract?='abstract')? type=EditorPatternType name=ID
  ('('
  (parameters+=EditorParameter (',' parameters+=EditorParameter)*)?
  ')')?
  ('refines' superPatterns+=[EditorPattern|ID] (',' superPatterns+=[EditorPattern|ID])*)?
  ('{'
  (nodes+=EditorNode | attributeConstraints+=EditorAttributeConstraint )*
  '}')?
  ('when' conditions+=[EditorCondition|ID] ('||' conditions+=[EditorCondition|ID])*)?
  (stochastic ?='@' probability = EditorProbability)?;

enum EditorPatternType:
  PATTERN='pattern' |
  RULE='rule';

EditorParameter:
  name=ID ':' type=[ecore::EDataType];

  // Nodes
EditorNode:
  (operator=EditorOperator)? (local?='local')?
  name=ID ':' type=[ecore::EClass] ('{'
  (attributes+=EditorAttributeAssignment | references+=EditorReference | iterators+=EditorReferenceIterator)*
  '}')?;

enum EditorOperator:
  CONTEXT='$context' |
  CREATE='++' |
  DELETE='--';

  // Attribute Assignments and Conditions
EditorAttributeConstraint:
	'#' lhs=EditorExpression relation=EditorRelation rhs=EditorExpression;
  
EditorAttributeAssignment:
	'.' attribute=[ecore::EAttribute] ':=' value=EditorExpression;

enum EditorRelation:
  GREATER='>' |
  GREATER_OR_EQUAL='>=' |
  EQUAL='==' |
  UNEQUAL='!=' |
  SMALLER_OR_EQUAL='<=' |
  SMALLER='<';

EditorExpression:
  EditorEnumExpression | 
  EditorParameterExpression | StochasticFunctionExpression | ArithmeticCalculationExpression;

EditorAttributeExpression:
  node=[EditorNode|ID] '.' attribute=[ecore::EAttribute];
  
EditorCountExpression:
	'count' '(' invokedPatten = [EditorPattern|ID] ')'
;

EditorLiteralExpression:
  value=('true' | 'false' | Number) |
  {StringConstant} value=STRING;

Number:
  ('-')? INT ('.' INT)?;

EditorEnumExpression:
  'enum::' literal=[ecore::EEnumLiteral];

EditorParameterExpression:
  'param::' parameter=[EditorParameter|ID];

// References
EditorReference:
  (operator=EditorOperator)? '-' type=[ecore::EReference] '->' target=[EditorNode|ID];

EditorReferenceIterator:
	'forEach' type=[ecore::EReference] '->' name=ID '{'
		(iteratorAttributes+=EditorIteratorAttributeAssignment | references+=EditorIteratorReference)+
	'}'
;

EditorIteratorAttributeAssignment:
	EditorIteratorAttributeAssignmentItr | EditorIteratorAttributeAssignmentNode;
	
EditorIteratorAttributeAssignmentItr:
 	'iterator' iterator=[EditorReferenceIterator] '.' attribute=[ecore::EAttribute] ':=' value=EditorExpression;
	
EditorIteratorAttributeAssignmentNode:
 	'node' node=[EditorNode] '.' attribute=[ecore::EAttribute] ':=' value=EditorExpression;

EditorIteratorReference:
 	operator=EditorOperator source=[EditorNode|ID] '-' type=[ecore::EReference] '->' target=[EditorReferenceIterator|ID];

// Graph Conditions
EditorCondition:
  'condition' name=ID '='
  conditions+=EditorSimpleCondition ('&&' conditions+=EditorSimpleCondition)*;

EditorSimpleCondition:
  {EditorConditionReference}
  condition=[EditorCondition|ID] |
  {EditorApplicationCondition}
  type=EditorApplicationConditionType pattern=[EditorPattern|ID];

enum EditorApplicationConditionType:
  POSITIVE='enforce' |
  NEGATIVE='forbid';

// stochastic functions
EditorProbability:
	StochasticFunction | ArithmeticExpression;
	
StochasticFunction:
	functionExpression = StochasticFunctionExpression (parameter = ArithmeticExpression)?;

StochasticFunctionExpression:
	(operatorRange = StochasticRange)? distribution = StochasticDistribution 
	"(" mean = ArithmeticExpression ( hasSd ?= "," sd = ArithmeticExpression )?")";

enum PossibleStochasticRanges:
	NEUTRAL | POSITIVE | NEGATIVE;
	
enum StochasticRange returns PossibleStochasticRanges:
	POSITIVE = "+" | NEGATIVE = "-";

enum StochasticDistribution:
	NORMAL = "N" | UNIFORM = "U" | EXPONENTIAL = "Exp";	

//arithmetic functions
enum MultOperator:
	MULTIPLICATION = "*" | DIVISION = "/" | MODULO = "%";
	
enum MinMaxOperator:
	MIN = "min" | MAX = "max"
;
	
enum AddOperator:
	ADDITION = "+" | SUBTRACTION ="-";
	
enum AllOneParameterOperators:
	BRACKET | ROOT | ABSOLUTE | SIN | COS | TAN | E_EXPONENTIAL | LOGARITHMUS | NAT_LOG;
	
enum OneParameterOperator returns AllOneParameterOperators:
	ROOT = "sqrt" | ABSOLUTE = "abs" | SIN = "sin" | COS = "cos" | TAN = "tan" | 
	E_EXPONENTIAL ="exp" | LOGARITHMUS = "log" | NAT_LOG = "ln";

ArithmeticCalculationExpression:
	expression = ArithmeticExpression ;
	
ArithmeticExpression:
	AddExpression;
	
AddExpression returns ArithmeticExpression:
	MultExpression ({AddExpression.left = current} addOperator = AddOperator right = MultExpression)*;

MultExpression returns ArithmeticExpression:
	ExpExpression ({MultExpression.left = current} 
		multOperator = MultOperator right = ExpExpression)*;

ExpExpression returns ArithmeticExpression:
	(MinMaxExpression | OneParameterArithmetics) ({ExpExpression.left = current} "^" right = (MinMaxExpression | OneParameterArithmetics))*;
	
MinMaxExpression returns ArithmeticExpression:
	{MinMaxExpression} minMaxOperator = MinMaxOperator '(' left = ArithmeticExpression "," right = ArithmeticExpression ')';

OneParameterArithmetics returns ArithmeticExpression: {OneParameterArithmetics} 
	(negative?="-")? (operator = OneParameterOperator)? "("expression = ArithmeticExpression ")" 
	| ArithmeticAttribute;

ArithmeticAttribute returns ArithmeticExpression:
	EditorLiteralExpression |
	EditorAttributeExpression |
	EditorCountExpression;