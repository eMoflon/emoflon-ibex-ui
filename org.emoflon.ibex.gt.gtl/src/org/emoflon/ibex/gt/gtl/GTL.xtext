grammar org.emoflon.ibex.gt.gtl.GTL with org.emoflon.ibex.common.slimgt.SlimGT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/common/slimgt/SlimGT" as slimGT

generate gTL "http://www.emoflon.org/ibex/gt/gtl/GTL"

@Override
EditorFile:
	package = PackageDeclaration
	imports += Import
	importedPatterns += PatternImport
	rules += SlimRule
;


PackageDeclaration:
	'package' name = QualifiedName
;

PatternImport : 
	'from' file = StringLiteral 'import' ('*' | pattern = [SlimRule|ID])
;

@Override
SlimRule:
	(abstract?='abstract')? 
	type = GTLType 
	name = ID 
	('(' parameters+=SlimParameter (',' parameters+=SlimParameter)* ')')? 
	(refining ?= 'refines' refinement+=GTLRuleRefinement (',' refinement+=GTLRuleRefinement)*)? 
	'{'
			(contextNodes += SlimRuleNodeContext 		|
			createdNodes += SlimRuleNodeCreation 		|
			deletedNodes += GTLRuleNodeDeletion 		|
			atrConditions += SlimRuleAttributeCondition |
			//watchDogs += GTLRuleWatchDogs 				|
			invocations += SlimRuleInvocation)
	'}' 
	(stochastic ?='@' probability = ValueExpression)?
;

@Override
SlimParameter:
  name=ID ':' (type = [ecore::EDataType])
;

enum GTLType :
	PATTERN = 'pattern' | RULE = 'rule'
;

GTLRuleRefinement:
	name = (GTLRuleRefinementPlain | GTLRuleRefinementAliased)
;

GTLRuleRefinementPlain:
	name=[SlimRule|ID]
;

GTLRuleRefinementAliased:
	superRule=[SlimRule|ID] 'as' name=ID
;

GTLRuleRefinmentNode:
	refinement=[GTLRuleRefinement|ID] '.' refinementNode=[SlimRuleNode|ID]
;

GTLRuleNodeDeletion :
	'--' deletion = SlimRuleNode
;

@Override
SlimRuleNode:
	(refining ?= '@refines'  refinement=GTLRuleRefinmentNode)?
	name = ID ':' type=[ecore::EClass] ('{'
		(contextEdges += SlimRuleEdgeContext |
		createdEdges += SlimRuleEdgeCreation |
		deletedEdges += GTLRuleEdgeDeletion |
		edgeIterators += GTLEdgeIterator |
		assignments += SlimRuleAttributeAssignment)
	'}')?
;

GTLRuleEdgeDeletion:
	'--' deletion = SlimRuleSimpleEdge
;

GTLRuleWatchDogs:
	'watch' '(' nodeAttribute=NodeAttributeExpression ')'
;

@Override
ExpressionOperand:
	operand = (NodeAttributeExpression | CountExpression | GTLEdgeIteratorAttributeExpression | ArithmeticLiteral | EnumExpression | GTLParameterExpression | Constant)
;

GTLParameterExpression:
	'param' '::' parameter = [slimGT::SlimParameter|ID]
;

GTLEdgeIterator:
	'forEach' type=[ecore::EReference] '->' name=ID ('<'subType=[ecore::EClass]'>')? '{'
		(iteratorAttributes+=GTLEdgeIteratorAttributeAssignment | references+=GTLEdgeIteratorReference)+
	'}'
;

GTLEdgeIteratorAttributeExpression:
	'iterator' '::' iterator=[GTLEdgeIterator] '.' attribute=[ecore::EAttribute];

GTLEdgeIteratorAttributeAssignment:
	GTLEdgeIteratorAttributeAssignmentItr | GTLEdgeIteratorAttributeAssignmentNode
;
	
GTLEdgeIteratorAttributeAssignmentItr:
 	iteratorAttribute=GTLEdgeIteratorAttributeExpression ':=' value=ValueExpression
;
	
GTLEdgeIteratorAttributeAssignmentNode:
 	nodeAttribute=NodeAttributeExpression ':=' value=ValueExpression
;

GTLEdgeIteratorReference:
 	operator=EdgeIteratorOperator source=[SlimRuleNode|ID] '-' type=[ecore::EReference] '->' target=[GTLEdgeIterator|ID]
;

enum EdgeIteratorOperator:
	CREATE = '++' | DELETE = '--'
;