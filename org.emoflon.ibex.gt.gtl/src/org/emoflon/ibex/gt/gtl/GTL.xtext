grammar org.emoflon.ibex.gt.gtl.GTL with org.emoflon.ibex.common.slimgt.SlimGT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/common/slimgt/SlimGT" as slimGT

generate gTL "http://www.emoflon.org/ibex/gt/gtl/GTL"

@Override
EditorFile:
	package = PackageDeclaration
	imports += Import
	importedPatterns += PatternImport
	rules += SlimRule
;

PatternImport : 
	'from' file = StringLiteral 'import' ('*' | pattern = [SlimRule|ID])
;

@Override
SlimRule:
	(abstract?='abstract')? 
	type = GTLType 
	name = ID 
	('(' parameters+=GTLRuleParameter (',' parameters+=GTLRuleParameter)* ')')? 
	(refinement=GTLRuleRefinement)? 
	'{'
			(contextNodes += SlimRuleNodeContext |
			createdNodes += SlimRuleNodeCreation |
			deletedNodes += GTLRuleNodeDeletion |
			atrConditions += SlimRuleAttributeCondition |
			invocations += GTLInvocation)
	'}'
;

enum GTLType :
	PATTERN = 'pattern' | RULE = 'rule'
;

GTLRuleParameter:
  name=ID ':' type=[ecore::EDataType]
;

GTLRuleRefinement:
	'refines' superRule=[SlimRule|ID] ('['mappings+=GTLNodeMapping (',' mappings+=GTLNodeMapping)*']')?
;

GTLRuleNodeDeletion :
	'--' deletion = SlimRuleNode
;

GTLInvocation :
	type=GTLInvocationType supportPattern=[SlimRule|ID] ('['mappings+=GTLNodeMapping (',' mappings+=GTLNodeMapping)*']')?
;

enum GTLInvocationType :
	POSITIVE = 'enforce' | NEGATIVE = 'forbid'
;

GTLNodeMapping:
	'from' srcNode = [slimGT::SlimRuleNode|ID] 'to' trgNode = [slimGT::SlimRuleNode|ID]
;