grammar org.emoflon.ibex.gt.gtl.GTL with org.emoflon.ibex.common.slimgt.SlimGT

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emoflon.org/ibex/common/slimgt/SlimGT" as slimGT

generate gTL "http://www.emoflon.org/ibex/gt/gtl/GTL"

@Override
EditorFile:
	package = PackageDeclaration
	imports += Import
	importedPatterns += PatternImport
	rules += SlimRule
;

PatternImport : 
	'from' file = StringLiteral 'import' ('*' | pattern = [SlimRule|ID])
;

@Override
SlimRule:
	(abstract?='abstract')? 
	type = GTLType 
	name = ID 
	('(' parameters+=GTLRuleParameter (',' parameters+=GTLRuleParameter)* ')')? 
	(refinement=GTLRuleRefinement)? 
	'{'
			(contextNodes += SlimRuleNodeContext |
			createdNodes += SlimRuleNodeCreation |
			deletedNodes += GTLRuleNodeDeletion |
			atrConditions += SlimRuleAttributeCondition |
			watchDogs += GTLRuleWatchDogs |
			invocations += GTLInvocation)
	'}' (stochastic ?='@' probability = ValueExpression)?
;

enum GTLType :
	PATTERN = 'pattern' | RULE = 'rule'
;

GTLRuleParameter:
  name=ID ':' type=[ecore::EDataType]
;

GTLRuleRefinement:
	'refines' superRule=[SlimRule|ID] (mappings=SlimRuleNodeMappings)?
;

GTLRuleNodeDeletion :
	'--' deletion = SlimRuleNode
;

@Override
SlimRuleNode:
	name = ID ':' type=[ecore::EClass | QualifiedName] ('{'
		(contextEdges += SlimRuleEdgeContext |
		createdEdges += SlimRuleEdgeCreation |
		deletedEdges += GTLRuleEdgeDeletion |
		edgeIterators += GTLEdgeIterator |
		assignments += SlimRuleAttributeAssignment)
	'}')?
;

GTLRuleEdgeDeletion:
	'--' deletion = SlimRuleSimpleEdge
;

GTLRuleWatchDogs:
	'watch' '(' nodeAttribute=NodeAttributeExpression ')'
;

@Override
ExpressionOperand:
	operand = (NodeAttributeExpression | CountExpression | ArithmeticLiteral | EnumExpression | ParameterExpression | Constant)
;

ParameterExpression:
	parameter = [GTLRuleParameter|ID]
;

GTLInvocation :
	type=GTLInvocationType supportPattern=[SlimRule|ID] (mappings=SlimRuleNodeMappings)?
;

enum GTLInvocationType :
	POSITIVE = 'enforce' | NEGATIVE = 'forbid'
;

GTLEdgeIterator:
	'forEach' type=[ecore::EReference] '->' name=ID ('<'subType=[ecore::EClass]'>')? '{'
		(iteratorAttributes+=GTLEdgeIteratorAttributeAssignment | references+=GTLEdgeIteratorReference)+
	'}'
;

GTLEdgeIteratorAttributeExpression:
	'iterator::' iterator=[GTLEdgeIterator] '.' attribute=[ecore::EAttribute];

GTLEdgeIteratorAttributeAssignment:
	GTLEdgeIteratorAttributeAssignmentItr | GTLEdgeIteratorAttributeAssignmentNode
;
	
GTLEdgeIteratorAttributeAssignmentItr:
 	iteratorAttribute=GTLEdgeIteratorAttributeExpression ':=' value=ValueExpression
;
	
GTLEdgeIteratorAttributeAssignmentNode:
 	nodeAttribute=NodeAttributeExpression ':=' value=ValueExpression
;

GTLEdgeIteratorReference:
 	operator=EdgeIteratorOperator source=[SlimRuleNode|ID] '-' type=[ecore::EReference] '->' target=[GTLEdgeIterator|ID]
;

enum EdgeIteratorOperator:
	CREATE = '++' | DELETE = '--'
;